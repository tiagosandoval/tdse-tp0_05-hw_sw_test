
tdse-tp0_05-hw_sw_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e54  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08005004  08005004  00006004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a4  080052a4  00007084  2**0
                  CONTENTS
  4 .ARM          00000008  080052a4  080052a4  000062a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052ac  080052ac  00007084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052ac  080052ac  000062ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052b0  080052b0  000062b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080052b4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007084  2**0
                  CONTENTS
 10 .bss          000009e8  20000084  20000084  00007084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000a6c  20000a6c  00007084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f216  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002406  00000000  00000000  000162ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c18  00000000  00000000  000186d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000093b  00000000  00000000  000192e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002557a  00000000  00000000  00019c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000101e2  00000000  00000000  0003f19d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da8e7  00000000  00000000  0004f37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00129c66  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e28  00000000  00000000  00129cac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0012dad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004fec 	.word	0x08004fec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08004fec 	.word	0x08004fec

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000594:	f003 fb7e 	bl	8003c94 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f000 fc08 	bl	8000dac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f80e 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 f91c 	bl	80007dc <MX_GPIO_Init>
  MX_ETH_Init();
 80005a4:	f000 f874 	bl	8000690 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005a8:	f000 f8c0 	bl	800072c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ac:	f000 f8e8 	bl	8000780 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* Application Init */


  app_init();
 80005b0:	f002 fdfe 	bl	80031b0 <app_init>

    /* USER CODE BEGIN 3 */
	  /* Application Update */


	  app_update();
 80005b4:	f002 feb2 	bl	800331c <app_update>
 80005b8:	e7fc      	b.n	80005b4 <main+0x24>
	...

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	@ 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	@ 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f003 fdeb 	bl	80041a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b28      	ldr	r3, [pc, #160]	@ (8000688 <SystemClock_Config+0xcc>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a27      	ldr	r2, [pc, #156]	@ (8000688 <SystemClock_Config+0xcc>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b25      	ldr	r3, [pc, #148]	@ (8000688 <SystemClock_Config+0xcc>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b22      	ldr	r3, [pc, #136]	@ (800068c <SystemClock_Config+0xd0>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a21      	ldr	r2, [pc, #132]	@ (800068c <SystemClock_Config+0xd0>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <SystemClock_Config+0xd0>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800061c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000620:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800062c:	2304      	movs	r3, #4
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000630:	23a8      	movs	r3, #168	@ 0xa8
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fb59 	bl	8001cf8 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 f974 	bl	8000938 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800065c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000662:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2105      	movs	r1, #5
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fdba 	bl	80021e8 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800067a:	f000 f95d 	bl	8000938 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	@ 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000694:	4b1f      	ldr	r3, [pc, #124]	@ (8000714 <MX_ETH_Init+0x84>)
 8000696:	4a20      	ldr	r2, [pc, #128]	@ (8000718 <MX_ETH_Init+0x88>)
 8000698:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800069a:	4b20      	ldr	r3, [pc, #128]	@ (800071c <MX_ETH_Init+0x8c>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006a0:	4b1e      	ldr	r3, [pc, #120]	@ (800071c <MX_ETH_Init+0x8c>)
 80006a2:	2280      	movs	r2, #128	@ 0x80
 80006a4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <MX_ETH_Init+0x8c>)
 80006a8:	22e1      	movs	r2, #225	@ 0xe1
 80006aa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <MX_ETH_Init+0x8c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80006b2:	4b1a      	ldr	r3, [pc, #104]	@ (800071c <MX_ETH_Init+0x8c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80006b8:	4b18      	ldr	r3, [pc, #96]	@ (800071c <MX_ETH_Init+0x8c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80006be:	4b15      	ldr	r3, [pc, #84]	@ (8000714 <MX_ETH_Init+0x84>)
 80006c0:	4a16      	ldr	r2, [pc, #88]	@ (800071c <MX_ETH_Init+0x8c>)
 80006c2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80006c4:	4b13      	ldr	r3, [pc, #76]	@ (8000714 <MX_ETH_Init+0x84>)
 80006c6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80006ca:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80006cc:	4b11      	ldr	r3, [pc, #68]	@ (8000714 <MX_ETH_Init+0x84>)
 80006ce:	4a14      	ldr	r2, [pc, #80]	@ (8000720 <MX_ETH_Init+0x90>)
 80006d0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80006d2:	4b10      	ldr	r3, [pc, #64]	@ (8000714 <MX_ETH_Init+0x84>)
 80006d4:	4a13      	ldr	r2, [pc, #76]	@ (8000724 <MX_ETH_Init+0x94>)
 80006d6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000714 <MX_ETH_Init+0x84>)
 80006da:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80006de:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80006e0:	480c      	ldr	r0, [pc, #48]	@ (8000714 <MX_ETH_Init+0x84>)
 80006e2:	f000 fce5 	bl	80010b0 <HAL_ETH_Init>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80006ec:	f000 f924 	bl	8000938 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80006f0:	2238      	movs	r2, #56	@ 0x38
 80006f2:	2100      	movs	r1, #0
 80006f4:	480c      	ldr	r0, [pc, #48]	@ (8000728 <MX_ETH_Init+0x98>)
 80006f6:	f003 fd56 	bl	80041a6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	@ (8000728 <MX_ETH_Init+0x98>)
 80006fc:	2221      	movs	r2, #33	@ 0x21
 80006fe:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000700:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_ETH_Init+0x98>)
 8000702:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000706:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000708:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <MX_ETH_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	20000218 	.word	0x20000218
 8000718:	40028000 	.word	0x40028000
 800071c:	200007f4 	.word	0x200007f4
 8000720:	20000178 	.word	0x20000178
 8000724:	200000d8 	.word	0x200000d8
 8000728:	200000a0 	.word	0x200000a0

0800072c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000730:	4b11      	ldr	r3, [pc, #68]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000732:	4a12      	ldr	r2, [pc, #72]	@ (800077c <MX_USART3_UART_Init+0x50>)
 8000734:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000736:	4b10      	ldr	r3, [pc, #64]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0b      	ldr	r3, [pc, #44]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b06      	ldr	r3, [pc, #24]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000762:	4805      	ldr	r0, [pc, #20]	@ (8000778 <MX_USART3_UART_Init+0x4c>)
 8000764:	f001 ff60 	bl	8002628 <HAL_UART_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800076e:	f000 f8e3 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	200002c8 	.word	0x200002c8
 800077c:	40004800 	.word	0x40004800

08000780 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000784:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000786:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800078a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2204      	movs	r2, #4
 8000790:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	2202      	movs	r2, #2
 8000796:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a0:	2202      	movs	r2, #2
 80007a2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80007b0:	4b09      	ldr	r3, [pc, #36]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007b8:	2201      	movs	r2, #1
 80007ba:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	@ (80007d8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80007c4:	f001 f989 	bl	8001ada <HAL_PCD_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f8b3 	bl	8000938 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000310 	.word	0x20000310

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	@ 0x30
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	4b4c      	ldr	r3, [pc, #304]	@ (8000928 <MX_GPIO_Init+0x14c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a4b      	ldr	r2, [pc, #300]	@ (8000928 <MX_GPIO_Init+0x14c>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b49      	ldr	r3, [pc, #292]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	4b45      	ldr	r3, [pc, #276]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a44      	ldr	r2, [pc, #272]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b42      	ldr	r3, [pc, #264]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b3e      	ldr	r3, [pc, #248]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a3d      	ldr	r2, [pc, #244]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b3b      	ldr	r3, [pc, #236]	@ (8000928 <MX_GPIO_Init+0x14c>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b37      	ldr	r3, [pc, #220]	@ (8000928 <MX_GPIO_Init+0x14c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a36      	ldr	r2, [pc, #216]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b34      	ldr	r3, [pc, #208]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b30      	ldr	r3, [pc, #192]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a2f      	ldr	r2, [pc, #188]	@ (8000928 <MX_GPIO_Init+0x14c>)
 800086c:	f043 0308 	orr.w	r3, r3, #8
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0308 	and.w	r3, r3, #8
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b29      	ldr	r3, [pc, #164]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a28      	ldr	r2, [pc, #160]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000888:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_GPIO_Init+0x14c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008a0:	4822      	ldr	r0, [pc, #136]	@ (800092c <MX_GPIO_Init+0x150>)
 80008a2:	f001 f901 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2140      	movs	r1, #64	@ 0x40
 80008aa:	4821      	ldr	r0, [pc, #132]	@ (8000930 <MX_GPIO_Init+0x154>)
 80008ac:	f001 f8fc 	bl	8001aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	481b      	ldr	r0, [pc, #108]	@ (8000934 <MX_GPIO_Init+0x158>)
 80008c8:	f000 ff42 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008cc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4811      	ldr	r0, [pc, #68]	@ (800092c <MX_GPIO_Init+0x150>)
 80008e6:	f000 ff33 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ea:	2340      	movs	r3, #64	@ 0x40
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	480b      	ldr	r0, [pc, #44]	@ (8000930 <MX_GPIO_Init+0x154>)
 8000902:	f000 ff25 	bl	8001750 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000906:	2380      	movs	r3, #128	@ 0x80
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	4805      	ldr	r0, [pc, #20]	@ (8000930 <MX_GPIO_Init+0x154>)
 800091a:	f000 ff19 	bl	8001750 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800091e:	bf00      	nop
 8000920:	3730      	adds	r7, #48	@ 0x30
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40020400 	.word	0x40020400
 8000930:	40021800 	.word	0x40021800
 8000934:	40020800 	.word	0x40020800

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093c:	b672      	cpsid	i
}
 800093e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000940:	bf00      	nop
 8000942:	e7fd      	b.n	8000940 <Error_Handler+0x8>

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	4b10      	ldr	r3, [pc, #64]	@ (8000990 <HAL_MspInit+0x4c>)
 8000950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000952:	4a0f      	ldr	r2, [pc, #60]	@ (8000990 <HAL_MspInit+0x4c>)
 8000954:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000958:	6453      	str	r3, [r2, #68]	@ 0x44
 800095a:	4b0d      	ldr	r3, [pc, #52]	@ (8000990 <HAL_MspInit+0x4c>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800095e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000962:	607b      	str	r3, [r7, #4]
 8000964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <HAL_MspInit+0x4c>)
 8000970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <HAL_MspInit+0x4c>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097e:	603b      	str	r3, [r7, #0]
 8000980:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	bf00      	nop
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800

08000994 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	@ 0x38
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a55      	ldr	r2, [pc, #340]	@ (8000b08 <HAL_ETH_MspInit+0x174>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	f040 80a4 	bne.w	8000b00 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
 80009bc:	4b53      	ldr	r3, [pc, #332]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 80009be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c0:	4a52      	ldr	r2, [pc, #328]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 80009c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80009c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80009c8:	4b50      	ldr	r3, [pc, #320]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 80009ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80009d0:	623b      	str	r3, [r7, #32]
 80009d2:	6a3b      	ldr	r3, [r7, #32]
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
 80009d8:	4b4c      	ldr	r3, [pc, #304]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 80009da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009dc:	4a4b      	ldr	r2, [pc, #300]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 80009de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80009e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e4:	4b49      	ldr	r3, [pc, #292]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 80009e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80009ec:	61fb      	str	r3, [r7, #28]
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	2300      	movs	r3, #0
 80009f2:	61bb      	str	r3, [r7, #24]
 80009f4:	4b45      	ldr	r3, [pc, #276]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f8:	4a44      	ldr	r2, [pc, #272]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 80009fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80009fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a00:	4b42      	ldr	r3, [pc, #264]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	4b3e      	ldr	r3, [pc, #248]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a14:	4a3d      	ldr	r2, [pc, #244]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1c:	4b3b      	ldr	r3, [pc, #236]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	617b      	str	r3, [r7, #20]
 8000a26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a28:	2300      	movs	r3, #0
 8000a2a:	613b      	str	r3, [r7, #16]
 8000a2c:	4b37      	ldr	r3, [pc, #220]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a30:	4a36      	ldr	r2, [pc, #216]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a32:	f043 0301 	orr.w	r3, r3, #1
 8000a36:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a38:	4b34      	ldr	r3, [pc, #208]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a44:	2300      	movs	r3, #0
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	4b30      	ldr	r3, [pc, #192]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a4c:	4a2f      	ldr	r2, [pc, #188]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a54:	4b2d      	ldr	r3, [pc, #180]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a58:	f003 0302 	and.w	r3, r3, #2
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	4b29      	ldr	r3, [pc, #164]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a68:	4a28      	ldr	r2, [pc, #160]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a70:	4b26      	ldr	r3, [pc, #152]	@ (8000b0c <HAL_ETH_MspInit+0x178>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a7c:	2332      	movs	r3, #50	@ 0x32
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a80:	2302      	movs	r3, #2
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a88:	2303      	movs	r3, #3
 8000a8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8c:	230b      	movs	r3, #11
 8000a8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a94:	4619      	mov	r1, r3
 8000a96:	481e      	ldr	r0, [pc, #120]	@ (8000b10 <HAL_ETH_MspInit+0x17c>)
 8000a98:	f000 fe5a 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a9c:	2386      	movs	r3, #134	@ 0x86
 8000a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aac:	230b      	movs	r3, #11
 8000aae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4817      	ldr	r0, [pc, #92]	@ (8000b14 <HAL_ETH_MspInit+0x180>)
 8000ab8:	f000 fe4a 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000abc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ace:	230b      	movs	r3, #11
 8000ad0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000ad2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480f      	ldr	r0, [pc, #60]	@ (8000b18 <HAL_ETH_MspInit+0x184>)
 8000ada:	f000 fe39 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ade:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aec:	2303      	movs	r3, #3
 8000aee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af0:	230b      	movs	r3, #11
 8000af2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4808      	ldr	r0, [pc, #32]	@ (8000b1c <HAL_ETH_MspInit+0x188>)
 8000afc:	f000 fe28 	bl	8001750 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000b00:	bf00      	nop
 8000b02:	3738      	adds	r7, #56	@ 0x38
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40028000 	.word	0x40028000
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020000 	.word	0x40020000
 8000b18:	40020400 	.word	0x40020400
 8000b1c:	40021800 	.word	0x40021800

08000b20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b08a      	sub	sp, #40	@ 0x28
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a19      	ldr	r2, [pc, #100]	@ (8000ba4 <HAL_UART_MspInit+0x84>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d12c      	bne.n	8000b9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4a:	4a17      	ldr	r2, [pc, #92]	@ (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b11      	ldr	r3, [pc, #68]	@ (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a10      	ldr	r2, [pc, #64]	@ (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b68:	f043 0308 	orr.w	r3, r3, #8
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <HAL_UART_MspInit+0x88>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0308 	and.w	r3, r3, #8
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000b7a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4805      	ldr	r0, [pc, #20]	@ (8000bac <HAL_UART_MspInit+0x8c>)
 8000b98:	f000 fdda 	bl	8001750 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000b9c:	bf00      	nop
 8000b9e:	3728      	adds	r7, #40	@ 0x28
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40004800 	.word	0x40004800
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020c00 	.word	0x40020c00

08000bb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000bd0:	d13f      	bne.n	8000c52 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b21      	ldr	r3, [pc, #132]	@ (8000c5c <HAL_PCD_MspInit+0xac>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bda:	4a20      	ldr	r2, [pc, #128]	@ (8000c5c <HAL_PCD_MspInit+0xac>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c5c <HAL_PCD_MspInit+0xac>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000bee:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000bf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c00:	230a      	movs	r3, #10
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4815      	ldr	r0, [pc, #84]	@ (8000c60 <HAL_PCD_MspInit+0xb0>)
 8000c0c:	f000 fda0 	bl	8001750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000c10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	480e      	ldr	r0, [pc, #56]	@ (8000c60 <HAL_PCD_MspInit+0xb0>)
 8000c26:	f000 fd93 	bl	8001750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <HAL_PCD_MspInit+0xac>)
 8000c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000c2e:	4a0b      	ldr	r2, [pc, #44]	@ (8000c5c <HAL_PCD_MspInit+0xac>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c34:	6353      	str	r3, [r2, #52]	@ 0x34
 8000c36:	2300      	movs	r3, #0
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	4b08      	ldr	r3, [pc, #32]	@ (8000c5c <HAL_PCD_MspInit+0xac>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3e:	4a07      	ldr	r2, [pc, #28]	@ (8000c5c <HAL_PCD_MspInit+0xac>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c46:	4b05      	ldr	r3, [pc, #20]	@ (8000c5c <HAL_PCD_MspInit+0xac>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	@ 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40020000 	.word	0x40020000

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <NMI_Handler+0x4>

08000c6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <HardFault_Handler+0x4>

08000c74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <MemManage_Handler+0x4>

08000c7c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <BusFault_Handler+0x4>

08000c84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <UsageFault_Handler+0x4>

08000c8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cba:	f000 f8c9 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8000cbe:	f000 f9f0 	bl	80010a2 <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
	...

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	@ (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f003 faa4 	bl	8004244 <__errno>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	220c      	movs	r2, #12
 8000d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <_sbrk+0x64>)
 8000d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20030000 	.word	0x20030000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	200007fc 	.word	0x200007fc
 8000d30:	20000a70 	.word	0x20000a70

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d5c:	f7ff ffea 	bl	8000d34 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d60:	480c      	ldr	r0, [pc, #48]	@ (8000d94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d62:	490d      	ldr	r1, [pc, #52]	@ (8000d98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d68:	e002      	b.n	8000d70 <LoopCopyDataInit>

08000d6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d6e:	3304      	adds	r3, #4

08000d70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d74:	d3f9      	bcc.n	8000d6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d76:	4a0a      	ldr	r2, [pc, #40]	@ (8000da0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d78:	4c0a      	ldr	r4, [pc, #40]	@ (8000da4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d7c:	e001      	b.n	8000d82 <LoopFillZerobss>

08000d7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d80:	3204      	adds	r2, #4

08000d82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d84:	d3fb      	bcc.n	8000d7e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000d86:	f003 fa63 	bl	8004250 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d8a:	f7ff fc01 	bl	8000590 <main>
  bx  lr    
 8000d8e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d90:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000d94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d98:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000d9c:	080052b4 	.word	0x080052b4
  ldr r2, =_sbss
 8000da0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000da4:	20000a6c 	.word	0x20000a6c

08000da8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da8:	e7fe      	b.n	8000da8 <ADC_IRQHandler>
	...

08000dac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000db0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <HAL_Init+0x40>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <HAL_Init+0x40>)
 8000db6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <HAL_Init+0x40>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	@ (8000dec <HAL_Init+0x40>)
 8000dc2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000dc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_Init+0x40>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <HAL_Init+0x40>)
 8000dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000dd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f000 f931 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f000 f808 	bl	8000df0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000de0:	f7ff fdb0 	bl	8000944 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	40023c00 	.word	0x40023c00

08000df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <HAL_InitTick+0x54>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b12      	ldr	r3, [pc, #72]	@ (8000e48 <HAL_InitTick+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f93b 	bl	800108a <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f911 	bl	8001052 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	@ (8000e4c <HAL_InitTick+0x5c>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000008 	.word	0x20000008
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	@ (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	@ (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000800 	.word	0x20000800

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	20000800 	.word	0x20000800

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	68ba      	ldr	r2, [r7, #8]
 8000ef0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f0a:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	60d3      	str	r3, [r2, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f24:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <__NVIC_GetPriorityGrouping+0x18>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	0a1b      	lsrs	r3, r3, #8
 8000f2a:	f003 0307 	and.w	r3, r3, #7
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000ed00 	.word	0xe000ed00

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	@ (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	@ (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	@ 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	@ 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	@ (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff47 	bl	8000ed8 <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff5c 	bl	8000f20 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffb0 	bl	8000ff8 <SysTick_Config>
 8001098:	4603      	mov	r3, r0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80010a6:	f002 f9d3 	bl	8003450 <HAL_SYSTICK_Callback>
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d101      	bne.n	80010c2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80010be:	2301      	movs	r3, #1
 80010c0:	e08a      	b.n	80011d8 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d106      	bne.n	80010da <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2223      	movs	r2, #35	@ 0x23
 80010d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff fc5d 	bl	8000994 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b40      	ldr	r3, [pc, #256]	@ (80011e0 <HAL_ETH_Init+0x130>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010e2:	4a3f      	ldr	r2, [pc, #252]	@ (80011e0 <HAL_ETH_Init+0x130>)
 80010e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ea:	4b3d      	ldr	r3, [pc, #244]	@ (80011e0 <HAL_ETH_Init+0x130>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80010f6:	4b3b      	ldr	r3, [pc, #236]	@ (80011e4 <HAL_ETH_Init+0x134>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	4a3a      	ldr	r2, [pc, #232]	@ (80011e4 <HAL_ETH_Init+0x134>)
 80010fc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001100:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001102:	4b38      	ldr	r3, [pc, #224]	@ (80011e4 <HAL_ETH_Init+0x134>)
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	4936      	ldr	r1, [pc, #216]	@ (80011e4 <HAL_ETH_Init+0x134>)
 800110c:	4313      	orrs	r3, r2
 800110e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001110:	4b34      	ldr	r3, [pc, #208]	@ (80011e4 <HAL_ETH_Init+0x134>)
 8001112:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	f043 0301 	orr.w	r3, r3, #1
 8001126:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800112a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800112c:	f7ff fea4 	bl	8000e78 <HAL_GetTick>
 8001130:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001132:	e011      	b.n	8001158 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001134:	f7ff fea0 	bl	8000e78 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001142:	d909      	bls.n	8001158 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2204      	movs	r2, #4
 8001148:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	22e0      	movs	r2, #224	@ 0xe0
 8001150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	e03f      	b.n	80011d8 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	2b00      	cmp	r3, #0
 8001168:	d1e4      	bne.n	8001134 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f97a 	bl	8001464 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 fa25 	bl	80015c0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fa7b 	bl	8001672 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	461a      	mov	r2, r3
 8001182:	2100      	movs	r1, #0
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f9e3 	bl	8001550 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001198:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6812      	ldr	r2, [r2, #0]
 80011a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80011ae:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80011c2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2210      	movs	r2, #16
 80011d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	40023800 	.word	0x40023800
 80011e4:	40013800 	.word	0x40013800

080011e8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	4b53      	ldr	r3, [pc, #332]	@ (800134c <ETH_SetMACConfig+0x164>)
 80011fe:	4013      	ands	r3, r2
 8001200:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	7b9b      	ldrb	r3, [r3, #14]
 8001206:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	7c12      	ldrb	r2, [r2, #16]
 800120c:	2a00      	cmp	r2, #0
 800120e:	d102      	bne.n	8001216 <ETH_SetMACConfig+0x2e>
 8001210:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001214:	e000      	b.n	8001218 <ETH_SetMACConfig+0x30>
 8001216:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001218:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800121a:	683a      	ldr	r2, [r7, #0]
 800121c:	7c52      	ldrb	r2, [r2, #17]
 800121e:	2a00      	cmp	r2, #0
 8001220:	d102      	bne.n	8001228 <ETH_SetMACConfig+0x40>
 8001222:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001226:	e000      	b.n	800122a <ETH_SetMACConfig+0x42>
 8001228:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800122a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001230:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	7fdb      	ldrb	r3, [r3, #31]
 8001236:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001238:	431a      	orrs	r2, r3
                        macconf->Speed |
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800123e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	7f92      	ldrb	r2, [r2, #30]
 8001244:	2a00      	cmp	r2, #0
 8001246:	d102      	bne.n	800124e <ETH_SetMACConfig+0x66>
 8001248:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800124c:	e000      	b.n	8001250 <ETH_SetMACConfig+0x68>
 800124e:	2200      	movs	r2, #0
                        macconf->Speed |
 8001250:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	7f1b      	ldrb	r3, [r3, #28]
 8001256:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001258:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800125e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	791b      	ldrb	r3, [r3, #4]
 8001264:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001266:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800126e:	2a00      	cmp	r2, #0
 8001270:	d102      	bne.n	8001278 <ETH_SetMACConfig+0x90>
 8001272:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001276:	e000      	b.n	800127a <ETH_SetMACConfig+0x92>
 8001278:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800127a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	7bdb      	ldrb	r3, [r3, #15]
 8001280:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001282:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001288:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001290:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8001292:	4313      	orrs	r3, r2
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f7ff fdf0 	bl	8000e90 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	699b      	ldr	r3, [r3, #24]
 80012be:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80012c6:	4013      	ands	r3, r2
 80012c8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012ce:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80012d6:	2a00      	cmp	r2, #0
 80012d8:	d101      	bne.n	80012de <ETH_SetMACConfig+0xf6>
 80012da:	2280      	movs	r2, #128	@ 0x80
 80012dc:	e000      	b.n	80012e0 <ETH_SetMACConfig+0xf8>
 80012de:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80012e0:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80012e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80012ee:	2a01      	cmp	r2, #1
 80012f0:	d101      	bne.n	80012f6 <ETH_SetMACConfig+0x10e>
 80012f2:	2208      	movs	r2, #8
 80012f4:	e000      	b.n	80012f8 <ETH_SetMACConfig+0x110>
 80012f6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80012f8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80012fa:	683a      	ldr	r2, [r7, #0]
 80012fc:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8001300:	2a01      	cmp	r2, #1
 8001302:	d101      	bne.n	8001308 <ETH_SetMACConfig+0x120>
 8001304:	2204      	movs	r2, #4
 8001306:	e000      	b.n	800130a <ETH_SetMACConfig+0x122>
 8001308:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800130a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8001312:	2a01      	cmp	r2, #1
 8001314:	d101      	bne.n	800131a <ETH_SetMACConfig+0x132>
 8001316:	2202      	movs	r2, #2
 8001318:	e000      	b.n	800131c <ETH_SetMACConfig+0x134>
 800131a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800131c:	4313      	orrs	r3, r2
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001334:	2001      	movs	r0, #1
 8001336:	f7ff fdab 	bl	8000e90 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	619a      	str	r2, [r3, #24]
}
 8001342:	bf00      	nop
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	fd20810f 	.word	0xfd20810f

08001350 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001362:	699b      	ldr	r3, [r3, #24]
 8001364:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	4b3d      	ldr	r3, [pc, #244]	@ (8001460 <ETH_SetDMAConfig+0x110>)
 800136a:	4013      	ands	r3, r2
 800136c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	7b1b      	ldrb	r3, [r3, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d102      	bne.n	800137c <ETH_SetDMAConfig+0x2c>
 8001376:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800137a:	e000      	b.n	800137e <ETH_SetDMAConfig+0x2e>
 800137c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	7b5b      	ldrb	r3, [r3, #13]
 8001382:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001384:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	7f52      	ldrb	r2, [r2, #29]
 800138a:	2a00      	cmp	r2, #0
 800138c:	d102      	bne.n	8001394 <ETH_SetDMAConfig+0x44>
 800138e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001392:	e000      	b.n	8001396 <ETH_SetDMAConfig+0x46>
 8001394:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001396:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	7b9b      	ldrb	r3, [r3, #14]
 800139c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800139e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80013a4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	7f1b      	ldrb	r3, [r3, #28]
 80013aa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80013ac:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	7f9b      	ldrb	r3, [r3, #30]
 80013b2:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80013b4:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80013ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80013c2:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80013c4:	4313      	orrs	r3, r2
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013d4:	461a      	mov	r2, r3
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80013e6:	2001      	movs	r0, #1
 80013e8:	f7ff fd52 	bl	8000e90 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013f4:	461a      	mov	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	791b      	ldrb	r3, [r3, #4]
 80013fe:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001404:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800140a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001410:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001418:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800141a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001420:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001422:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001428:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6812      	ldr	r2, [r2, #0]
 800142e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001432:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001436:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fd23 	bl	8000e90 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001452:	461a      	mov	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	f8de3f23 	.word	0xf8de3f23

08001464 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0a6      	sub	sp, #152	@ 0x98
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800146c:	2301      	movs	r3, #1
 800146e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8001472:	2301      	movs	r3, #1
 8001474:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001478:	2300      	movs	r3, #0
 800147a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001482:	2301      	movs	r3, #1
 8001484:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800148e:	2301      	movs	r3, #1
 8001490:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8001494:	2301      	movs	r3, #1
 8001496:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80014a6:	2300      	movs	r3, #0
 80014a8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80014aa:	2300      	movs	r3, #0
 80014ac:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80014ba:	2300      	movs	r3, #0
 80014bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80014cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80014d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80014de:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014e2:	4619      	mov	r1, r3
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff fe7f 	bl	80011e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80014ea:	2301      	movs	r3, #1
 80014ec:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80014ee:	2301      	movs	r3, #1
 80014f0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80014f8:	2301      	movs	r3, #1
 80014fa:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80014fc:	2300      	movs	r3, #0
 80014fe:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800150c:	2300      	movs	r3, #0
 800150e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001510:	2301      	movs	r3, #1
 8001512:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001516:	2301      	movs	r3, #1
 8001518:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800151a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800151e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001520:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001524:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001526:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800152a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800152c:	2301      	movs	r3, #1
 800152e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800153a:	f107 0308 	add.w	r3, r7, #8
 800153e:	4619      	mov	r1, r3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff05 	bl	8001350 <ETH_SetDMAConfig>
}
 8001546:	bf00      	nop
 8001548:	3798      	adds	r7, #152	@ 0x98
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
	...

08001550 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	60f8      	str	r0, [r7, #12]
 8001558:	60b9      	str	r1, [r7, #8]
 800155a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3305      	adds	r3, #5
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	021b      	lsls	r3, r3, #8
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	3204      	adds	r2, #4
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	4313      	orrs	r3, r2
 800156c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800156e:	68ba      	ldr	r2, [r7, #8]
 8001570:	4b11      	ldr	r3, [pc, #68]	@ (80015b8 <ETH_MACAddressConfig+0x68>)
 8001572:	4413      	add	r3, r2
 8001574:	461a      	mov	r2, r3
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	3303      	adds	r3, #3
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	061a      	lsls	r2, r3, #24
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3302      	adds	r3, #2
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	041b      	lsls	r3, r3, #16
 800158a:	431a      	orrs	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3301      	adds	r3, #1
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	4313      	orrs	r3, r2
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	7812      	ldrb	r2, [r2, #0]
 800159a:	4313      	orrs	r3, r2
 800159c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	4b06      	ldr	r3, [pc, #24]	@ (80015bc <ETH_MACAddressConfig+0x6c>)
 80015a2:	4413      	add	r3, r2
 80015a4:	461a      	mov	r2, r3
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	6013      	str	r3, [r2, #0]
}
 80015aa:	bf00      	nop
 80015ac:	371c      	adds	r7, #28
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40028040 	.word	0x40028040
 80015bc:	40028044 	.word	0x40028044

080015c0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	e03e      	b.n	800164c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68d9      	ldr	r1, [r3, #12]
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	00db      	lsls	r3, r3, #3
 80015dc:	440b      	add	r3, r1
 80015de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2200      	movs	r2, #0
 80015ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	2200      	movs	r2, #0
 80015f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80015f2:	68bb      	ldr	r3, [r7, #8]
 80015f4:	2200      	movs	r2, #0
 80015f6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	3206      	adds	r2, #6
 8001600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d80c      	bhi.n	8001630 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68d9      	ldr	r1, [r3, #12]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1c5a      	adds	r2, r3, #1
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	440b      	add	r3, r1
 8001628:	461a      	mov	r2, r3
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	e004      	b.n	800163a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	461a      	mov	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	3301      	adds	r3, #1
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d9bd      	bls.n	80015ce <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68da      	ldr	r2, [r3, #12]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001664:	611a      	str	r2, [r3, #16]
}
 8001666:	bf00      	nop
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001672:	b480      	push	{r7}
 8001674:	b085      	sub	sp, #20
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	e048      	b.n	8001712 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6919      	ldr	r1, [r3, #16]
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	00db      	lsls	r3, r3, #3
 800168e:	440b      	add	r3, r1
 8001690:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2200      	movs	r2, #0
 800169c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	2200      	movs	r2, #0
 80016a2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	2200      	movs	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2200      	movs	r2, #0
 80016b4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80016b6:	68bb      	ldr	r3, [r7, #8]
 80016b8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80016bc:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80016d6:	68b9      	ldr	r1, [r7, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	3212      	adds	r2, #18
 80016de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d80c      	bhi.n	8001702 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6919      	ldr	r1, [r3, #16]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	1c5a      	adds	r2, r3, #1
 80016f0:	4613      	mov	r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	4413      	add	r3, r2
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	440b      	add	r3, r1
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60da      	str	r2, [r3, #12]
 8001700:	e004      	b.n	800170c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	691b      	ldr	r3, [r3, #16]
 8001706:	461a      	mov	r2, r3
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	3301      	adds	r3, #1
 8001710:	60fb      	str	r3, [r7, #12]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	2b03      	cmp	r3, #3
 8001716:	d9b3      	bls.n	8001680 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2200      	movs	r2, #0
 8001728:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001742:	60da      	str	r2, [r3, #12]
}
 8001744:	bf00      	nop
 8001746:	3714      	adds	r7, #20
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	@ 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
 800176a:	e177      	b.n	8001a5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800176c:	2201      	movs	r2, #1
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	f040 8166 	bne.w	8001a56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	2b01      	cmp	r3, #1
 8001794:	d005      	beq.n	80017a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d130      	bne.n	8001804 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	2203      	movs	r2, #3
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	68da      	ldr	r2, [r3, #12]
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	005b      	lsls	r3, r3, #1
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d8:	2201      	movs	r2, #1
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	43db      	mvns	r3, r3
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	4013      	ands	r3, r2
 80017e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	091b      	lsrs	r3, r3, #4
 80017ee:	f003 0201 	and.w	r2, r3, #1
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0303 	and.w	r3, r3, #3
 800180c:	2b03      	cmp	r3, #3
 800180e:	d017      	beq.n	8001840 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	689a      	ldr	r2, [r3, #8]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0303 	and.w	r3, r3, #3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d123      	bne.n	8001894 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	08da      	lsrs	r2, r3, #3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3208      	adds	r2, #8
 8001854:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001858:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	69b9      	ldr	r1, [r7, #24]
 8001890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2203      	movs	r2, #3
 80018a0:	fa02 f303 	lsl.w	r3, r2, r3
 80018a4:	43db      	mvns	r3, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4013      	ands	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f003 0203 	and.w	r2, r3, #3
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80c0 	beq.w	8001a56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b66      	ldr	r3, [pc, #408]	@ (8001a74 <HAL_GPIO_Init+0x324>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018de:	4a65      	ldr	r2, [pc, #404]	@ (8001a74 <HAL_GPIO_Init+0x324>)
 80018e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e6:	4b63      	ldr	r3, [pc, #396]	@ (8001a74 <HAL_GPIO_Init+0x324>)
 80018e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018f2:	4a61      	ldr	r2, [pc, #388]	@ (8001a78 <HAL_GPIO_Init+0x328>)
 80018f4:	69fb      	ldr	r3, [r7, #28]
 80018f6:	089b      	lsrs	r3, r3, #2
 80018f8:	3302      	adds	r3, #2
 80018fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	220f      	movs	r2, #15
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a58      	ldr	r2, [pc, #352]	@ (8001a7c <HAL_GPIO_Init+0x32c>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d037      	beq.n	800198e <HAL_GPIO_Init+0x23e>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a57      	ldr	r2, [pc, #348]	@ (8001a80 <HAL_GPIO_Init+0x330>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d031      	beq.n	800198a <HAL_GPIO_Init+0x23a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a56      	ldr	r2, [pc, #344]	@ (8001a84 <HAL_GPIO_Init+0x334>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d02b      	beq.n	8001986 <HAL_GPIO_Init+0x236>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a55      	ldr	r2, [pc, #340]	@ (8001a88 <HAL_GPIO_Init+0x338>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d025      	beq.n	8001982 <HAL_GPIO_Init+0x232>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a54      	ldr	r2, [pc, #336]	@ (8001a8c <HAL_GPIO_Init+0x33c>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d01f      	beq.n	800197e <HAL_GPIO_Init+0x22e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a53      	ldr	r2, [pc, #332]	@ (8001a90 <HAL_GPIO_Init+0x340>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d019      	beq.n	800197a <HAL_GPIO_Init+0x22a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a52      	ldr	r2, [pc, #328]	@ (8001a94 <HAL_GPIO_Init+0x344>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d013      	beq.n	8001976 <HAL_GPIO_Init+0x226>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a51      	ldr	r2, [pc, #324]	@ (8001a98 <HAL_GPIO_Init+0x348>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d00d      	beq.n	8001972 <HAL_GPIO_Init+0x222>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a50      	ldr	r2, [pc, #320]	@ (8001a9c <HAL_GPIO_Init+0x34c>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d007      	beq.n	800196e <HAL_GPIO_Init+0x21e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a4f      	ldr	r2, [pc, #316]	@ (8001aa0 <HAL_GPIO_Init+0x350>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d101      	bne.n	800196a <HAL_GPIO_Init+0x21a>
 8001966:	2309      	movs	r3, #9
 8001968:	e012      	b.n	8001990 <HAL_GPIO_Init+0x240>
 800196a:	230a      	movs	r3, #10
 800196c:	e010      	b.n	8001990 <HAL_GPIO_Init+0x240>
 800196e:	2308      	movs	r3, #8
 8001970:	e00e      	b.n	8001990 <HAL_GPIO_Init+0x240>
 8001972:	2307      	movs	r3, #7
 8001974:	e00c      	b.n	8001990 <HAL_GPIO_Init+0x240>
 8001976:	2306      	movs	r3, #6
 8001978:	e00a      	b.n	8001990 <HAL_GPIO_Init+0x240>
 800197a:	2305      	movs	r3, #5
 800197c:	e008      	b.n	8001990 <HAL_GPIO_Init+0x240>
 800197e:	2304      	movs	r3, #4
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x240>
 8001982:	2303      	movs	r3, #3
 8001984:	e004      	b.n	8001990 <HAL_GPIO_Init+0x240>
 8001986:	2302      	movs	r3, #2
 8001988:	e002      	b.n	8001990 <HAL_GPIO_Init+0x240>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <HAL_GPIO_Init+0x240>
 800198e:	2300      	movs	r3, #0
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	f002 0203 	and.w	r2, r2, #3
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	4093      	lsls	r3, r2
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4313      	orrs	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a0:	4935      	ldr	r1, [pc, #212]	@ (8001a78 <HAL_GPIO_Init+0x328>)
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019ae:	4b3d      	ldr	r3, [pc, #244]	@ (8001aa4 <HAL_GPIO_Init+0x354>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019d2:	4a34      	ldr	r2, [pc, #208]	@ (8001aa4 <HAL_GPIO_Init+0x354>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d8:	4b32      	ldr	r3, [pc, #200]	@ (8001aa4 <HAL_GPIO_Init+0x354>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019fc:	4a29      	ldr	r2, [pc, #164]	@ (8001aa4 <HAL_GPIO_Init+0x354>)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001a02:	4b28      	ldr	r3, [pc, #160]	@ (8001aa4 <HAL_GPIO_Init+0x354>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a26:	4a1f      	ldr	r2, [pc, #124]	@ (8001aa4 <HAL_GPIO_Init+0x354>)
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8001aa4 <HAL_GPIO_Init+0x354>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a50:	4a14      	ldr	r2, [pc, #80]	@ (8001aa4 <HAL_GPIO_Init+0x354>)
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	61fb      	str	r3, [r7, #28]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	2b0f      	cmp	r3, #15
 8001a60:	f67f ae84 	bls.w	800176c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	3724      	adds	r7, #36	@ 0x24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40013800 	.word	0x40013800
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40020400 	.word	0x40020400
 8001a84:	40020800 	.word	0x40020800
 8001a88:	40020c00 	.word	0x40020c00
 8001a8c:	40021000 	.word	0x40021000
 8001a90:	40021400 	.word	0x40021400
 8001a94:	40021800 	.word	0x40021800
 8001a98:	40021c00 	.word	0x40021c00
 8001a9c:	40022000 	.word	0x40022000
 8001aa0:	40022400 	.word	0x40022400
 8001aa4:	40013c00 	.word	0x40013c00

08001aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	807b      	strh	r3, [r7, #2]
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab8:	787b      	ldrb	r3, [r7, #1]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ac4:	e003      	b.n	8001ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	041a      	lsls	r2, r3, #16
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	619a      	str	r2, [r3, #24]
}
 8001ace:	bf00      	nop
 8001ad0:	370c      	adds	r7, #12
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af02      	add	r7, sp, #8
 8001ae0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e101      	b.n	8001cf0 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d106      	bne.n	8001b0c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff f852 	bl	8000bb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2203      	movs	r2, #3
 8001b10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b1a:	d102      	bne.n	8001b22 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f001 f8a6 	bl	8002c78 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	7c1a      	ldrb	r2, [r3, #16]
 8001b34:	f88d 2000 	strb.w	r2, [sp]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b3c:	f001 f838 	bl	8002bb0 <USB_CoreInit>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d005      	beq.n	8001b52 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2202      	movs	r2, #2
 8001b4a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0ce      	b.n	8001cf0 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 f89e 	bl	8002c9a <USB_SetCurrentMode>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d005      	beq.n	8001b70 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2202      	movs	r2, #2
 8001b68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0bf      	b.n	8001cf0 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b70:	2300      	movs	r3, #0
 8001b72:	73fb      	strb	r3, [r7, #15]
 8001b74:	e04a      	b.n	8001c0c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	3315      	adds	r3, #21
 8001b86:	2201      	movs	r2, #1
 8001b88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	3314      	adds	r3, #20
 8001b9a:	7bfa      	ldrb	r2, [r7, #15]
 8001b9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	b298      	uxth	r0, r3
 8001ba4:	6879      	ldr	r1, [r7, #4]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	00db      	lsls	r3, r3, #3
 8001baa:	4413      	add	r3, r2
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	332e      	adds	r3, #46	@ 0x2e
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	440b      	add	r3, r1
 8001bc4:	3318      	adds	r3, #24
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	331c      	adds	r3, #28
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001bde:	7bfa      	ldrb	r2, [r7, #15]
 8001be0:	6879      	ldr	r1, [r7, #4]
 8001be2:	4613      	mov	r3, r2
 8001be4:	00db      	lsls	r3, r3, #3
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	440b      	add	r3, r1
 8001bec:	3320      	adds	r3, #32
 8001bee:	2200      	movs	r2, #0
 8001bf0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001bf2:	7bfa      	ldrb	r2, [r7, #15]
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3324      	adds	r3, #36	@ 0x24
 8001c02:	2200      	movs	r2, #0
 8001c04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c06:	7bfb      	ldrb	r3, [r7, #15]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	791b      	ldrb	r3, [r3, #4]
 8001c10:	7bfa      	ldrb	r2, [r7, #15]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d3af      	bcc.n	8001b76 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
 8001c1a:	e044      	b.n	8001ca6 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c32:	7bfa      	ldrb	r2, [r7, #15]
 8001c34:	6879      	ldr	r1, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	00db      	lsls	r3, r3, #3
 8001c3a:	4413      	add	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	6879      	ldr	r1, [r7, #4]
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4413      	add	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	440b      	add	r3, r1
 8001c56:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	6879      	ldr	r1, [r7, #4]
 8001c62:	4613      	mov	r3, r2
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c74:	7bfa      	ldrb	r2, [r7, #15]
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	440b      	add	r3, r1
 8001c82:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c8a:	7bfa      	ldrb	r2, [r7, #15]
 8001c8c:	6879      	ldr	r1, [r7, #4]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	4413      	add	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	440b      	add	r3, r1
 8001c98:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	791b      	ldrb	r3, [r3, #4]
 8001caa:	7bfa      	ldrb	r2, [r7, #15]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d3b5      	bcc.n	8001c1c <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6818      	ldr	r0, [r3, #0]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	7c1a      	ldrb	r2, [r3, #16]
 8001cb8:	f88d 2000 	strb.w	r2, [sp]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cc0:	f001 f838 	bl	8002d34 <USB_DevInit>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d005      	beq.n	8001cd6 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2202      	movs	r2, #2
 8001cce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e00c      	b.n	8001cf0 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 fa00 	bl	80030ee <USB_DevDisconnect>

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e267      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d075      	beq.n	8001e02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d16:	4b88      	ldr	r3, [pc, #544]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d00c      	beq.n	8001d3c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d22:	4b85      	ldr	r3, [pc, #532]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001d2a:	2b08      	cmp	r3, #8
 8001d2c:	d112      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d2e:	4b82      	ldr	r3, [pc, #520]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d3a:	d10b      	bne.n	8001d54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d05b      	beq.n	8001e00 <HAL_RCC_OscConfig+0x108>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d157      	bne.n	8001e00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e242      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_OscConfig+0x74>
 8001d5e:	4b76      	ldr	r3, [pc, #472]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a75      	ldr	r2, [pc, #468]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	e01d      	b.n	8001da8 <HAL_RCC_OscConfig+0xb0>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d74:	d10c      	bne.n	8001d90 <HAL_RCC_OscConfig+0x98>
 8001d76:	4b70      	ldr	r3, [pc, #448]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a6f      	ldr	r2, [pc, #444]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	4b6d      	ldr	r3, [pc, #436]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6c      	ldr	r2, [pc, #432]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	e00b      	b.n	8001da8 <HAL_RCC_OscConfig+0xb0>
 8001d90:	4b69      	ldr	r3, [pc, #420]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a68      	ldr	r2, [pc, #416]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	4b66      	ldr	r3, [pc, #408]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a65      	ldr	r2, [pc, #404]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001da2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001da6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d013      	beq.n	8001dd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db0:	f7ff f862 	bl	8000e78 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff f85e 	bl	8000e78 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	@ 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e207      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dca:	4b5b      	ldr	r3, [pc, #364]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0xc0>
 8001dd6:	e014      	b.n	8001e02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f84e 	bl	8000e78 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de0:	f7ff f84a 	bl	8000e78 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b64      	cmp	r3, #100	@ 0x64
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e1f3      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df2:	4b51      	ldr	r3, [pc, #324]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0xe8>
 8001dfe:	e000      	b.n	8001e02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d063      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 030c 	and.w	r3, r3, #12
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00b      	beq.n	8001e32 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1a:	4b47      	ldr	r3, [pc, #284]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001e22:	2b08      	cmp	r3, #8
 8001e24:	d11c      	bne.n	8001e60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e26:	4b44      	ldr	r3, [pc, #272]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d116      	bne.n	8001e60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e32:	4b41      	ldr	r3, [pc, #260]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d005      	beq.n	8001e4a <HAL_RCC_OscConfig+0x152>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d001      	beq.n	8001e4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e46:	2301      	movs	r3, #1
 8001e48:	e1c7      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4937      	ldr	r1, [pc, #220]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e5e:	e03a      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d020      	beq.n	8001eaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e68:	4b34      	ldr	r3, [pc, #208]	@ (8001f3c <HAL_RCC_OscConfig+0x244>)
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6e:	f7ff f803 	bl	8000e78 <HAL_GetTick>
 8001e72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e76:	f7fe ffff 	bl	8000e78 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1a8      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e88:	4b2b      	ldr	r3, [pc, #172]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 0302 	and.w	r3, r3, #2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d0f0      	beq.n	8001e76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	691b      	ldr	r3, [r3, #16]
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4925      	ldr	r1, [pc, #148]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]
 8001ea8:	e015      	b.n	8001ed6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eaa:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_RCC_OscConfig+0x244>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ffe2 	bl	8000e78 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb8:	f7fe ffde 	bl	8000e78 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e187      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eca:	4b1b      	ldr	r3, [pc, #108]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0308 	and.w	r3, r3, #8
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d036      	beq.n	8001f50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d016      	beq.n	8001f18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eea:	4b15      	ldr	r3, [pc, #84]	@ (8001f40 <HAL_RCC_OscConfig+0x248>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef0:	f7fe ffc2 	bl	8000e78 <HAL_GetTick>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ef6:	e008      	b.n	8001f0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ef8:	f7fe ffbe 	bl	8000e78 <HAL_GetTick>
 8001efc:	4602      	mov	r2, r0
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e167      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f38 <HAL_RCC_OscConfig+0x240>)
 8001f0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d0f0      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x200>
 8001f16:	e01b      	b.n	8001f50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f18:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <HAL_RCC_OscConfig+0x248>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe ffab 	bl	8000e78 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f24:	e00e      	b.n	8001f44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f26:	f7fe ffa7 	bl	8000e78 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d907      	bls.n	8001f44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e150      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	42470000 	.word	0x42470000
 8001f40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f44:	4b88      	ldr	r3, [pc, #544]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ea      	bne.n	8001f26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8097 	beq.w	800208c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f62:	4b81      	ldr	r3, [pc, #516]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d10f      	bne.n	8001f8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f6e:	2300      	movs	r3, #0
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	4b7d      	ldr	r3, [pc, #500]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f76:	4a7c      	ldr	r2, [pc, #496]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7e:	4b7a      	ldr	r3, [pc, #488]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	60bb      	str	r3, [r7, #8]
 8001f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f8e:	4b77      	ldr	r3, [pc, #476]	@ (800216c <HAL_RCC_OscConfig+0x474>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d118      	bne.n	8001fcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9a:	4b74      	ldr	r3, [pc, #464]	@ (800216c <HAL_RCC_OscConfig+0x474>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a73      	ldr	r2, [pc, #460]	@ (800216c <HAL_RCC_OscConfig+0x474>)
 8001fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fa6:	f7fe ff67 	bl	8000e78 <HAL_GetTick>
 8001faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fac:	e008      	b.n	8001fc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fae:	f7fe ff63 	bl	8000e78 <HAL_GetTick>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e10c      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc0:	4b6a      	ldr	r3, [pc, #424]	@ (800216c <HAL_RCC_OscConfig+0x474>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d0f0      	beq.n	8001fae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d106      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x2ea>
 8001fd4:	4b64      	ldr	r3, [pc, #400]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd8:	4a63      	ldr	r2, [pc, #396]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001fe0:	e01c      	b.n	800201c <HAL_RCC_OscConfig+0x324>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b05      	cmp	r3, #5
 8001fe8:	d10c      	bne.n	8002004 <HAL_RCC_OscConfig+0x30c>
 8001fea:	4b5f      	ldr	r3, [pc, #380]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001fec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fee:	4a5e      	ldr	r2, [pc, #376]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ff6:	4b5c      	ldr	r3, [pc, #368]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ffa:	4a5b      	ldr	r2, [pc, #364]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6713      	str	r3, [r2, #112]	@ 0x70
 8002002:	e00b      	b.n	800201c <HAL_RCC_OscConfig+0x324>
 8002004:	4b58      	ldr	r3, [pc, #352]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002008:	4a57      	ldr	r2, [pc, #348]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002010:	4b55      	ldr	r3, [pc, #340]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002014:	4a54      	ldr	r2, [pc, #336]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002016:	f023 0304 	bic.w	r3, r3, #4
 800201a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d015      	beq.n	8002050 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002024:	f7fe ff28 	bl	8000e78 <HAL_GetTick>
 8002028:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202a:	e00a      	b.n	8002042 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202c:	f7fe ff24 	bl	8000e78 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	f241 3288 	movw	r2, #5000	@ 0x1388
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e0cb      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002042:	4b49      	ldr	r3, [pc, #292]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002044:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0ee      	beq.n	800202c <HAL_RCC_OscConfig+0x334>
 800204e:	e014      	b.n	800207a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe ff12 	bl	8000e78 <HAL_GetTick>
 8002054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002056:	e00a      	b.n	800206e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7fe ff0e 	bl	8000e78 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e0b5      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206e:	4b3e      	ldr	r3, [pc, #248]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1ee      	bne.n	8002058 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800207a:	7dfb      	ldrb	r3, [r7, #23]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d105      	bne.n	800208c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002080:	4b39      	ldr	r3, [pc, #228]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	4a38      	ldr	r2, [pc, #224]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002086:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800208a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	2b00      	cmp	r3, #0
 8002092:	f000 80a1 	beq.w	80021d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002096:	4b34      	ldr	r3, [pc, #208]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 030c 	and.w	r3, r3, #12
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d05c      	beq.n	800215c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d141      	bne.n	800212e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020aa:	4b31      	ldr	r3, [pc, #196]	@ (8002170 <HAL_RCC_OscConfig+0x478>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b0:	f7fe fee2 	bl	8000e78 <HAL_GetTick>
 80020b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b6:	e008      	b.n	80020ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b8:	f7fe fede 	bl	8000e78 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e087      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ca:	4b27      	ldr	r3, [pc, #156]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f0      	bne.n	80020b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	69da      	ldr	r2, [r3, #28]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	019b      	lsls	r3, r3, #6
 80020e6:	431a      	orrs	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ec:	085b      	lsrs	r3, r3, #1
 80020ee:	3b01      	subs	r3, #1
 80020f0:	041b      	lsls	r3, r3, #16
 80020f2:	431a      	orrs	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020f8:	061b      	lsls	r3, r3, #24
 80020fa:	491b      	ldr	r1, [pc, #108]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	4b1b      	ldr	r3, [pc, #108]	@ (8002170 <HAL_RCC_OscConfig+0x478>)
 8002102:	2201      	movs	r2, #1
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7fe feb7 	bl	8000e78 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210e:	f7fe feb3 	bl	8000e78 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e05c      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002120:	4b11      	ldr	r3, [pc, #68]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d0f0      	beq.n	800210e <HAL_RCC_OscConfig+0x416>
 800212c:	e054      	b.n	80021d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212e:	4b10      	ldr	r3, [pc, #64]	@ (8002170 <HAL_RCC_OscConfig+0x478>)
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002134:	f7fe fea0 	bl	8000e78 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213c:	f7fe fe9c 	bl	8000e78 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e045      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800214e:	4b06      	ldr	r3, [pc, #24]	@ (8002168 <HAL_RCC_OscConfig+0x470>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f0      	bne.n	800213c <HAL_RCC_OscConfig+0x444>
 800215a:	e03d      	b.n	80021d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d107      	bne.n	8002174 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e038      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
 8002168:	40023800 	.word	0x40023800
 800216c:	40007000 	.word	0x40007000
 8002170:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002174:	4b1b      	ldr	r3, [pc, #108]	@ (80021e4 <HAL_RCC_OscConfig+0x4ec>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d028      	beq.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800218c:	429a      	cmp	r2, r3
 800218e:	d121      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	429a      	cmp	r2, r3
 800219c:	d11a      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80021a4:	4013      	ands	r3, r2
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80021aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d111      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	3b01      	subs	r3, #1
 80021be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d107      	bne.n	80021d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800

080021e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e0cc      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021fc:	4b68      	ldr	r3, [pc, #416]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 030f 	and.w	r3, r3, #15
 8002204:	683a      	ldr	r2, [r7, #0]
 8002206:	429a      	cmp	r2, r3
 8002208:	d90c      	bls.n	8002224 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220a:	4b65      	ldr	r3, [pc, #404]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002212:	4b63      	ldr	r3, [pc, #396]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 030f 	and.w	r3, r3, #15
 800221a:	683a      	ldr	r2, [r7, #0]
 800221c:	429a      	cmp	r2, r3
 800221e:	d001      	beq.n	8002224 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e0b8      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0302 	and.w	r3, r3, #2
 800222c:	2b00      	cmp	r3, #0
 800222e:	d020      	beq.n	8002272 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d005      	beq.n	8002248 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800223c:	4b59      	ldr	r3, [pc, #356]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	4a58      	ldr	r2, [pc, #352]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002246:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0308 	and.w	r3, r3, #8
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002254:	4b53      	ldr	r3, [pc, #332]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a52      	ldr	r2, [pc, #328]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800225e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002260:	4b50      	ldr	r3, [pc, #320]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	494d      	ldr	r1, [pc, #308]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	4313      	orrs	r3, r2
 8002270:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	2b00      	cmp	r3, #0
 800227c:	d044      	beq.n	8002308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002286:	4b47      	ldr	r3, [pc, #284]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d119      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e07f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d003      	beq.n	80022a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022a6:	4b3f      	ldr	r3, [pc, #252]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d109      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e06f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022b6:	4b3b      	ldr	r3, [pc, #236]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e067      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022c6:	4b37      	ldr	r3, [pc, #220]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f023 0203 	bic.w	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4934      	ldr	r1, [pc, #208]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022d8:	f7fe fdce 	bl	8000e78 <HAL_GetTick>
 80022dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022de:	e00a      	b.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e0:	f7fe fdca 	bl	8000e78 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e04f      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	4b2b      	ldr	r3, [pc, #172]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 020c 	and.w	r2, r3, #12
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	429a      	cmp	r2, r3
 8002306:	d1eb      	bne.n	80022e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002308:	4b25      	ldr	r3, [pc, #148]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 030f 	and.w	r3, r3, #15
 8002310:	683a      	ldr	r2, [r7, #0]
 8002312:	429a      	cmp	r2, r3
 8002314:	d20c      	bcs.n	8002330 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002316:	4b22      	ldr	r3, [pc, #136]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b20      	ldr	r3, [pc, #128]	@ (80023a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 030f 	and.w	r3, r3, #15
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e032      	b.n	8002396 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800233c:	4b19      	ldr	r3, [pc, #100]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	4916      	ldr	r1, [pc, #88]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d009      	beq.n	800236e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235a:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	490e      	ldr	r1, [pc, #56]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800236e:	f000 f821 	bl	80023b4 <HAL_RCC_GetSysClockFreq>
 8002372:	4602      	mov	r2, r0
 8002374:	4b0b      	ldr	r3, [pc, #44]	@ (80023a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	091b      	lsrs	r3, r3, #4
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	490a      	ldr	r1, [pc, #40]	@ (80023a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	5ccb      	ldrb	r3, [r1, r3]
 8002382:	fa22 f303 	lsr.w	r3, r2, r3
 8002386:	4a09      	ldr	r2, [pc, #36]	@ (80023ac <HAL_RCC_ClockConfig+0x1c4>)
 8002388:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800238a:	4b09      	ldr	r3, [pc, #36]	@ (80023b0 <HAL_RCC_ClockConfig+0x1c8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe fd2e 	bl	8000df0 <HAL_InitTick>

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3710      	adds	r7, #16
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40023c00 	.word	0x40023c00
 80023a4:	40023800 	.word	0x40023800
 80023a8:	08005214 	.word	0x08005214
 80023ac:	20000000 	.word	0x20000000
 80023b0:	20000004 	.word	0x20000004

080023b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023b8:	b094      	sub	sp, #80	@ 0x50
 80023ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023bc:	2300      	movs	r3, #0
 80023be:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80023c8:	2300      	movs	r3, #0
 80023ca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023cc:	4b79      	ldr	r3, [pc, #484]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f003 030c 	and.w	r3, r3, #12
 80023d4:	2b08      	cmp	r3, #8
 80023d6:	d00d      	beq.n	80023f4 <HAL_RCC_GetSysClockFreq+0x40>
 80023d8:	2b08      	cmp	r3, #8
 80023da:	f200 80e1 	bhi.w	80025a0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d002      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x34>
 80023e2:	2b04      	cmp	r3, #4
 80023e4:	d003      	beq.n	80023ee <HAL_RCC_GetSysClockFreq+0x3a>
 80023e6:	e0db      	b.n	80025a0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023e8:	4b73      	ldr	r3, [pc, #460]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80023ea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023ec:	e0db      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023ee:	4b73      	ldr	r3, [pc, #460]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x208>)
 80023f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80023f2:	e0d8      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f4:	4b6f      	ldr	r3, [pc, #444]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023fc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023fe:	4b6d      	ldr	r3, [pc, #436]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d063      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240a:	4b6a      	ldr	r3, [pc, #424]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	099b      	lsrs	r3, r3, #6
 8002410:	2200      	movs	r2, #0
 8002412:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002414:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800241c:	633b      	str	r3, [r7, #48]	@ 0x30
 800241e:	2300      	movs	r3, #0
 8002420:	637b      	str	r3, [r7, #52]	@ 0x34
 8002422:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002426:	4622      	mov	r2, r4
 8002428:	462b      	mov	r3, r5
 800242a:	f04f 0000 	mov.w	r0, #0
 800242e:	f04f 0100 	mov.w	r1, #0
 8002432:	0159      	lsls	r1, r3, #5
 8002434:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002438:	0150      	lsls	r0, r2, #5
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4621      	mov	r1, r4
 8002440:	1a51      	subs	r1, r2, r1
 8002442:	6139      	str	r1, [r7, #16]
 8002444:	4629      	mov	r1, r5
 8002446:	eb63 0301 	sbc.w	r3, r3, r1
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	f04f 0200 	mov.w	r2, #0
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002458:	4659      	mov	r1, fp
 800245a:	018b      	lsls	r3, r1, #6
 800245c:	4651      	mov	r1, sl
 800245e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002462:	4651      	mov	r1, sl
 8002464:	018a      	lsls	r2, r1, #6
 8002466:	4651      	mov	r1, sl
 8002468:	ebb2 0801 	subs.w	r8, r2, r1
 800246c:	4659      	mov	r1, fp
 800246e:	eb63 0901 	sbc.w	r9, r3, r1
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800247e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002482:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002486:	4690      	mov	r8, r2
 8002488:	4699      	mov	r9, r3
 800248a:	4623      	mov	r3, r4
 800248c:	eb18 0303 	adds.w	r3, r8, r3
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	462b      	mov	r3, r5
 8002494:	eb49 0303 	adc.w	r3, r9, r3
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024a6:	4629      	mov	r1, r5
 80024a8:	024b      	lsls	r3, r1, #9
 80024aa:	4621      	mov	r1, r4
 80024ac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024b0:	4621      	mov	r1, r4
 80024b2:	024a      	lsls	r2, r1, #9
 80024b4:	4610      	mov	r0, r2
 80024b6:	4619      	mov	r1, r3
 80024b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80024ba:	2200      	movs	r2, #0
 80024bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024c0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024c4:	f7fd feec 	bl	80002a0 <__aeabi_uldivmod>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4613      	mov	r3, r2
 80024ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024d0:	e058      	b.n	8002584 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d2:	4b38      	ldr	r3, [pc, #224]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	099b      	lsrs	r3, r3, #6
 80024d8:	2200      	movs	r2, #0
 80024da:	4618      	mov	r0, r3
 80024dc:	4611      	mov	r1, r2
 80024de:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	2300      	movs	r3, #0
 80024e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80024e8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024ec:	4642      	mov	r2, r8
 80024ee:	464b      	mov	r3, r9
 80024f0:	f04f 0000 	mov.w	r0, #0
 80024f4:	f04f 0100 	mov.w	r1, #0
 80024f8:	0159      	lsls	r1, r3, #5
 80024fa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024fe:	0150      	lsls	r0, r2, #5
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4641      	mov	r1, r8
 8002506:	ebb2 0a01 	subs.w	sl, r2, r1
 800250a:	4649      	mov	r1, r9
 800250c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	f04f 0300 	mov.w	r3, #0
 8002518:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800251c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002520:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002524:	ebb2 040a 	subs.w	r4, r2, sl
 8002528:	eb63 050b 	sbc.w	r5, r3, fp
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	f04f 0300 	mov.w	r3, #0
 8002534:	00eb      	lsls	r3, r5, #3
 8002536:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800253a:	00e2      	lsls	r2, r4, #3
 800253c:	4614      	mov	r4, r2
 800253e:	461d      	mov	r5, r3
 8002540:	4643      	mov	r3, r8
 8002542:	18e3      	adds	r3, r4, r3
 8002544:	603b      	str	r3, [r7, #0]
 8002546:	464b      	mov	r3, r9
 8002548:	eb45 0303 	adc.w	r3, r5, r3
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	e9d7 4500 	ldrd	r4, r5, [r7]
 800255a:	4629      	mov	r1, r5
 800255c:	028b      	lsls	r3, r1, #10
 800255e:	4621      	mov	r1, r4
 8002560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002564:	4621      	mov	r1, r4
 8002566:	028a      	lsls	r2, r1, #10
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800256e:	2200      	movs	r2, #0
 8002570:	61bb      	str	r3, [r7, #24]
 8002572:	61fa      	str	r2, [r7, #28]
 8002574:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002578:	f7fd fe92 	bl	80002a0 <__aeabi_uldivmod>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4613      	mov	r3, r2
 8002582:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002584:	4b0b      	ldr	r3, [pc, #44]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	0c1b      	lsrs	r3, r3, #16
 800258a:	f003 0303 	and.w	r3, r3, #3
 800258e:	3301      	adds	r3, #1
 8002590:	005b      	lsls	r3, r3, #1
 8002592:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002594:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002596:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800259e:	e002      	b.n	80025a6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a0:	4b05      	ldr	r3, [pc, #20]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x204>)
 80025a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80025a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3750      	adds	r7, #80	@ 0x50
 80025ac:	46bd      	mov	sp, r7
 80025ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b2:	bf00      	nop
 80025b4:	40023800 	.word	0x40023800
 80025b8:	00f42400 	.word	0x00f42400
 80025bc:	007a1200 	.word	0x007a1200

080025c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c4:	4b03      	ldr	r3, [pc, #12]	@ (80025d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000000 	.word	0x20000000

080025d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025dc:	f7ff fff0 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b05      	ldr	r3, [pc, #20]	@ (80025f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	0a9b      	lsrs	r3, r3, #10
 80025e8:	f003 0307 	and.w	r3, r3, #7
 80025ec:	4903      	ldr	r1, [pc, #12]	@ (80025fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ee:	5ccb      	ldrb	r3, [r1, r3]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	40023800 	.word	0x40023800
 80025fc:	08005224 	.word	0x08005224

08002600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002604:	f7ff ffdc 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 8002608:	4602      	mov	r2, r0
 800260a:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	0b5b      	lsrs	r3, r3, #13
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	4903      	ldr	r1, [pc, #12]	@ (8002624 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002616:	5ccb      	ldrb	r3, [r1, r3]
 8002618:	fa22 f303 	lsr.w	r3, r2, r3
}
 800261c:	4618      	mov	r0, r3
 800261e:	bd80      	pop	{r7, pc}
 8002620:	40023800 	.word	0x40023800
 8002624:	08005224 	.word	0x08005224

08002628 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e042      	b.n	80026c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002640:	b2db      	uxtb	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	d106      	bne.n	8002654 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7fe fa66 	bl	8000b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2224      	movs	r2, #36	@ 0x24
 8002658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800266a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 f82b 	bl	80026c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002680:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002690:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68da      	ldr	r2, [r3, #12]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2220      	movs	r2, #32
 80026b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026be:	2300      	movs	r3, #0
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026cc:	b0c0      	sub	sp, #256	@ 0x100
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80026e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e4:	68d9      	ldr	r1, [r3, #12]
 80026e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	ea40 0301 	orr.w	r3, r0, r1
 80026f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	431a      	orrs	r2, r3
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	431a      	orrs	r2, r3
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800270c:	69db      	ldr	r3, [r3, #28]
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002720:	f021 010c 	bic.w	r1, r1, #12
 8002724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800272e:	430b      	orrs	r3, r1
 8002730:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800273e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002742:	6999      	ldr	r1, [r3, #24]
 8002744:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	ea40 0301 	orr.w	r3, r0, r1
 800274e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4b8f      	ldr	r3, [pc, #572]	@ (8002994 <UART_SetConfig+0x2cc>)
 8002758:	429a      	cmp	r2, r3
 800275a:	d005      	beq.n	8002768 <UART_SetConfig+0xa0>
 800275c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b8d      	ldr	r3, [pc, #564]	@ (8002998 <UART_SetConfig+0x2d0>)
 8002764:	429a      	cmp	r2, r3
 8002766:	d104      	bne.n	8002772 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002768:	f7ff ff4a 	bl	8002600 <HAL_RCC_GetPCLK2Freq>
 800276c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002770:	e003      	b.n	800277a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002772:	f7ff ff31 	bl	80025d8 <HAL_RCC_GetPCLK1Freq>
 8002776:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800277a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002784:	f040 810c 	bne.w	80029a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800278c:	2200      	movs	r2, #0
 800278e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002792:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002796:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800279a:	4622      	mov	r2, r4
 800279c:	462b      	mov	r3, r5
 800279e:	1891      	adds	r1, r2, r2
 80027a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80027a2:	415b      	adcs	r3, r3
 80027a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80027a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80027aa:	4621      	mov	r1, r4
 80027ac:	eb12 0801 	adds.w	r8, r2, r1
 80027b0:	4629      	mov	r1, r5
 80027b2:	eb43 0901 	adc.w	r9, r3, r1
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027ca:	4690      	mov	r8, r2
 80027cc:	4699      	mov	r9, r3
 80027ce:	4623      	mov	r3, r4
 80027d0:	eb18 0303 	adds.w	r3, r8, r3
 80027d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80027d8:	462b      	mov	r3, r5
 80027da:	eb49 0303 	adc.w	r3, r9, r3
 80027de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80027e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80027ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027f6:	460b      	mov	r3, r1
 80027f8:	18db      	adds	r3, r3, r3
 80027fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80027fc:	4613      	mov	r3, r2
 80027fe:	eb42 0303 	adc.w	r3, r2, r3
 8002802:	657b      	str	r3, [r7, #84]	@ 0x54
 8002804:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002808:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800280c:	f7fd fd48 	bl	80002a0 <__aeabi_uldivmod>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	4b61      	ldr	r3, [pc, #388]	@ (800299c <UART_SetConfig+0x2d4>)
 8002816:	fba3 2302 	umull	r2, r3, r3, r2
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	011c      	lsls	r4, r3, #4
 800281e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002822:	2200      	movs	r2, #0
 8002824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002828:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800282c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002830:	4642      	mov	r2, r8
 8002832:	464b      	mov	r3, r9
 8002834:	1891      	adds	r1, r2, r2
 8002836:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002838:	415b      	adcs	r3, r3
 800283a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800283c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002840:	4641      	mov	r1, r8
 8002842:	eb12 0a01 	adds.w	sl, r2, r1
 8002846:	4649      	mov	r1, r9
 8002848:	eb43 0b01 	adc.w	fp, r3, r1
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002858:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800285c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002860:	4692      	mov	sl, r2
 8002862:	469b      	mov	fp, r3
 8002864:	4643      	mov	r3, r8
 8002866:	eb1a 0303 	adds.w	r3, sl, r3
 800286a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800286e:	464b      	mov	r3, r9
 8002870:	eb4b 0303 	adc.w	r3, fp, r3
 8002874:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002884:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002888:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800288c:	460b      	mov	r3, r1
 800288e:	18db      	adds	r3, r3, r3
 8002890:	643b      	str	r3, [r7, #64]	@ 0x40
 8002892:	4613      	mov	r3, r2
 8002894:	eb42 0303 	adc.w	r3, r2, r3
 8002898:	647b      	str	r3, [r7, #68]	@ 0x44
 800289a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800289e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80028a2:	f7fd fcfd 	bl	80002a0 <__aeabi_uldivmod>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4611      	mov	r1, r2
 80028ac:	4b3b      	ldr	r3, [pc, #236]	@ (800299c <UART_SetConfig+0x2d4>)
 80028ae:	fba3 2301 	umull	r2, r3, r3, r1
 80028b2:	095b      	lsrs	r3, r3, #5
 80028b4:	2264      	movs	r2, #100	@ 0x64
 80028b6:	fb02 f303 	mul.w	r3, r2, r3
 80028ba:	1acb      	subs	r3, r1, r3
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80028c2:	4b36      	ldr	r3, [pc, #216]	@ (800299c <UART_SetConfig+0x2d4>)
 80028c4:	fba3 2302 	umull	r2, r3, r3, r2
 80028c8:	095b      	lsrs	r3, r3, #5
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80028d0:	441c      	add	r4, r3
 80028d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028d6:	2200      	movs	r2, #0
 80028d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80028e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80028e4:	4642      	mov	r2, r8
 80028e6:	464b      	mov	r3, r9
 80028e8:	1891      	adds	r1, r2, r2
 80028ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80028ec:	415b      	adcs	r3, r3
 80028ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028f4:	4641      	mov	r1, r8
 80028f6:	1851      	adds	r1, r2, r1
 80028f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80028fa:	4649      	mov	r1, r9
 80028fc:	414b      	adcs	r3, r1
 80028fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8002900:	f04f 0200 	mov.w	r2, #0
 8002904:	f04f 0300 	mov.w	r3, #0
 8002908:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800290c:	4659      	mov	r1, fp
 800290e:	00cb      	lsls	r3, r1, #3
 8002910:	4651      	mov	r1, sl
 8002912:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002916:	4651      	mov	r1, sl
 8002918:	00ca      	lsls	r2, r1, #3
 800291a:	4610      	mov	r0, r2
 800291c:	4619      	mov	r1, r3
 800291e:	4603      	mov	r3, r0
 8002920:	4642      	mov	r2, r8
 8002922:	189b      	adds	r3, r3, r2
 8002924:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002928:	464b      	mov	r3, r9
 800292a:	460a      	mov	r2, r1
 800292c:	eb42 0303 	adc.w	r3, r2, r3
 8002930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002940:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002944:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002948:	460b      	mov	r3, r1
 800294a:	18db      	adds	r3, r3, r3
 800294c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800294e:	4613      	mov	r3, r2
 8002950:	eb42 0303 	adc.w	r3, r2, r3
 8002954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800295a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800295e:	f7fd fc9f 	bl	80002a0 <__aeabi_uldivmod>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	4b0d      	ldr	r3, [pc, #52]	@ (800299c <UART_SetConfig+0x2d4>)
 8002968:	fba3 1302 	umull	r1, r3, r3, r2
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	2164      	movs	r1, #100	@ 0x64
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	3332      	adds	r3, #50	@ 0x32
 800297a:	4a08      	ldr	r2, [pc, #32]	@ (800299c <UART_SetConfig+0x2d4>)
 800297c:	fba2 2303 	umull	r2, r3, r2, r3
 8002980:	095b      	lsrs	r3, r3, #5
 8002982:	f003 0207 	and.w	r2, r3, #7
 8002986:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4422      	add	r2, r4
 800298e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002990:	e106      	b.n	8002ba0 <UART_SetConfig+0x4d8>
 8002992:	bf00      	nop
 8002994:	40011000 	.word	0x40011000
 8002998:	40011400 	.word	0x40011400
 800299c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80029aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80029ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80029b2:	4642      	mov	r2, r8
 80029b4:	464b      	mov	r3, r9
 80029b6:	1891      	adds	r1, r2, r2
 80029b8:	6239      	str	r1, [r7, #32]
 80029ba:	415b      	adcs	r3, r3
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80029be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80029c2:	4641      	mov	r1, r8
 80029c4:	1854      	adds	r4, r2, r1
 80029c6:	4649      	mov	r1, r9
 80029c8:	eb43 0501 	adc.w	r5, r3, r1
 80029cc:	f04f 0200 	mov.w	r2, #0
 80029d0:	f04f 0300 	mov.w	r3, #0
 80029d4:	00eb      	lsls	r3, r5, #3
 80029d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029da:	00e2      	lsls	r2, r4, #3
 80029dc:	4614      	mov	r4, r2
 80029de:	461d      	mov	r5, r3
 80029e0:	4643      	mov	r3, r8
 80029e2:	18e3      	adds	r3, r4, r3
 80029e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80029e8:	464b      	mov	r3, r9
 80029ea:	eb45 0303 	adc.w	r3, r5, r3
 80029ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f04f 0300 	mov.w	r3, #0
 8002a0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a0e:	4629      	mov	r1, r5
 8002a10:	008b      	lsls	r3, r1, #2
 8002a12:	4621      	mov	r1, r4
 8002a14:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a18:	4621      	mov	r1, r4
 8002a1a:	008a      	lsls	r2, r1, #2
 8002a1c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a20:	f7fd fc3e 	bl	80002a0 <__aeabi_uldivmod>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4b60      	ldr	r3, [pc, #384]	@ (8002bac <UART_SetConfig+0x4e4>)
 8002a2a:	fba3 2302 	umull	r2, r3, r3, r2
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	011c      	lsls	r4, r3, #4
 8002a32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a36:	2200      	movs	r2, #0
 8002a38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002a3c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002a40:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002a44:	4642      	mov	r2, r8
 8002a46:	464b      	mov	r3, r9
 8002a48:	1891      	adds	r1, r2, r2
 8002a4a:	61b9      	str	r1, [r7, #24]
 8002a4c:	415b      	adcs	r3, r3
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a54:	4641      	mov	r1, r8
 8002a56:	1851      	adds	r1, r2, r1
 8002a58:	6139      	str	r1, [r7, #16]
 8002a5a:	4649      	mov	r1, r9
 8002a5c:	414b      	adcs	r3, r1
 8002a5e:	617b      	str	r3, [r7, #20]
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a6c:	4659      	mov	r1, fp
 8002a6e:	00cb      	lsls	r3, r1, #3
 8002a70:	4651      	mov	r1, sl
 8002a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a76:	4651      	mov	r1, sl
 8002a78:	00ca      	lsls	r2, r1, #3
 8002a7a:	4610      	mov	r0, r2
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	4603      	mov	r3, r0
 8002a80:	4642      	mov	r2, r8
 8002a82:	189b      	adds	r3, r3, r2
 8002a84:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a88:	464b      	mov	r3, r9
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	eb42 0303 	adc.w	r3, r2, r3
 8002a90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002aac:	4649      	mov	r1, r9
 8002aae:	008b      	lsls	r3, r1, #2
 8002ab0:	4641      	mov	r1, r8
 8002ab2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ab6:	4641      	mov	r1, r8
 8002ab8:	008a      	lsls	r2, r1, #2
 8002aba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002abe:	f7fd fbef 	bl	80002a0 <__aeabi_uldivmod>
 8002ac2:	4602      	mov	r2, r0
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4b38      	ldr	r3, [pc, #224]	@ (8002bac <UART_SetConfig+0x4e4>)
 8002aca:	fba3 2301 	umull	r2, r3, r3, r1
 8002ace:	095b      	lsrs	r3, r3, #5
 8002ad0:	2264      	movs	r2, #100	@ 0x64
 8002ad2:	fb02 f303 	mul.w	r3, r2, r3
 8002ad6:	1acb      	subs	r3, r1, r3
 8002ad8:	011b      	lsls	r3, r3, #4
 8002ada:	3332      	adds	r3, #50	@ 0x32
 8002adc:	4a33      	ldr	r2, [pc, #204]	@ (8002bac <UART_SetConfig+0x4e4>)
 8002ade:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae2:	095b      	lsrs	r3, r3, #5
 8002ae4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ae8:	441c      	add	r4, r3
 8002aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002aee:	2200      	movs	r2, #0
 8002af0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002af2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002af4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002af8:	4642      	mov	r2, r8
 8002afa:	464b      	mov	r3, r9
 8002afc:	1891      	adds	r1, r2, r2
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	415b      	adcs	r3, r3
 8002b02:	60fb      	str	r3, [r7, #12]
 8002b04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b08:	4641      	mov	r1, r8
 8002b0a:	1851      	adds	r1, r2, r1
 8002b0c:	6039      	str	r1, [r7, #0]
 8002b0e:	4649      	mov	r1, r9
 8002b10:	414b      	adcs	r3, r1
 8002b12:	607b      	str	r3, [r7, #4]
 8002b14:	f04f 0200 	mov.w	r2, #0
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002b20:	4659      	mov	r1, fp
 8002b22:	00cb      	lsls	r3, r1, #3
 8002b24:	4651      	mov	r1, sl
 8002b26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b2a:	4651      	mov	r1, sl
 8002b2c:	00ca      	lsls	r2, r1, #3
 8002b2e:	4610      	mov	r0, r2
 8002b30:	4619      	mov	r1, r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	4642      	mov	r2, r8
 8002b36:	189b      	adds	r3, r3, r2
 8002b38:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002b3a:	464b      	mov	r3, r9
 8002b3c:	460a      	mov	r2, r1
 8002b3e:	eb42 0303 	adc.w	r3, r2, r3
 8002b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b4e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b5c:	4649      	mov	r1, r9
 8002b5e:	008b      	lsls	r3, r1, #2
 8002b60:	4641      	mov	r1, r8
 8002b62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b66:	4641      	mov	r1, r8
 8002b68:	008a      	lsls	r2, r1, #2
 8002b6a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b6e:	f7fd fb97 	bl	80002a0 <__aeabi_uldivmod>
 8002b72:	4602      	mov	r2, r0
 8002b74:	460b      	mov	r3, r1
 8002b76:	4b0d      	ldr	r3, [pc, #52]	@ (8002bac <UART_SetConfig+0x4e4>)
 8002b78:	fba3 1302 	umull	r1, r3, r3, r2
 8002b7c:	095b      	lsrs	r3, r3, #5
 8002b7e:	2164      	movs	r1, #100	@ 0x64
 8002b80:	fb01 f303 	mul.w	r3, r1, r3
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	011b      	lsls	r3, r3, #4
 8002b88:	3332      	adds	r3, #50	@ 0x32
 8002b8a:	4a08      	ldr	r2, [pc, #32]	@ (8002bac <UART_SetConfig+0x4e4>)
 8002b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b90:	095b      	lsrs	r3, r3, #5
 8002b92:	f003 020f 	and.w	r2, r3, #15
 8002b96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4422      	add	r2, r4
 8002b9e:	609a      	str	r2, [r3, #8]
}
 8002ba0:	bf00      	nop
 8002ba2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bac:	51eb851f 	.word	0x51eb851f

08002bb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bb0:	b084      	sub	sp, #16
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	f107 001c 	add.w	r0, r7, #28
 8002bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002bc2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d123      	bne.n	8002c12 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002bde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002bf2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d105      	bne.n	8002c06 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 faa0 	bl	800314c <USB_CoreReset>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	73fb      	strb	r3, [r7, #15]
 8002c10:	e01b      	b.n	8002c4a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fa94 	bl	800314c <USB_CoreReset>
 8002c24:	4603      	mov	r3, r0
 8002c26:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002c28:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d106      	bne.n	8002c3e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c34:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c3c:	e005      	b.n	8002c4a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c42:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002c4a:	7fbb      	ldrb	r3, [r7, #30]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d10b      	bne.n	8002c68 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f043 0206 	orr.w	r2, r3, #6
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f043 0220 	orr.w	r2, r3, #32
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c74:	b004      	add	sp, #16
 8002c76:	4770      	bx	lr

08002c78 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 0201 	bic.w	r2, r3, #1
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr

08002c9a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002cb6:	78fb      	ldrb	r3, [r7, #3]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d115      	bne.n	8002ce8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002cc8:	200a      	movs	r0, #10
 8002cca:	f7fe f8e1 	bl	8000e90 <HAL_Delay>
      ms += 10U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	330a      	adds	r3, #10
 8002cd2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fa2b 	bl	8003130 <USB_GetMode>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d01e      	beq.n	8002d1e <USB_SetCurrentMode+0x84>
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2bc7      	cmp	r3, #199	@ 0xc7
 8002ce4:	d9f0      	bls.n	8002cc8 <USB_SetCurrentMode+0x2e>
 8002ce6:	e01a      	b.n	8002d1e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d115      	bne.n	8002d1a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002cfa:	200a      	movs	r0, #10
 8002cfc:	f7fe f8c8 	bl	8000e90 <HAL_Delay>
      ms += 10U;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	330a      	adds	r3, #10
 8002d04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 fa12 	bl	8003130 <USB_GetMode>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d005      	beq.n	8002d1e <USB_SetCurrentMode+0x84>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2bc7      	cmp	r3, #199	@ 0xc7
 8002d16:	d9f0      	bls.n	8002cfa <USB_SetCurrentMode+0x60>
 8002d18:	e001      	b.n	8002d1e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e005      	b.n	8002d2a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2bc8      	cmp	r3, #200	@ 0xc8
 8002d22:	d101      	bne.n	8002d28 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002d34:	b084      	sub	sp, #16
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b086      	sub	sp, #24
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	6078      	str	r0, [r7, #4]
 8002d3e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002d42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002d4e:	2300      	movs	r3, #0
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	e009      	b.n	8002d68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	3340      	adds	r3, #64	@ 0x40
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	2200      	movs	r2, #0
 8002d60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	3301      	adds	r3, #1
 8002d66:	613b      	str	r3, [r7, #16]
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	2b0e      	cmp	r3, #14
 8002d6c:	d9f2      	bls.n	8002d54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002d6e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d11c      	bne.n	8002db0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d84:	f043 0302 	orr.w	r3, r3, #2
 8002d88:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d9a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002da6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	639a      	str	r2, [r3, #56]	@ 0x38
 8002dae:	e00b      	b.n	8002dc8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002dce:	461a      	mov	r2, r3
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002dd4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d10d      	bne.n	8002df8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002ddc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d104      	bne.n	8002dee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002de4:	2100      	movs	r1, #0
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f968 	bl	80030bc <USB_SetDevSpeed>
 8002dec:	e008      	b.n	8002e00 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002dee:	2101      	movs	r1, #1
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 f963 	bl	80030bc <USB_SetDevSpeed>
 8002df6:	e003      	b.n	8002e00 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002df8:	2103      	movs	r1, #3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f95e 	bl	80030bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e00:	2110      	movs	r1, #16
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f8fa 	bl	8002ffc <USB_FlushTxFifo>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f924 	bl	8003060 <USB_FlushRxFifo>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e28:	461a      	mov	r2, r3
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e34:	461a      	mov	r2, r3
 8002e36:	2300      	movs	r3, #0
 8002e38:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e40:	461a      	mov	r2, r3
 8002e42:	2300      	movs	r3, #0
 8002e44:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]
 8002e4a:	e043      	b.n	8002ed4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	015a      	lsls	r2, r3, #5
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4413      	add	r3, r2
 8002e54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002e5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002e62:	d118      	bne.n	8002e96 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10a      	bne.n	8002e80 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e76:	461a      	mov	r2, r3
 8002e78:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e013      	b.n	8002ea8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	015a      	lsls	r2, r3, #5
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e008      	b.n	8002ea8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	015a      	lsls	r2, r3, #5
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	4413      	add	r3, r2
 8002e9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ec6:	461a      	mov	r2, r3
 8002ec8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ecc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002ed8:	461a      	mov	r2, r3
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d3b5      	bcc.n	8002e4c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	613b      	str	r3, [r7, #16]
 8002ee4:	e043      	b.n	8002f6e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002efc:	d118      	bne.n	8002f30 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d10a      	bne.n	8002f1a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f10:	461a      	mov	r2, r3
 8002f12:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e013      	b.n	8002f42 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f26:	461a      	mov	r2, r3
 8002f28:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e008      	b.n	8002f42 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002f30:	693b      	ldr	r3, [r7, #16]
 8002f32:	015a      	lsls	r2, r3, #5
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4413      	add	r3, r2
 8002f38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	2300      	movs	r3, #0
 8002f40:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f4e:	461a      	mov	r2, r3
 8002f50:	2300      	movs	r3, #0
 8002f52:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002f60:	461a      	mov	r2, r3
 8002f62:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002f66:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002f72:	461a      	mov	r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d3b5      	bcc.n	8002ee6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	68fa      	ldr	r2, [r7, #12]
 8002f84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f8c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002f9a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002f9c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d105      	bne.n	8002fb0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f043 0210 	orr.w	r2, r3, #16
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699a      	ldr	r2, [r3, #24]
 8002fb4:	4b10      	ldr	r3, [pc, #64]	@ (8002ff8 <USB_DevInit+0x2c4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002fbc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d005      	beq.n	8002fd0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f043 0208 	orr.w	r2, r3, #8
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002fd0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d107      	bne.n	8002fe8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002fe0:	f043 0304 	orr.w	r3, r3, #4
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002fe8:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3718      	adds	r7, #24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ff4:	b004      	add	sp, #16
 8002ff6:	4770      	bx	lr
 8002ff8:	803c3800 	.word	0x803c3800

08002ffc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3301      	adds	r3, #1
 800300e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003016:	d901      	bls.n	800301c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e01b      	b.n	8003054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691b      	ldr	r3, [r3, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	daf2      	bge.n	800300a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	019b      	lsls	r3, r3, #6
 800302c:	f043 0220 	orr.w	r2, r3, #32
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3301      	adds	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003040:	d901      	bls.n	8003046 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e006      	b.n	8003054 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b20      	cmp	r3, #32
 8003050:	d0f0      	beq.n	8003034 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003060:	b480      	push	{r7}
 8003062:	b085      	sub	sp, #20
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	3301      	adds	r3, #1
 8003070:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003078:	d901      	bls.n	800307e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e018      	b.n	80030b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	daf2      	bge.n	800306c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2210      	movs	r2, #16
 800308e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	3301      	adds	r3, #1
 8003094:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800309c:	d901      	bls.n	80030a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e006      	b.n	80030b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d0f0      	beq.n	8003090 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80030ae:	2300      	movs	r3, #0
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3714      	adds	r7, #20
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80030bc:	b480      	push	{r7}
 80030be:	b085      	sub	sp, #20
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	68f9      	ldr	r1, [r7, #12]
 80030d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80030dc:	4313      	orrs	r3, r2
 80030de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3714      	adds	r7, #20
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b085      	sub	sp, #20
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003108:	f023 0303 	bic.w	r3, r3, #3
 800310c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003122:	2300      	movs	r3, #0
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0301 	and.w	r3, r3, #1
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	3301      	adds	r3, #1
 800315c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003164:	d901      	bls.n	800316a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e01b      	b.n	80031a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b00      	cmp	r3, #0
 8003170:	daf2      	bge.n	8003158 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f043 0201 	orr.w	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	3301      	adds	r3, #1
 8003186:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800318e:	d901      	bls.n	8003194 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e006      	b.n	80031a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b01      	cmp	r3, #1
 800319e:	d0f0      	beq.n	8003182 <USB_CoreReset+0x36>

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 80031b0:	b590      	push	{r4, r7, lr}
 80031b2:	b085      	sub	sp, #20
 80031b4:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 80031b6:	b672      	cpsid	i
 80031b8:	4b4a      	ldr	r3, [pc, #296]	@ (80032e4 <app_init+0x134>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a4a      	ldr	r2, [pc, #296]	@ (80032e8 <app_init+0x138>)
 80031be:	213f      	movs	r1, #63	@ 0x3f
 80031c0:	4618      	mov	r0, r3
 80031c2:	f000 ff79 	bl	80040b8 <sniprintf>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4a48      	ldr	r2, [pc, #288]	@ (80032ec <app_init+0x13c>)
 80031ca:	6013      	str	r3, [r2, #0]
 80031cc:	4b45      	ldr	r3, [pc, #276]	@ (80032e4 <app_init+0x134>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f000 f953 	bl	800347c <logger_log_print_>
 80031d6:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %lu\r\n", GET_NAME(app_init), HAL_GetTick());
 80031d8:	b672      	cpsid	i
 80031da:	4b42      	ldr	r3, [pc, #264]	@ (80032e4 <app_init+0x134>)
 80031dc:	681c      	ldr	r4, [r3, #0]
 80031de:	f7fd fe4b 	bl	8000e78 <HAL_GetTick>
 80031e2:	4603      	mov	r3, r0
 80031e4:	9300      	str	r3, [sp, #0]
 80031e6:	4b42      	ldr	r3, [pc, #264]	@ (80032f0 <app_init+0x140>)
 80031e8:	4a42      	ldr	r2, [pc, #264]	@ (80032f4 <app_init+0x144>)
 80031ea:	213f      	movs	r1, #63	@ 0x3f
 80031ec:	4620      	mov	r0, r4
 80031ee:	f000 ff63 	bl	80040b8 <sniprintf>
 80031f2:	4603      	mov	r3, r0
 80031f4:	4a3d      	ldr	r2, [pc, #244]	@ (80032ec <app_init+0x13c>)
 80031f6:	6013      	str	r3, [r2, #0]
 80031f8:	4b3a      	ldr	r3, [pc, #232]	@ (80032e4 <app_init+0x134>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f93d 	bl	800347c <logger_log_print_>
 8003202:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8003204:	b672      	cpsid	i
 8003206:	4b37      	ldr	r3, [pc, #220]	@ (80032e4 <app_init+0x134>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a3b      	ldr	r2, [pc, #236]	@ (80032f8 <app_init+0x148>)
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	213f      	movs	r1, #63	@ 0x3f
 8003210:	4618      	mov	r0, r3
 8003212:	f000 ff51 	bl	80040b8 <sniprintf>
 8003216:	4603      	mov	r3, r0
 8003218:	4a34      	ldr	r2, [pc, #208]	@ (80032ec <app_init+0x13c>)
 800321a:	6013      	str	r3, [r2, #0]
 800321c:	4b31      	ldr	r3, [pc, #196]	@ (80032e4 <app_init+0x134>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f92b 	bl	800347c <logger_log_print_>
 8003226:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8003228:	b672      	cpsid	i
 800322a:	4b2e      	ldr	r3, [pc, #184]	@ (80032e4 <app_init+0x134>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a33      	ldr	r2, [pc, #204]	@ (80032fc <app_init+0x14c>)
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	213f      	movs	r1, #63	@ 0x3f
 8003234:	4618      	mov	r0, r3
 8003236:	f000 ff3f 	bl	80040b8 <sniprintf>
 800323a:	4603      	mov	r3, r0
 800323c:	4a2b      	ldr	r2, [pc, #172]	@ (80032ec <app_init+0x13c>)
 800323e:	6013      	str	r3, [r2, #0]
 8003240:	4b28      	ldr	r3, [pc, #160]	@ (80032e4 <app_init+0x134>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f000 f919 	bl	800347c <logger_log_print_>
 800324a:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 800324c:	4b2c      	ldr	r3, [pc, #176]	@ (8003300 <app_init+0x150>)
 800324e:	2200      	movs	r2, #0
 8003250:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 8003252:	b672      	cpsid	i
 8003254:	4b23      	ldr	r3, [pc, #140]	@ (80032e4 <app_init+0x134>)
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	4b29      	ldr	r3, [pc, #164]	@ (8003300 <app_init+0x150>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	4b29      	ldr	r3, [pc, #164]	@ (8003304 <app_init+0x154>)
 8003260:	4a29      	ldr	r2, [pc, #164]	@ (8003308 <app_init+0x158>)
 8003262:	213f      	movs	r1, #63	@ 0x3f
 8003264:	f000 ff28 	bl	80040b8 <sniprintf>
 8003268:	4603      	mov	r3, r0
 800326a:	4a20      	ldr	r2, [pc, #128]	@ (80032ec <app_init+0x13c>)
 800326c:	6013      	str	r3, [r2, #0]
 800326e:	4b1d      	ldr	r3, [pc, #116]	@ (80032e4 <app_init+0x134>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f000 f902 	bl	800347c <logger_log_print_>
 8003278:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 800327a:	2300      	movs	r3, #0
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	e01a      	b.n	80032b6 <app_init+0x106>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8003280:	4922      	ldr	r1, [pc, #136]	@ (800330c <app_init+0x15c>)
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	005b      	lsls	r3, r3, #1
 8003288:	4413      	add	r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	6819      	ldr	r1, [r3, #0]
 8003290:	481e      	ldr	r0, [pc, #120]	@ (800330c <app_init+0x15c>)
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4403      	add	r3, r0
 800329e:	3308      	adds	r3, #8
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 80032a6:	4a1a      	ldr	r2, [pc, #104]	@ (8003310 <app_init+0x160>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2100      	movs	r1, #0
 80032ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3301      	adds	r3, #1
 80032b4:	607b      	str	r3, [r7, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d9e1      	bls.n	8003280 <app_init+0xd0>
	}

	cycle_counter_init();
 80032bc:	4b15      	ldr	r3, [pc, #84]	@ (8003314 <app_init+0x164>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4a14      	ldr	r2, [pc, #80]	@ (8003314 <app_init+0x164>)
 80032c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032c6:	60d3      	str	r3, [r2, #12]
 80032c8:	4b13      	ldr	r3, [pc, #76]	@ (8003318 <app_init+0x168>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	605a      	str	r2, [r3, #4]
 80032ce:	4b12      	ldr	r3, [pc, #72]	@ (8003318 <app_init+0x168>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a11      	ldr	r2, [pc, #68]	@ (8003318 <app_init+0x168>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	6013      	str	r3, [r2, #0]
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd90      	pop	{r4, r7, pc}
 80032e2:	bf00      	nop
 80032e4:	08005250 	.word	0x08005250
 80032e8:	08005058 	.word	0x08005058
 80032ec:	2000085c 	.word	0x2000085c
 80032f0:	0800505c 	.word	0x0800505c
 80032f4:	08005068 	.word	0x08005068
 80032f8:	2000000c 	.word	0x2000000c
 80032fc:	20000010 	.word	0x20000010
 8003300:	20000804 	.word	0x20000804
 8003304:	0800508c 	.word	0x0800508c
 8003308:	08005098 	.word	0x08005098
 800330c:	0800522c 	.word	0x0800522c
 8003310:	20000810 	.word	0x20000810
 8003314:	e000edf0 	.word	0xe000edf0
 8003318:	e0001000 	.word	0xe0001000

0800331c <app_update>:

void app_update(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af02      	add	r7, sp, #8
	uint32_t index;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8003322:	4b3d      	ldr	r3, [pc, #244]	@ (8003418 <app_update+0xfc>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d071      	beq.n	800340e <app_update+0xf2>
    {
    	g_app_tick_cnt--;
 800332a:	4b3b      	ldr	r3, [pc, #236]	@ (8003418 <app_update+0xfc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	3b01      	subs	r3, #1
 8003330:	4a39      	ldr	r2, [pc, #228]	@ (8003418 <app_update+0xfc>)
 8003332:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8003334:	4b39      	ldr	r3, [pc, #228]	@ (800341c <app_update+0x100>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	4a38      	ldr	r2, [pc, #224]	@ (800341c <app_update+0x100>)
 800333c:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 800333e:	4b38      	ldr	r3, [pc, #224]	@ (8003420 <app_update+0x104>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

		/* Print out: Application execution counter */
		LOGGER_LOG(" %s = %lu\r\n", GET_NAME(g_app_cnt), g_app_cnt);
 8003344:	b672      	cpsid	i
 8003346:	4b37      	ldr	r3, [pc, #220]	@ (8003424 <app_update+0x108>)
 8003348:	6818      	ldr	r0, [r3, #0]
 800334a:	4b34      	ldr	r3, [pc, #208]	@ (800341c <app_update+0x100>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	4b35      	ldr	r3, [pc, #212]	@ (8003428 <app_update+0x10c>)
 8003352:	4a36      	ldr	r2, [pc, #216]	@ (800342c <app_update+0x110>)
 8003354:	213f      	movs	r1, #63	@ 0x3f
 8003356:	f000 feaf 	bl	80040b8 <sniprintf>
 800335a:	4603      	mov	r3, r0
 800335c:	4a34      	ldr	r2, [pc, #208]	@ (8003430 <app_update+0x114>)
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b30      	ldr	r3, [pc, #192]	@ (8003424 <app_update+0x108>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4618      	mov	r0, r3
 8003366:	f000 f889 	bl	800347c <logger_log_print_>
 800336a:	b662      	cpsie	i

		/* Go through the task arrays */
		for (index = 0; TASK_QTY > index; index++)
 800336c:	2300      	movs	r3, #0
 800336e:	607b      	str	r3, [r7, #4]
 8003370:	e04a      	b.n	8003408 <app_update+0xec>
		{
			cycle_counter_reset();
 8003372:	4b30      	ldr	r3, [pc, #192]	@ (8003434 <app_update+0x118>)
 8003374:	2200      	movs	r2, #0
 8003376:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8003378:	492f      	ldr	r1, [pc, #188]	@ (8003438 <app_update+0x11c>)
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	3304      	adds	r3, #4
 8003388:	6819      	ldr	r1, [r3, #0]
 800338a:	482b      	ldr	r0, [pc, #172]	@ (8003438 <app_update+0x11c>)
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	4413      	add	r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	4403      	add	r3, r0
 8003398:	3308      	adds	r3, #8
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	4788      	blx	r1

			cycle_counter_time_us = cycle_counter_time_us();
 80033a0:	4b24      	ldr	r3, [pc, #144]	@ (8003434 <app_update+0x118>)
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	4b25      	ldr	r3, [pc, #148]	@ (800343c <app_update+0x120>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4925      	ldr	r1, [pc, #148]	@ (8003440 <app_update+0x124>)
 80033aa:	fba1 1303 	umull	r1, r3, r1, r3
 80033ae:	0c9b      	lsrs	r3, r3, #18
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	603b      	str	r3, [r7, #0]

			/* Update variables */
			g_app_time_us += cycle_counter_time_us;
 80033b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003420 <app_update+0x104>)
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	4413      	add	r3, r2
 80033be:	4a18      	ldr	r2, [pc, #96]	@ (8003420 <app_update+0x104>)
 80033c0:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 80033c2:	4a20      	ldr	r2, [pc, #128]	@ (8003444 <app_update+0x128>)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d904      	bls.n	80033da <app_update+0xbe>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 80033d0:	491c      	ldr	r1, [pc, #112]	@ (8003444 <app_update+0x128>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	683a      	ldr	r2, [r7, #0]
 80033d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
				
			/* Print out: Cycle Counter */
			LOGGER_LOG(" %s: %lu uS\r\n", GET_NAME(g_app_time_us), g_app_time_us);
 80033da:	b672      	cpsid	i
 80033dc:	4b11      	ldr	r3, [pc, #68]	@ (8003424 <app_update+0x108>)
 80033de:	6818      	ldr	r0, [r3, #0]
 80033e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003420 <app_update+0x104>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	9300      	str	r3, [sp, #0]
 80033e6:	4b18      	ldr	r3, [pc, #96]	@ (8003448 <app_update+0x12c>)
 80033e8:	4a18      	ldr	r2, [pc, #96]	@ (800344c <app_update+0x130>)
 80033ea:	213f      	movs	r1, #63	@ 0x3f
 80033ec:	f000 fe64 	bl	80040b8 <sniprintf>
 80033f0:	4603      	mov	r3, r0
 80033f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003430 <app_update+0x114>)
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003424 <app_update+0x108>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 f83e 	bl	800347c <logger_log_print_>
 8003400:	b662      	cpsie	i
		for (index = 0; TASK_QTY > index; index++)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	3301      	adds	r3, #1
 8003406:	607b      	str	r3, [r7, #4]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d9b1      	bls.n	8003372 <app_update+0x56>
		}
    }
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	2000080c 	.word	0x2000080c
 800341c:	20000804 	.word	0x20000804
 8003420:	20000808 	.word	0x20000808
 8003424:	08005250 	.word	0x08005250
 8003428:	0800508c 	.word	0x0800508c
 800342c:	08005098 	.word	0x08005098
 8003430:	2000085c 	.word	0x2000085c
 8003434:	e0001000 	.word	0xe0001000
 8003438:	0800522c 	.word	0x0800522c
 800343c:	20000000 	.word	0x20000000
 8003440:	431bde83 	.word	0x431bde83
 8003444:	20000810 	.word	0x20000810
 8003448:	080050a4 	.word	0x080050a4
 800344c:	080050b4 	.word	0x080050b4

08003450 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8003454:	4b07      	ldr	r3, [pc, #28]	@ (8003474 <HAL_SYSTICK_Callback+0x24>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	4a06      	ldr	r2, [pc, #24]	@ (8003474 <HAL_SYSTICK_Callback+0x24>)
 800345c:	6013      	str	r3, [r2, #0]

	g_task_c_tick_cnt++;
 800345e:	4b06      	ldr	r3, [pc, #24]	@ (8003478 <HAL_SYSTICK_Callback+0x28>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3301      	adds	r3, #1
 8003464:	4a04      	ldr	r2, [pc, #16]	@ (8003478 <HAL_SYSTICK_Callback+0x28>)
 8003466:	6013      	str	r3, [r2, #0]
}
 8003468:	bf00      	nop
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	2000080c 	.word	0x2000080c
 8003478:	20000870 	.word	0x20000870

0800347c <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	printf(msg);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fe05 	bl	8004094 <iprintf>
	fflush(stdout);
 800348a:	4b05      	ldr	r3, [pc, #20]	@ (80034a0 <logger_log_print_+0x24>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fd29 	bl	8003ee8 <fflush>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	20000034 	.word	0x20000034

080034a4 <task_a_init>:
/********************** external data declaration *****************************/
uint32_t g_task_a_cnt;

/********************** external functions definition ************************/
void task_a_init(void *parameters)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af02      	add	r7, sp, #8
 80034aa:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_a_init), p_task_a);
 80034ac:	b672      	cpsid	i
 80034ae:	4b17      	ldr	r3, [pc, #92]	@ (800350c <task_a_init+0x68>)
 80034b0:	6818      	ldr	r0, [r3, #0]
 80034b2:	4b17      	ldr	r3, [pc, #92]	@ (8003510 <task_a_init+0x6c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	4b16      	ldr	r3, [pc, #88]	@ (8003514 <task_a_init+0x70>)
 80034ba:	4a17      	ldr	r2, [pc, #92]	@ (8003518 <task_a_init+0x74>)
 80034bc:	213f      	movs	r1, #63	@ 0x3f
 80034be:	f000 fdfb 	bl	80040b8 <sniprintf>
 80034c2:	4603      	mov	r3, r0
 80034c4:	4a15      	ldr	r2, [pc, #84]	@ (800351c <task_a_init+0x78>)
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b10      	ldr	r3, [pc, #64]	@ (800350c <task_a_init+0x68>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff ffd5 	bl	800347c <logger_log_print_>
 80034d2:	b662      	cpsie	i

	g_task_a_cnt = G_TASK_A_CNT_INI;
 80034d4:	4b12      	ldr	r3, [pc, #72]	@ (8003520 <task_a_init+0x7c>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_a_cnt), g_task_a_cnt);
 80034da:	b672      	cpsid	i
 80034dc:	4b0b      	ldr	r3, [pc, #44]	@ (800350c <task_a_init+0x68>)
 80034de:	6818      	ldr	r0, [r3, #0]
 80034e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003520 <task_a_init+0x7c>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003524 <task_a_init+0x80>)
 80034e8:	4a0f      	ldr	r2, [pc, #60]	@ (8003528 <task_a_init+0x84>)
 80034ea:	213f      	movs	r1, #63	@ 0x3f
 80034ec:	f000 fde4 	bl	80040b8 <sniprintf>
 80034f0:	4603      	mov	r3, r0
 80034f2:	4a0a      	ldr	r2, [pc, #40]	@ (800351c <task_a_init+0x78>)
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	4b05      	ldr	r3, [pc, #20]	@ (800350c <task_a_init+0x68>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4618      	mov	r0, r3
 80034fc:	f7ff ffbe 	bl	800347c <logger_log_print_>
 8003500:	b662      	cpsie	i
}
 8003502:	bf00      	nop
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	08005250 	.word	0x08005250
 8003510:	20000014 	.word	0x20000014
 8003514:	080050dc 	.word	0x080050dc
 8003518:	080050e8 	.word	0x080050e8
 800351c:	2000085c 	.word	0x2000085c
 8003520:	20000860 	.word	0x20000860
 8003524:	08005100 	.word	0x08005100
 8003528:	08005110 	.word	0x08005110

0800352c <task_a_update>:

void task_a_update(void *parameters)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af02      	add	r7, sp, #8
 8003532:	6078      	str	r0, [r7, #4]
	 * manipulated.
	 */
	uint32_t task_a_cnt;

	/* Update Task A Counter */
	g_task_a_cnt++;
 8003534:	4b1d      	ldr	r3, [pc, #116]	@ (80035ac <task_a_update+0x80>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	3301      	adds	r3, #1
 800353a:	4a1c      	ldr	r2, [pc, #112]	@ (80035ac <task_a_update+0x80>)
 800353c:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_a_update), p_task_a);
 800353e:	b672      	cpsid	i
 8003540:	4b1b      	ldr	r3, [pc, #108]	@ (80035b0 <task_a_update+0x84>)
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	4b1b      	ldr	r3, [pc, #108]	@ (80035b4 <task_a_update+0x88>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	9300      	str	r3, [sp, #0]
 800354a:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <task_a_update+0x8c>)
 800354c:	4a1b      	ldr	r2, [pc, #108]	@ (80035bc <task_a_update+0x90>)
 800354e:	213f      	movs	r1, #63	@ 0x3f
 8003550:	f000 fdb2 	bl	80040b8 <sniprintf>
 8003554:	4603      	mov	r3, r0
 8003556:	4a1a      	ldr	r2, [pc, #104]	@ (80035c0 <task_a_update+0x94>)
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b15      	ldr	r3, [pc, #84]	@ (80035b0 <task_a_update+0x84>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff ff8c 	bl	800347c <logger_log_print_>
 8003564:	b662      	cpsie	i

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_a_cnt), g_task_a_cnt);
 8003566:	b672      	cpsid	i
 8003568:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <task_a_update+0x84>)
 800356a:	6818      	ldr	r0, [r3, #0]
 800356c:	4b0f      	ldr	r3, [pc, #60]	@ (80035ac <task_a_update+0x80>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	4b14      	ldr	r3, [pc, #80]	@ (80035c4 <task_a_update+0x98>)
 8003574:	4a14      	ldr	r2, [pc, #80]	@ (80035c8 <task_a_update+0x9c>)
 8003576:	213f      	movs	r1, #63	@ 0x3f
 8003578:	f000 fd9e 	bl	80040b8 <sniprintf>
 800357c:	4603      	mov	r3, r0
 800357e:	4a10      	ldr	r2, [pc, #64]	@ (80035c0 <task_a_update+0x94>)
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <task_a_update+0x84>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4618      	mov	r0, r3
 8003588:	f7ff ff78 	bl	800347c <logger_log_print_>
 800358c:	b662      	cpsie	i
	 * Blocking methods are executed synchronously.
	 * Synchronously means that the program is executed line by line.
	 * The program waits until the called function or the operation
	 * returns.
	 * */
	for (task_a_cnt = TASK_A_CNT_INI; task_a_cnt < TASK_A_CNT_MAX; task_a_cnt++);
 800358e:	2300      	movs	r3, #0
 8003590:	60fb      	str	r3, [r7, #12]
 8003592:	e002      	b.n	800359a <task_a_update+0x6e>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	3301      	adds	r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80035a0:	d3f8      	bcc.n	8003594 <task_a_update+0x68>
	#if (TEST_X == TEST_2)

	/* Here Chatbot Artificial Intelligence generated code */

	#endif
}
 80035a2:	bf00      	nop
 80035a4:	bf00      	nop
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	20000860 	.word	0x20000860
 80035b0:	08005250 	.word	0x08005250
 80035b4:	20000014 	.word	0x20000014
 80035b8:	08005120 	.word	0x08005120
 80035bc:	080050e8 	.word	0x080050e8
 80035c0:	2000085c 	.word	0x2000085c
 80035c4:	08005100 	.word	0x08005100
 80035c8:	08005110 	.word	0x08005110

080035cc <task_b_init>:
/********************** external data declaration *****************************/
uint32_t g_task_b_cnt;

/********************** external functions definition ************************/
void task_b_init(void *parameters)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b_init), p_task_b);
 80035d4:	b672      	cpsid	i
 80035d6:	4b17      	ldr	r3, [pc, #92]	@ (8003634 <task_b_init+0x68>)
 80035d8:	6818      	ldr	r0, [r3, #0]
 80035da:	4b17      	ldr	r3, [pc, #92]	@ (8003638 <task_b_init+0x6c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	4b16      	ldr	r3, [pc, #88]	@ (800363c <task_b_init+0x70>)
 80035e2:	4a17      	ldr	r2, [pc, #92]	@ (8003640 <task_b_init+0x74>)
 80035e4:	213f      	movs	r1, #63	@ 0x3f
 80035e6:	f000 fd67 	bl	80040b8 <sniprintf>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4a15      	ldr	r2, [pc, #84]	@ (8003644 <task_b_init+0x78>)
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	4b10      	ldr	r3, [pc, #64]	@ (8003634 <task_b_init+0x68>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff ff41 	bl	800347c <logger_log_print_>
 80035fa:	b662      	cpsie	i

	g_task_b_cnt = G_TASK_B_CNT_INI;
 80035fc:	4b12      	ldr	r3, [pc, #72]	@ (8003648 <task_b_init+0x7c>)
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_b_cnt), g_task_b_cnt);
 8003602:	b672      	cpsid	i
 8003604:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <task_b_init+0x68>)
 8003606:	6818      	ldr	r0, [r3, #0]
 8003608:	4b0f      	ldr	r3, [pc, #60]	@ (8003648 <task_b_init+0x7c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	4b0f      	ldr	r3, [pc, #60]	@ (800364c <task_b_init+0x80>)
 8003610:	4a0f      	ldr	r2, [pc, #60]	@ (8003650 <task_b_init+0x84>)
 8003612:	213f      	movs	r1, #63	@ 0x3f
 8003614:	f000 fd50 	bl	80040b8 <sniprintf>
 8003618:	4603      	mov	r3, r0
 800361a:	4a0a      	ldr	r2, [pc, #40]	@ (8003644 <task_b_init+0x78>)
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	4b05      	ldr	r3, [pc, #20]	@ (8003634 <task_b_init+0x68>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7ff ff2a 	bl	800347c <logger_log_print_>
 8003628:	b662      	cpsie	i
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	08005250 	.word	0x08005250
 8003638:	20000018 	.word	0x20000018
 800363c:	0800514c 	.word	0x0800514c
 8003640:	08005158 	.word	0x08005158
 8003644:	2000085c 	.word	0x2000085c
 8003648:	20000864 	.word	0x20000864
 800364c:	08005170 	.word	0x08005170
 8003650:	08005180 	.word	0x08005180

08003654 <task_b_update>:

void task_b_update(void *parameters)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af02      	add	r7, sp, #8
 800365a:	6078      	str	r0, [r7, #4]
	 * scope and is not initialized again in the new scope.
	 */
	static uint32_t task_b_cnt = TASK_B_CNT_INI;

	/* Update Task B Counter */
	g_task_b_cnt++;
 800365c:	4b1e      	ldr	r3, [pc, #120]	@ (80036d8 <task_b_update+0x84>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3301      	adds	r3, #1
 8003662:	4a1d      	ldr	r2, [pc, #116]	@ (80036d8 <task_b_update+0x84>)
 8003664:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_b_update), p_task_b);
 8003666:	b672      	cpsid	i
 8003668:	4b1c      	ldr	r3, [pc, #112]	@ (80036dc <task_b_update+0x88>)
 800366a:	6818      	ldr	r0, [r3, #0]
 800366c:	4b1c      	ldr	r3, [pc, #112]	@ (80036e0 <task_b_update+0x8c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	9300      	str	r3, [sp, #0]
 8003672:	4b1c      	ldr	r3, [pc, #112]	@ (80036e4 <task_b_update+0x90>)
 8003674:	4a1c      	ldr	r2, [pc, #112]	@ (80036e8 <task_b_update+0x94>)
 8003676:	213f      	movs	r1, #63	@ 0x3f
 8003678:	f000 fd1e 	bl	80040b8 <sniprintf>
 800367c:	4603      	mov	r3, r0
 800367e:	4a1b      	ldr	r2, [pc, #108]	@ (80036ec <task_b_update+0x98>)
 8003680:	6013      	str	r3, [r2, #0]
 8003682:	4b16      	ldr	r3, [pc, #88]	@ (80036dc <task_b_update+0x88>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7ff fef8 	bl	800347c <logger_log_print_>
 800368c:	b662      	cpsie	i

	/* Print out: Task Updated and execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_b_cnt), g_task_b_cnt);
 800368e:	b672      	cpsid	i
 8003690:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <task_b_update+0x88>)
 8003692:	6818      	ldr	r0, [r3, #0]
 8003694:	4b10      	ldr	r3, [pc, #64]	@ (80036d8 <task_b_update+0x84>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	4b15      	ldr	r3, [pc, #84]	@ (80036f0 <task_b_update+0x9c>)
 800369c:	4a15      	ldr	r2, [pc, #84]	@ (80036f4 <task_b_update+0xa0>)
 800369e:	213f      	movs	r1, #63	@ 0x3f
 80036a0:	f000 fd0a 	bl	80040b8 <sniprintf>
 80036a4:	4603      	mov	r3, r0
 80036a6:	4a11      	ldr	r2, [pc, #68]	@ (80036ec <task_b_update+0x98>)
 80036a8:	6013      	str	r3, [r2, #0]
 80036aa:	4b0c      	ldr	r3, [pc, #48]	@ (80036dc <task_b_update+0x88>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff fee4 	bl	800347c <logger_log_print_>
 80036b4:	b662      	cpsie	i
	 * Asynchronously means that the program may not necessarily execute line
	 * by line.
	 * The program calls the function and move to the next operation and does
	 * not wait for it to return.
	 */
	if (task_b_cnt < TASK_B_CNT_MAX)
 80036b6:	4b10      	ldr	r3, [pc, #64]	@ (80036f8 <task_b_update+0xa4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b31      	cmp	r3, #49	@ 0x31
 80036bc:	d805      	bhi.n	80036ca <task_b_update+0x76>
		task_b_cnt++;
 80036be:	4b0e      	ldr	r3, [pc, #56]	@ (80036f8 <task_b_update+0xa4>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	3301      	adds	r3, #1
 80036c4:	4a0c      	ldr	r2, [pc, #48]	@ (80036f8 <task_b_update+0xa4>)
 80036c6:	6013      	str	r3, [r2, #0]
	#if (TEST_X == TEST_2)

	/* Here Chatbot Artificial Intelligence generated code */

	#endif
}
 80036c8:	e002      	b.n	80036d0 <task_b_update+0x7c>
		task_b_cnt = TASK_B_CNT_INI;
 80036ca:	4b0b      	ldr	r3, [pc, #44]	@ (80036f8 <task_b_update+0xa4>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
}
 80036d0:	bf00      	nop
 80036d2:	3708      	adds	r7, #8
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	20000864 	.word	0x20000864
 80036dc:	08005250 	.word	0x08005250
 80036e0:	20000018 	.word	0x20000018
 80036e4:	08005190 	.word	0x08005190
 80036e8:	08005158 	.word	0x08005158
 80036ec:	2000085c 	.word	0x2000085c
 80036f0:	08005170 	.word	0x08005170
 80036f4:	08005180 	.word	0x08005180
 80036f8:	20000868 	.word	0x20000868

080036fc <task_c_init>:
uint32_t g_task_c_cnt;
volatile uint32_t g_task_c_tick_cnt;

/********************** external functions definition ************************/
void task_c_init(void *parameters)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af02      	add	r7, sp, #8
 8003702:	6078      	str	r0, [r7, #4]
	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_c_init), p_task_c);
 8003704:	b672      	cpsid	i
 8003706:	4b18      	ldr	r3, [pc, #96]	@ (8003768 <task_c_init+0x6c>)
 8003708:	6818      	ldr	r0, [r3, #0]
 800370a:	4b18      	ldr	r3, [pc, #96]	@ (800376c <task_c_init+0x70>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <task_c_init+0x74>)
 8003712:	4a18      	ldr	r2, [pc, #96]	@ (8003774 <task_c_init+0x78>)
 8003714:	213f      	movs	r1, #63	@ 0x3f
 8003716:	f000 fccf 	bl	80040b8 <sniprintf>
 800371a:	4603      	mov	r3, r0
 800371c:	4a16      	ldr	r2, [pc, #88]	@ (8003778 <task_c_init+0x7c>)
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b11      	ldr	r3, [pc, #68]	@ (8003768 <task_c_init+0x6c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fea9 	bl	800347c <logger_log_print_>
 800372a:	b662      	cpsie	i

	g_task_c_cnt = G_TASK_C_CNT_INI;
 800372c:	4b13      	ldr	r3, [pc, #76]	@ (800377c <task_c_init+0x80>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
	g_task_c_tick_cnt = G_TASK_C_TICK_CNT_INI;
 8003732:	4b13      	ldr	r3, [pc, #76]	@ (8003780 <task_c_init+0x84>)
 8003734:	2200      	movs	r2, #0
 8003736:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_c_cnt), g_task_c_cnt);
 8003738:	b672      	cpsid	i
 800373a:	4b0b      	ldr	r3, [pc, #44]	@ (8003768 <task_c_init+0x6c>)
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	4b0f      	ldr	r3, [pc, #60]	@ (800377c <task_c_init+0x80>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	4b0f      	ldr	r3, [pc, #60]	@ (8003784 <task_c_init+0x88>)
 8003746:	4a10      	ldr	r2, [pc, #64]	@ (8003788 <task_c_init+0x8c>)
 8003748:	213f      	movs	r1, #63	@ 0x3f
 800374a:	f000 fcb5 	bl	80040b8 <sniprintf>
 800374e:	4603      	mov	r3, r0
 8003750:	4a09      	ldr	r2, [pc, #36]	@ (8003778 <task_c_init+0x7c>)
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <task_c_init+0x6c>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fe8f 	bl	800347c <logger_log_print_>
 800375e:	b662      	cpsie	i
}
 8003760:	bf00      	nop
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	08005250 	.word	0x08005250
 800376c:	2000001c 	.word	0x2000001c
 8003770:	080051c0 	.word	0x080051c0
 8003774:	080051cc 	.word	0x080051cc
 8003778:	2000085c 	.word	0x2000085c
 800377c:	2000086c 	.word	0x2000086c
 8003780:	20000870 	.word	0x20000870
 8003784:	080051e4 	.word	0x080051e4
 8003788:	080051f4 	.word	0x080051f4

0800378c <task_c_update>:

void task_c_update(void *parameters)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af02      	add	r7, sp, #8
 8003792:	6078      	str	r0, [r7, #4]
	bool b_time_update_required = false;
 8003794:	2300      	movs	r3, #0
 8003796:	73fb      	strb	r3, [r7, #15]

	/* Update Task C Counter */
	g_task_c_cnt++;
 8003798:	4b29      	ldr	r3, [pc, #164]	@ (8003840 <task_c_update+0xb4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	4a28      	ldr	r2, [pc, #160]	@ (8003840 <task_c_update+0xb4>)
 80037a0:	6013      	str	r3, [r2, #0]

	/* Print out: Application Update */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_c_update), p_task_c);
 80037a2:	b672      	cpsid	i
 80037a4:	4b27      	ldr	r3, [pc, #156]	@ (8003844 <task_c_update+0xb8>)
 80037a6:	6818      	ldr	r0, [r3, #0]
 80037a8:	4b27      	ldr	r3, [pc, #156]	@ (8003848 <task_c_update+0xbc>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	4b27      	ldr	r3, [pc, #156]	@ (800384c <task_c_update+0xc0>)
 80037b0:	4a27      	ldr	r2, [pc, #156]	@ (8003850 <task_c_update+0xc4>)
 80037b2:	213f      	movs	r1, #63	@ 0x3f
 80037b4:	f000 fc80 	bl	80040b8 <sniprintf>
 80037b8:	4603      	mov	r3, r0
 80037ba:	4a26      	ldr	r2, [pc, #152]	@ (8003854 <task_c_update+0xc8>)
 80037bc:	6013      	str	r3, [r2, #0]
 80037be:	4b21      	ldr	r3, [pc, #132]	@ (8003844 <task_c_update+0xb8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff fe5a 	bl	800347c <logger_log_print_>
 80037c8:	b662      	cpsie	i

	/* Print out: Task Updated and execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_c_cnt), g_task_c_cnt);
 80037ca:	b672      	cpsid	i
 80037cc:	4b1d      	ldr	r3, [pc, #116]	@ (8003844 <task_c_update+0xb8>)
 80037ce:	6818      	ldr	r0, [r3, #0]
 80037d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003840 <task_c_update+0xb4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	4b20      	ldr	r3, [pc, #128]	@ (8003858 <task_c_update+0xcc>)
 80037d8:	4a20      	ldr	r2, [pc, #128]	@ (800385c <task_c_update+0xd0>)
 80037da:	213f      	movs	r1, #63	@ 0x3f
 80037dc:	f000 fc6c 	bl	80040b8 <sniprintf>
 80037e0:	4603      	mov	r3, r0
 80037e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003854 <task_c_update+0xc8>)
 80037e4:	6013      	str	r3, [r2, #0]
 80037e6:	4b17      	ldr	r3, [pc, #92]	@ (8003844 <task_c_update+0xb8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7ff fe46 	bl	800347c <logger_log_print_>
 80037f0:	b662      	cpsie	i

	/* Protect shared resource (g_task_c_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 80037f2:	b672      	cpsid	i
    if (0 < g_task_c_tick_cnt)
 80037f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003860 <task_c_update+0xd4>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d006      	beq.n	800380a <task_c_update+0x7e>
    {
    	g_task_c_tick_cnt--;
 80037fc:	4b18      	ldr	r3, [pc, #96]	@ (8003860 <task_c_update+0xd4>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3b01      	subs	r3, #1
 8003802:	4a17      	ldr	r2, [pc, #92]	@ (8003860 <task_c_update+0xd4>)
 8003804:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 800380a:	b662      	cpsie	i

    while (b_time_update_required)
 800380c:	e00f      	b.n	800382e <task_c_update+0xa2>
    	 * For example, update Software Timers
    	 *
    	 */

		/* Protect shared resource (g_task_c_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 800380e:	b672      	cpsid	i
		if (0 < g_task_c_tick_cnt)
 8003810:	4b13      	ldr	r3, [pc, #76]	@ (8003860 <task_c_update+0xd4>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d007      	beq.n	8003828 <task_c_update+0x9c>
		{
			g_task_c_tick_cnt--;
 8003818:	4b11      	ldr	r3, [pc, #68]	@ (8003860 <task_c_update+0xd4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	3b01      	subs	r3, #1
 800381e:	4a10      	ldr	r2, [pc, #64]	@ (8003860 <task_c_update+0xd4>)
 8003820:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8003822:	2301      	movs	r3, #1
 8003824:	73fb      	strb	r3, [r7, #15]
 8003826:	e001      	b.n	800382c <task_c_update+0xa0>
		}
		else
		{
			b_time_update_required = false;
 8003828:	2300      	movs	r3, #0
 800382a:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 800382c:	b662      	cpsie	i
    while (b_time_update_required)
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1ec      	bne.n	800380e <task_c_update+0x82>
	}
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	2000086c 	.word	0x2000086c
 8003844:	08005250 	.word	0x08005250
 8003848:	2000001c 	.word	0x2000001c
 800384c:	08005204 	.word	0x08005204
 8003850:	080051cc 	.word	0x080051cc
 8003854:	2000085c 	.word	0x2000085c
 8003858:	080051e4 	.word	0x080051e4
 800385c:	080051f4 	.word	0x080051f4
 8003860:	20000870 	.word	0x20000870

08003864 <findslot>:
 8003864:	4b0a      	ldr	r3, [pc, #40]	@ (8003890 <findslot+0x2c>)
 8003866:	b510      	push	{r4, lr}
 8003868:	4604      	mov	r4, r0
 800386a:	6818      	ldr	r0, [r3, #0]
 800386c:	b118      	cbz	r0, 8003876 <findslot+0x12>
 800386e:	6a03      	ldr	r3, [r0, #32]
 8003870:	b90b      	cbnz	r3, 8003876 <findslot+0x12>
 8003872:	f000 fbd9 	bl	8004028 <__sinit>
 8003876:	2c13      	cmp	r4, #19
 8003878:	d807      	bhi.n	800388a <findslot+0x26>
 800387a:	4806      	ldr	r0, [pc, #24]	@ (8003894 <findslot+0x30>)
 800387c:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003880:	3201      	adds	r2, #1
 8003882:	d002      	beq.n	800388a <findslot+0x26>
 8003884:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003888:	bd10      	pop	{r4, pc}
 800388a:	2000      	movs	r0, #0
 800388c:	e7fc      	b.n	8003888 <findslot+0x24>
 800388e:	bf00      	nop
 8003890:	20000034 	.word	0x20000034
 8003894:	20000880 	.word	0x20000880

08003898 <error>:
 8003898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389a:	4604      	mov	r4, r0
 800389c:	f000 fcd2 	bl	8004244 <__errno>
 80038a0:	2613      	movs	r6, #19
 80038a2:	4605      	mov	r5, r0
 80038a4:	2700      	movs	r7, #0
 80038a6:	4630      	mov	r0, r6
 80038a8:	4639      	mov	r1, r7
 80038aa:	beab      	bkpt	0x00ab
 80038ac:	4606      	mov	r6, r0
 80038ae:	602e      	str	r6, [r5, #0]
 80038b0:	4620      	mov	r0, r4
 80038b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080038b4 <checkerror>:
 80038b4:	1c43      	adds	r3, r0, #1
 80038b6:	d101      	bne.n	80038bc <checkerror+0x8>
 80038b8:	f7ff bfee 	b.w	8003898 <error>
 80038bc:	4770      	bx	lr

080038be <_swiread>:
 80038be:	b530      	push	{r4, r5, lr}
 80038c0:	b085      	sub	sp, #20
 80038c2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80038c6:	9203      	str	r2, [sp, #12]
 80038c8:	2406      	movs	r4, #6
 80038ca:	ad01      	add	r5, sp, #4
 80038cc:	4620      	mov	r0, r4
 80038ce:	4629      	mov	r1, r5
 80038d0:	beab      	bkpt	0x00ab
 80038d2:	4604      	mov	r4, r0
 80038d4:	4620      	mov	r0, r4
 80038d6:	f7ff ffed 	bl	80038b4 <checkerror>
 80038da:	b005      	add	sp, #20
 80038dc:	bd30      	pop	{r4, r5, pc}

080038de <_read>:
 80038de:	b570      	push	{r4, r5, r6, lr}
 80038e0:	460e      	mov	r6, r1
 80038e2:	4614      	mov	r4, r2
 80038e4:	f7ff ffbe 	bl	8003864 <findslot>
 80038e8:	4605      	mov	r5, r0
 80038ea:	b930      	cbnz	r0, 80038fa <_read+0x1c>
 80038ec:	f000 fcaa 	bl	8004244 <__errno>
 80038f0:	2309      	movs	r3, #9
 80038f2:	6003      	str	r3, [r0, #0]
 80038f4:	f04f 30ff 	mov.w	r0, #4294967295
 80038f8:	bd70      	pop	{r4, r5, r6, pc}
 80038fa:	6800      	ldr	r0, [r0, #0]
 80038fc:	4622      	mov	r2, r4
 80038fe:	4631      	mov	r1, r6
 8003900:	f7ff ffdd 	bl	80038be <_swiread>
 8003904:	1c43      	adds	r3, r0, #1
 8003906:	d0f5      	beq.n	80038f4 <_read+0x16>
 8003908:	686b      	ldr	r3, [r5, #4]
 800390a:	1a20      	subs	r0, r4, r0
 800390c:	4403      	add	r3, r0
 800390e:	606b      	str	r3, [r5, #4]
 8003910:	e7f2      	b.n	80038f8 <_read+0x1a>

08003912 <_swilseek>:
 8003912:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003914:	460c      	mov	r4, r1
 8003916:	4616      	mov	r6, r2
 8003918:	f7ff ffa4 	bl	8003864 <findslot>
 800391c:	4605      	mov	r5, r0
 800391e:	b940      	cbnz	r0, 8003932 <_swilseek+0x20>
 8003920:	f000 fc90 	bl	8004244 <__errno>
 8003924:	2309      	movs	r3, #9
 8003926:	6003      	str	r3, [r0, #0]
 8003928:	f04f 34ff 	mov.w	r4, #4294967295
 800392c:	4620      	mov	r0, r4
 800392e:	b003      	add	sp, #12
 8003930:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003932:	2e02      	cmp	r6, #2
 8003934:	d903      	bls.n	800393e <_swilseek+0x2c>
 8003936:	f000 fc85 	bl	8004244 <__errno>
 800393a:	2316      	movs	r3, #22
 800393c:	e7f3      	b.n	8003926 <_swilseek+0x14>
 800393e:	2e01      	cmp	r6, #1
 8003940:	d112      	bne.n	8003968 <_swilseek+0x56>
 8003942:	6843      	ldr	r3, [r0, #4]
 8003944:	18e4      	adds	r4, r4, r3
 8003946:	d4f6      	bmi.n	8003936 <_swilseek+0x24>
 8003948:	682b      	ldr	r3, [r5, #0]
 800394a:	260a      	movs	r6, #10
 800394c:	e9cd 3400 	strd	r3, r4, [sp]
 8003950:	466f      	mov	r7, sp
 8003952:	4630      	mov	r0, r6
 8003954:	4639      	mov	r1, r7
 8003956:	beab      	bkpt	0x00ab
 8003958:	4606      	mov	r6, r0
 800395a:	4630      	mov	r0, r6
 800395c:	f7ff ffaa 	bl	80038b4 <checkerror>
 8003960:	2800      	cmp	r0, #0
 8003962:	dbe1      	blt.n	8003928 <_swilseek+0x16>
 8003964:	606c      	str	r4, [r5, #4]
 8003966:	e7e1      	b.n	800392c <_swilseek+0x1a>
 8003968:	2e02      	cmp	r6, #2
 800396a:	6803      	ldr	r3, [r0, #0]
 800396c:	d1ec      	bne.n	8003948 <_swilseek+0x36>
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	260c      	movs	r6, #12
 8003972:	466f      	mov	r7, sp
 8003974:	4630      	mov	r0, r6
 8003976:	4639      	mov	r1, r7
 8003978:	beab      	bkpt	0x00ab
 800397a:	4606      	mov	r6, r0
 800397c:	4630      	mov	r0, r6
 800397e:	f7ff ff99 	bl	80038b4 <checkerror>
 8003982:	1c43      	adds	r3, r0, #1
 8003984:	d0d0      	beq.n	8003928 <_swilseek+0x16>
 8003986:	4404      	add	r4, r0
 8003988:	e7de      	b.n	8003948 <_swilseek+0x36>

0800398a <_lseek>:
 800398a:	f7ff bfc2 	b.w	8003912 <_swilseek>

0800398e <_swiwrite>:
 800398e:	b530      	push	{r4, r5, lr}
 8003990:	b085      	sub	sp, #20
 8003992:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003996:	9203      	str	r2, [sp, #12]
 8003998:	2405      	movs	r4, #5
 800399a:	ad01      	add	r5, sp, #4
 800399c:	4620      	mov	r0, r4
 800399e:	4629      	mov	r1, r5
 80039a0:	beab      	bkpt	0x00ab
 80039a2:	4604      	mov	r4, r0
 80039a4:	4620      	mov	r0, r4
 80039a6:	f7ff ff85 	bl	80038b4 <checkerror>
 80039aa:	b005      	add	sp, #20
 80039ac:	bd30      	pop	{r4, r5, pc}

080039ae <_write>:
 80039ae:	b570      	push	{r4, r5, r6, lr}
 80039b0:	460e      	mov	r6, r1
 80039b2:	4615      	mov	r5, r2
 80039b4:	f7ff ff56 	bl	8003864 <findslot>
 80039b8:	4604      	mov	r4, r0
 80039ba:	b930      	cbnz	r0, 80039ca <_write+0x1c>
 80039bc:	f000 fc42 	bl	8004244 <__errno>
 80039c0:	2309      	movs	r3, #9
 80039c2:	6003      	str	r3, [r0, #0]
 80039c4:	f04f 30ff 	mov.w	r0, #4294967295
 80039c8:	bd70      	pop	{r4, r5, r6, pc}
 80039ca:	6800      	ldr	r0, [r0, #0]
 80039cc:	462a      	mov	r2, r5
 80039ce:	4631      	mov	r1, r6
 80039d0:	f7ff ffdd 	bl	800398e <_swiwrite>
 80039d4:	1e03      	subs	r3, r0, #0
 80039d6:	dbf5      	blt.n	80039c4 <_write+0x16>
 80039d8:	6862      	ldr	r2, [r4, #4]
 80039da:	1ae8      	subs	r0, r5, r3
 80039dc:	4402      	add	r2, r0
 80039de:	42ab      	cmp	r3, r5
 80039e0:	6062      	str	r2, [r4, #4]
 80039e2:	d1f1      	bne.n	80039c8 <_write+0x1a>
 80039e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80039e8:	2000      	movs	r0, #0
 80039ea:	f7ff bf55 	b.w	8003898 <error>

080039ee <_swiclose>:
 80039ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80039f0:	2402      	movs	r4, #2
 80039f2:	9001      	str	r0, [sp, #4]
 80039f4:	ad01      	add	r5, sp, #4
 80039f6:	4620      	mov	r0, r4
 80039f8:	4629      	mov	r1, r5
 80039fa:	beab      	bkpt	0x00ab
 80039fc:	4604      	mov	r4, r0
 80039fe:	4620      	mov	r0, r4
 8003a00:	f7ff ff58 	bl	80038b4 <checkerror>
 8003a04:	b003      	add	sp, #12
 8003a06:	bd30      	pop	{r4, r5, pc}

08003a08 <_close>:
 8003a08:	b538      	push	{r3, r4, r5, lr}
 8003a0a:	4605      	mov	r5, r0
 8003a0c:	f7ff ff2a 	bl	8003864 <findslot>
 8003a10:	4604      	mov	r4, r0
 8003a12:	b930      	cbnz	r0, 8003a22 <_close+0x1a>
 8003a14:	f000 fc16 	bl	8004244 <__errno>
 8003a18:	2309      	movs	r3, #9
 8003a1a:	6003      	str	r3, [r0, #0]
 8003a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a20:	bd38      	pop	{r3, r4, r5, pc}
 8003a22:	3d01      	subs	r5, #1
 8003a24:	2d01      	cmp	r5, #1
 8003a26:	d809      	bhi.n	8003a3c <_close+0x34>
 8003a28:	4b07      	ldr	r3, [pc, #28]	@ (8003a48 <_close+0x40>)
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	691b      	ldr	r3, [r3, #16]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d104      	bne.n	8003a3c <_close+0x34>
 8003a32:	f04f 33ff 	mov.w	r3, #4294967295
 8003a36:	6023      	str	r3, [r4, #0]
 8003a38:	2000      	movs	r0, #0
 8003a3a:	e7f1      	b.n	8003a20 <_close+0x18>
 8003a3c:	6820      	ldr	r0, [r4, #0]
 8003a3e:	f7ff ffd6 	bl	80039ee <_swiclose>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d0f5      	beq.n	8003a32 <_close+0x2a>
 8003a46:	e7eb      	b.n	8003a20 <_close+0x18>
 8003a48:	20000880 	.word	0x20000880

08003a4c <_swistat>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	460c      	mov	r4, r1
 8003a50:	f7ff ff08 	bl	8003864 <findslot>
 8003a54:	4605      	mov	r5, r0
 8003a56:	b930      	cbnz	r0, 8003a66 <_swistat+0x1a>
 8003a58:	f000 fbf4 	bl	8004244 <__errno>
 8003a5c:	2309      	movs	r3, #9
 8003a5e:	6003      	str	r3, [r0, #0]
 8003a60:	f04f 30ff 	mov.w	r0, #4294967295
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
 8003a66:	6863      	ldr	r3, [r4, #4]
 8003a68:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003a6c:	6063      	str	r3, [r4, #4]
 8003a6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a72:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003a74:	260c      	movs	r6, #12
 8003a76:	4630      	mov	r0, r6
 8003a78:	4629      	mov	r1, r5
 8003a7a:	beab      	bkpt	0x00ab
 8003a7c:	4605      	mov	r5, r0
 8003a7e:	4628      	mov	r0, r5
 8003a80:	f7ff ff18 	bl	80038b4 <checkerror>
 8003a84:	1c43      	adds	r3, r0, #1
 8003a86:	d0eb      	beq.n	8003a60 <_swistat+0x14>
 8003a88:	6120      	str	r0, [r4, #16]
 8003a8a:	2000      	movs	r0, #0
 8003a8c:	e7ea      	b.n	8003a64 <_swistat+0x18>

08003a8e <_fstat>:
 8003a8e:	460b      	mov	r3, r1
 8003a90:	b510      	push	{r4, lr}
 8003a92:	2100      	movs	r1, #0
 8003a94:	4604      	mov	r4, r0
 8003a96:	2258      	movs	r2, #88	@ 0x58
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fb84 	bl	80041a6 <memset>
 8003a9e:	4601      	mov	r1, r0
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003aa6:	f7ff bfd1 	b.w	8003a4c <_swistat>

08003aaa <_stat>:
 8003aaa:	b538      	push	{r3, r4, r5, lr}
 8003aac:	460d      	mov	r5, r1
 8003aae:	4604      	mov	r4, r0
 8003ab0:	2258      	movs	r2, #88	@ 0x58
 8003ab2:	2100      	movs	r1, #0
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f000 fb76 	bl	80041a6 <memset>
 8003aba:	4620      	mov	r0, r4
 8003abc:	2100      	movs	r1, #0
 8003abe:	f000 f811 	bl	8003ae4 <_swiopen>
 8003ac2:	1c43      	adds	r3, r0, #1
 8003ac4:	4604      	mov	r4, r0
 8003ac6:	d00b      	beq.n	8003ae0 <_stat+0x36>
 8003ac8:	686b      	ldr	r3, [r5, #4]
 8003aca:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003ace:	606b      	str	r3, [r5, #4]
 8003ad0:	4629      	mov	r1, r5
 8003ad2:	f7ff ffbb 	bl	8003a4c <_swistat>
 8003ad6:	4605      	mov	r5, r0
 8003ad8:	4620      	mov	r0, r4
 8003ada:	f7ff ff95 	bl	8003a08 <_close>
 8003ade:	462c      	mov	r4, r5
 8003ae0:	4620      	mov	r0, r4
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}

08003ae4 <_swiopen>:
 8003ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	4f29      	ldr	r7, [pc, #164]	@ (8003b90 <_swiopen+0xac>)
 8003aea:	b096      	sub	sp, #88	@ 0x58
 8003aec:	4682      	mov	sl, r0
 8003aee:	460e      	mov	r6, r1
 8003af0:	2400      	movs	r4, #0
 8003af2:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8003af6:	3301      	adds	r3, #1
 8003af8:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8003afc:	d00c      	beq.n	8003b18 <_swiopen+0x34>
 8003afe:	3401      	adds	r4, #1
 8003b00:	2c14      	cmp	r4, #20
 8003b02:	d1f6      	bne.n	8003af2 <_swiopen+0xe>
 8003b04:	f000 fb9e 	bl	8004244 <__errno>
 8003b08:	2318      	movs	r3, #24
 8003b0a:	6003      	str	r3, [r0, #0]
 8003b0c:	f04f 34ff 	mov.w	r4, #4294967295
 8003b10:	4620      	mov	r0, r4
 8003b12:	b016      	add	sp, #88	@ 0x58
 8003b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b18:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8003b1c:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003b20:	46e9      	mov	r9, sp
 8003b22:	d109      	bne.n	8003b38 <_swiopen+0x54>
 8003b24:	4649      	mov	r1, r9
 8003b26:	4650      	mov	r0, sl
 8003b28:	f7ff ffbf 	bl	8003aaa <_stat>
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	d003      	beq.n	8003b38 <_swiopen+0x54>
 8003b30:	f000 fb88 	bl	8004244 <__errno>
 8003b34:	2311      	movs	r3, #17
 8003b36:	e7e8      	b.n	8003b0a <_swiopen+0x26>
 8003b38:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8003b3c:	f240 6301 	movw	r3, #1537	@ 0x601
 8003b40:	07b2      	lsls	r2, r6, #30
 8003b42:	bf48      	it	mi
 8003b44:	f045 0502 	orrmi.w	r5, r5, #2
 8003b48:	421e      	tst	r6, r3
 8003b4a:	bf18      	it	ne
 8003b4c:	f045 0504 	orrne.w	r5, r5, #4
 8003b50:	0733      	lsls	r3, r6, #28
 8003b52:	bf48      	it	mi
 8003b54:	f025 0504 	bicmi.w	r5, r5, #4
 8003b58:	4650      	mov	r0, sl
 8003b5a:	bf48      	it	mi
 8003b5c:	f045 0508 	orrmi.w	r5, r5, #8
 8003b60:	f8cd a000 	str.w	sl, [sp]
 8003b64:	f7fc fb44 	bl	80001f0 <strlen>
 8003b68:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003b6c:	2501      	movs	r5, #1
 8003b6e:	4628      	mov	r0, r5
 8003b70:	4649      	mov	r1, r9
 8003b72:	beab      	bkpt	0x00ab
 8003b74:	4605      	mov	r5, r0
 8003b76:	2d00      	cmp	r5, #0
 8003b78:	db05      	blt.n	8003b86 <_swiopen+0xa2>
 8003b7a:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8003b7e:	4447      	add	r7, r8
 8003b80:	2300      	movs	r3, #0
 8003b82:	607b      	str	r3, [r7, #4]
 8003b84:	e7c4      	b.n	8003b10 <_swiopen+0x2c>
 8003b86:	4628      	mov	r0, r5
 8003b88:	f7ff fe86 	bl	8003898 <error>
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	e7bf      	b.n	8003b10 <_swiopen+0x2c>
 8003b90:	20000880 	.word	0x20000880

08003b94 <_get_semihosting_exts>:
 8003b94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003b98:	4606      	mov	r6, r0
 8003b9a:	460f      	mov	r7, r1
 8003b9c:	4829      	ldr	r0, [pc, #164]	@ (8003c44 <_get_semihosting_exts+0xb0>)
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	4615      	mov	r5, r2
 8003ba2:	f7ff ff9f 	bl	8003ae4 <_swiopen>
 8003ba6:	462a      	mov	r2, r5
 8003ba8:	4604      	mov	r4, r0
 8003baa:	2100      	movs	r1, #0
 8003bac:	4630      	mov	r0, r6
 8003bae:	f000 fafa 	bl	80041a6 <memset>
 8003bb2:	1c63      	adds	r3, r4, #1
 8003bb4:	d014      	beq.n	8003be0 <_get_semihosting_exts+0x4c>
 8003bb6:	4620      	mov	r0, r4
 8003bb8:	f7ff fe54 	bl	8003864 <findslot>
 8003bbc:	f04f 080c 	mov.w	r8, #12
 8003bc0:	4681      	mov	r9, r0
 8003bc2:	4640      	mov	r0, r8
 8003bc4:	4649      	mov	r1, r9
 8003bc6:	beab      	bkpt	0x00ab
 8003bc8:	4680      	mov	r8, r0
 8003bca:	4640      	mov	r0, r8
 8003bcc:	f7ff fe72 	bl	80038b4 <checkerror>
 8003bd0:	2803      	cmp	r0, #3
 8003bd2:	dd02      	ble.n	8003bda <_get_semihosting_exts+0x46>
 8003bd4:	1ec3      	subs	r3, r0, #3
 8003bd6:	42ab      	cmp	r3, r5
 8003bd8:	dc07      	bgt.n	8003bea <_get_semihosting_exts+0x56>
 8003bda:	4620      	mov	r0, r4
 8003bdc:	f7ff ff14 	bl	8003a08 <_close>
 8003be0:	f04f 30ff 	mov.w	r0, #4294967295
 8003be4:	b003      	add	sp, #12
 8003be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003bea:	2204      	movs	r2, #4
 8003bec:	eb0d 0102 	add.w	r1, sp, r2
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	f7ff fe74 	bl	80038de <_read>
 8003bf6:	2803      	cmp	r0, #3
 8003bf8:	ddef      	ble.n	8003bda <_get_semihosting_exts+0x46>
 8003bfa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003bfe:	2b53      	cmp	r3, #83	@ 0x53
 8003c00:	d1eb      	bne.n	8003bda <_get_semihosting_exts+0x46>
 8003c02:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003c06:	2b48      	cmp	r3, #72	@ 0x48
 8003c08:	d1e7      	bne.n	8003bda <_get_semihosting_exts+0x46>
 8003c0a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003c0e:	2b46      	cmp	r3, #70	@ 0x46
 8003c10:	d1e3      	bne.n	8003bda <_get_semihosting_exts+0x46>
 8003c12:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003c16:	2b42      	cmp	r3, #66	@ 0x42
 8003c18:	d1df      	bne.n	8003bda <_get_semihosting_exts+0x46>
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	4639      	mov	r1, r7
 8003c1e:	4620      	mov	r0, r4
 8003c20:	f7ff fe77 	bl	8003912 <_swilseek>
 8003c24:	2800      	cmp	r0, #0
 8003c26:	dbd8      	blt.n	8003bda <_get_semihosting_exts+0x46>
 8003c28:	462a      	mov	r2, r5
 8003c2a:	4631      	mov	r1, r6
 8003c2c:	4620      	mov	r0, r4
 8003c2e:	f7ff fe56 	bl	80038de <_read>
 8003c32:	4605      	mov	r5, r0
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7ff fee7 	bl	8003a08 <_close>
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	f7ff fe3a 	bl	80038b4 <checkerror>
 8003c40:	e7d0      	b.n	8003be4 <_get_semihosting_exts+0x50>
 8003c42:	bf00      	nop
 8003c44:	08005254 	.word	0x08005254

08003c48 <initialise_semihosting_exts>:
 8003c48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c4a:	4d0a      	ldr	r5, [pc, #40]	@ (8003c74 <initialise_semihosting_exts+0x2c>)
 8003c4c:	4c0a      	ldr	r4, [pc, #40]	@ (8003c78 <initialise_semihosting_exts+0x30>)
 8003c4e:	2100      	movs	r1, #0
 8003c50:	2201      	movs	r2, #1
 8003c52:	a801      	add	r0, sp, #4
 8003c54:	6029      	str	r1, [r5, #0]
 8003c56:	6022      	str	r2, [r4, #0]
 8003c58:	f7ff ff9c 	bl	8003b94 <_get_semihosting_exts>
 8003c5c:	2800      	cmp	r0, #0
 8003c5e:	dd07      	ble.n	8003c70 <initialise_semihosting_exts+0x28>
 8003c60:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003c64:	f003 0201 	and.w	r2, r3, #1
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	602a      	str	r2, [r5, #0]
 8003c6e:	6023      	str	r3, [r4, #0]
 8003c70:	b003      	add	sp, #12
 8003c72:	bd30      	pop	{r4, r5, pc}
 8003c74:	20000024 	.word	0x20000024
 8003c78:	20000020 	.word	0x20000020

08003c7c <_has_ext_stdout_stderr>:
 8003c7c:	b510      	push	{r4, lr}
 8003c7e:	4c04      	ldr	r4, [pc, #16]	@ (8003c90 <_has_ext_stdout_stderr+0x14>)
 8003c80:	6823      	ldr	r3, [r4, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	da01      	bge.n	8003c8a <_has_ext_stdout_stderr+0xe>
 8003c86:	f7ff ffdf 	bl	8003c48 <initialise_semihosting_exts>
 8003c8a:	6820      	ldr	r0, [r4, #0]
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	bf00      	nop
 8003c90:	20000020 	.word	0x20000020

08003c94 <initialise_monitor_handles>:
 8003c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c98:	b085      	sub	sp, #20
 8003c9a:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8003d4c <initialise_monitor_handles+0xb8>
 8003c9e:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	2400      	movs	r4, #0
 8003ca6:	9303      	str	r3, [sp, #12]
 8003ca8:	af01      	add	r7, sp, #4
 8003caa:	9402      	str	r4, [sp, #8]
 8003cac:	2501      	movs	r5, #1
 8003cae:	4628      	mov	r0, r5
 8003cb0:	4639      	mov	r1, r7
 8003cb2:	beab      	bkpt	0x00ab
 8003cb4:	4605      	mov	r5, r0
 8003cb6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8003d50 <initialise_monitor_handles+0xbc>
 8003cba:	4623      	mov	r3, r4
 8003cbc:	4c20      	ldr	r4, [pc, #128]	@ (8003d40 <initialise_monitor_handles+0xac>)
 8003cbe:	f8c8 5000 	str.w	r5, [r8]
 8003cc2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc6:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003cca:	3301      	adds	r3, #1
 8003ccc:	2b14      	cmp	r3, #20
 8003cce:	d1fa      	bne.n	8003cc6 <initialise_monitor_handles+0x32>
 8003cd0:	f7ff ffd4 	bl	8003c7c <_has_ext_stdout_stderr>
 8003cd4:	4d1b      	ldr	r5, [pc, #108]	@ (8003d44 <initialise_monitor_handles+0xb0>)
 8003cd6:	b1d0      	cbz	r0, 8003d0e <initialise_monitor_handles+0x7a>
 8003cd8:	f04f 0a03 	mov.w	sl, #3
 8003cdc:	2304      	movs	r3, #4
 8003cde:	f8cd 9004 	str.w	r9, [sp, #4]
 8003ce2:	2601      	movs	r6, #1
 8003ce4:	f8cd a00c 	str.w	sl, [sp, #12]
 8003ce8:	9302      	str	r3, [sp, #8]
 8003cea:	4630      	mov	r0, r6
 8003cec:	4639      	mov	r1, r7
 8003cee:	beab      	bkpt	0x00ab
 8003cf0:	4683      	mov	fp, r0
 8003cf2:	4b15      	ldr	r3, [pc, #84]	@ (8003d48 <initialise_monitor_handles+0xb4>)
 8003cf4:	f8cd 9004 	str.w	r9, [sp, #4]
 8003cf8:	f8c3 b000 	str.w	fp, [r3]
 8003cfc:	2308      	movs	r3, #8
 8003cfe:	f8cd a00c 	str.w	sl, [sp, #12]
 8003d02:	9302      	str	r3, [sp, #8]
 8003d04:	4630      	mov	r0, r6
 8003d06:	4639      	mov	r1, r7
 8003d08:	beab      	bkpt	0x00ab
 8003d0a:	4606      	mov	r6, r0
 8003d0c:	602e      	str	r6, [r5, #0]
 8003d0e:	682b      	ldr	r3, [r5, #0]
 8003d10:	3301      	adds	r3, #1
 8003d12:	bf02      	ittt	eq
 8003d14:	4b0c      	ldreq	r3, [pc, #48]	@ (8003d48 <initialise_monitor_handles+0xb4>)
 8003d16:	681b      	ldreq	r3, [r3, #0]
 8003d18:	602b      	streq	r3, [r5, #0]
 8003d1a:	2600      	movs	r6, #0
 8003d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8003d20:	6023      	str	r3, [r4, #0]
 8003d22:	6066      	str	r6, [r4, #4]
 8003d24:	f7ff ffaa 	bl	8003c7c <_has_ext_stdout_stderr>
 8003d28:	b130      	cbz	r0, 8003d38 <initialise_monitor_handles+0xa4>
 8003d2a:	4b07      	ldr	r3, [pc, #28]	@ (8003d48 <initialise_monitor_handles+0xb4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003d32:	682b      	ldr	r3, [r5, #0]
 8003d34:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003d38:	b005      	add	sp, #20
 8003d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d3e:	bf00      	nop
 8003d40:	20000880 	.word	0x20000880
 8003d44:	20000874 	.word	0x20000874
 8003d48:	20000878 	.word	0x20000878
 8003d4c:	0800526a 	.word	0x0800526a
 8003d50:	2000087c 	.word	0x2000087c

08003d54 <_isatty>:
 8003d54:	b570      	push	{r4, r5, r6, lr}
 8003d56:	f7ff fd85 	bl	8003864 <findslot>
 8003d5a:	2409      	movs	r4, #9
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	b920      	cbnz	r0, 8003d6a <_isatty+0x16>
 8003d60:	f000 fa70 	bl	8004244 <__errno>
 8003d64:	6004      	str	r4, [r0, #0]
 8003d66:	2000      	movs	r0, #0
 8003d68:	bd70      	pop	{r4, r5, r6, pc}
 8003d6a:	4620      	mov	r0, r4
 8003d6c:	4629      	mov	r1, r5
 8003d6e:	beab      	bkpt	0x00ab
 8003d70:	4604      	mov	r4, r0
 8003d72:	2c01      	cmp	r4, #1
 8003d74:	4620      	mov	r0, r4
 8003d76:	d0f7      	beq.n	8003d68 <_isatty+0x14>
 8003d78:	f000 fa64 	bl	8004244 <__errno>
 8003d7c:	2513      	movs	r5, #19
 8003d7e:	4604      	mov	r4, r0
 8003d80:	2600      	movs	r6, #0
 8003d82:	4628      	mov	r0, r5
 8003d84:	4631      	mov	r1, r6
 8003d86:	beab      	bkpt	0x00ab
 8003d88:	4605      	mov	r5, r0
 8003d8a:	6025      	str	r5, [r4, #0]
 8003d8c:	e7eb      	b.n	8003d66 <_isatty+0x12>
	...

08003d90 <__sflush_r>:
 8003d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d98:	0716      	lsls	r6, r2, #28
 8003d9a:	4605      	mov	r5, r0
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	d454      	bmi.n	8003e4a <__sflush_r+0xba>
 8003da0:	684b      	ldr	r3, [r1, #4]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	dc02      	bgt.n	8003dac <__sflush_r+0x1c>
 8003da6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	dd48      	ble.n	8003e3e <__sflush_r+0xae>
 8003dac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003dae:	2e00      	cmp	r6, #0
 8003db0:	d045      	beq.n	8003e3e <__sflush_r+0xae>
 8003db2:	2300      	movs	r3, #0
 8003db4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003db8:	682f      	ldr	r7, [r5, #0]
 8003dba:	6a21      	ldr	r1, [r4, #32]
 8003dbc:	602b      	str	r3, [r5, #0]
 8003dbe:	d030      	beq.n	8003e22 <__sflush_r+0x92>
 8003dc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003dc2:	89a3      	ldrh	r3, [r4, #12]
 8003dc4:	0759      	lsls	r1, r3, #29
 8003dc6:	d505      	bpl.n	8003dd4 <__sflush_r+0x44>
 8003dc8:	6863      	ldr	r3, [r4, #4]
 8003dca:	1ad2      	subs	r2, r2, r3
 8003dcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003dce:	b10b      	cbz	r3, 8003dd4 <__sflush_r+0x44>
 8003dd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003dd2:	1ad2      	subs	r2, r2, r3
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003dd8:	6a21      	ldr	r1, [r4, #32]
 8003dda:	4628      	mov	r0, r5
 8003ddc:	47b0      	blx	r6
 8003dde:	1c43      	adds	r3, r0, #1
 8003de0:	89a3      	ldrh	r3, [r4, #12]
 8003de2:	d106      	bne.n	8003df2 <__sflush_r+0x62>
 8003de4:	6829      	ldr	r1, [r5, #0]
 8003de6:	291d      	cmp	r1, #29
 8003de8:	d82b      	bhi.n	8003e42 <__sflush_r+0xb2>
 8003dea:	4a2a      	ldr	r2, [pc, #168]	@ (8003e94 <__sflush_r+0x104>)
 8003dec:	410a      	asrs	r2, r1
 8003dee:	07d6      	lsls	r6, r2, #31
 8003df0:	d427      	bmi.n	8003e42 <__sflush_r+0xb2>
 8003df2:	2200      	movs	r2, #0
 8003df4:	6062      	str	r2, [r4, #4]
 8003df6:	04d9      	lsls	r1, r3, #19
 8003df8:	6922      	ldr	r2, [r4, #16]
 8003dfa:	6022      	str	r2, [r4, #0]
 8003dfc:	d504      	bpl.n	8003e08 <__sflush_r+0x78>
 8003dfe:	1c42      	adds	r2, r0, #1
 8003e00:	d101      	bne.n	8003e06 <__sflush_r+0x76>
 8003e02:	682b      	ldr	r3, [r5, #0]
 8003e04:	b903      	cbnz	r3, 8003e08 <__sflush_r+0x78>
 8003e06:	6560      	str	r0, [r4, #84]	@ 0x54
 8003e08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003e0a:	602f      	str	r7, [r5, #0]
 8003e0c:	b1b9      	cbz	r1, 8003e3e <__sflush_r+0xae>
 8003e0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003e12:	4299      	cmp	r1, r3
 8003e14:	d002      	beq.n	8003e1c <__sflush_r+0x8c>
 8003e16:	4628      	mov	r0, r5
 8003e18:	f000 fa42 	bl	80042a0 <_free_r>
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8003e20:	e00d      	b.n	8003e3e <__sflush_r+0xae>
 8003e22:	2301      	movs	r3, #1
 8003e24:	4628      	mov	r0, r5
 8003e26:	47b0      	blx	r6
 8003e28:	4602      	mov	r2, r0
 8003e2a:	1c50      	adds	r0, r2, #1
 8003e2c:	d1c9      	bne.n	8003dc2 <__sflush_r+0x32>
 8003e2e:	682b      	ldr	r3, [r5, #0]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d0c6      	beq.n	8003dc2 <__sflush_r+0x32>
 8003e34:	2b1d      	cmp	r3, #29
 8003e36:	d001      	beq.n	8003e3c <__sflush_r+0xac>
 8003e38:	2b16      	cmp	r3, #22
 8003e3a:	d11e      	bne.n	8003e7a <__sflush_r+0xea>
 8003e3c:	602f      	str	r7, [r5, #0]
 8003e3e:	2000      	movs	r0, #0
 8003e40:	e022      	b.n	8003e88 <__sflush_r+0xf8>
 8003e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e46:	b21b      	sxth	r3, r3
 8003e48:	e01b      	b.n	8003e82 <__sflush_r+0xf2>
 8003e4a:	690f      	ldr	r7, [r1, #16]
 8003e4c:	2f00      	cmp	r7, #0
 8003e4e:	d0f6      	beq.n	8003e3e <__sflush_r+0xae>
 8003e50:	0793      	lsls	r3, r2, #30
 8003e52:	680e      	ldr	r6, [r1, #0]
 8003e54:	bf08      	it	eq
 8003e56:	694b      	ldreq	r3, [r1, #20]
 8003e58:	600f      	str	r7, [r1, #0]
 8003e5a:	bf18      	it	ne
 8003e5c:	2300      	movne	r3, #0
 8003e5e:	eba6 0807 	sub.w	r8, r6, r7
 8003e62:	608b      	str	r3, [r1, #8]
 8003e64:	f1b8 0f00 	cmp.w	r8, #0
 8003e68:	dde9      	ble.n	8003e3e <__sflush_r+0xae>
 8003e6a:	6a21      	ldr	r1, [r4, #32]
 8003e6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003e6e:	4643      	mov	r3, r8
 8003e70:	463a      	mov	r2, r7
 8003e72:	4628      	mov	r0, r5
 8003e74:	47b0      	blx	r6
 8003e76:	2800      	cmp	r0, #0
 8003e78:	dc08      	bgt.n	8003e8c <__sflush_r+0xfc>
 8003e7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e82:	81a3      	strh	r3, [r4, #12]
 8003e84:	f04f 30ff 	mov.w	r0, #4294967295
 8003e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e8c:	4407      	add	r7, r0
 8003e8e:	eba8 0800 	sub.w	r8, r8, r0
 8003e92:	e7e7      	b.n	8003e64 <__sflush_r+0xd4>
 8003e94:	dfbffffe 	.word	0xdfbffffe

08003e98 <_fflush_r>:
 8003e98:	b538      	push	{r3, r4, r5, lr}
 8003e9a:	690b      	ldr	r3, [r1, #16]
 8003e9c:	4605      	mov	r5, r0
 8003e9e:	460c      	mov	r4, r1
 8003ea0:	b913      	cbnz	r3, 8003ea8 <_fflush_r+0x10>
 8003ea2:	2500      	movs	r5, #0
 8003ea4:	4628      	mov	r0, r5
 8003ea6:	bd38      	pop	{r3, r4, r5, pc}
 8003ea8:	b118      	cbz	r0, 8003eb2 <_fflush_r+0x1a>
 8003eaa:	6a03      	ldr	r3, [r0, #32]
 8003eac:	b90b      	cbnz	r3, 8003eb2 <_fflush_r+0x1a>
 8003eae:	f000 f8bb 	bl	8004028 <__sinit>
 8003eb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f3      	beq.n	8003ea2 <_fflush_r+0xa>
 8003eba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003ebc:	07d0      	lsls	r0, r2, #31
 8003ebe:	d404      	bmi.n	8003eca <_fflush_r+0x32>
 8003ec0:	0599      	lsls	r1, r3, #22
 8003ec2:	d402      	bmi.n	8003eca <_fflush_r+0x32>
 8003ec4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ec6:	f000 f9e8 	bl	800429a <__retarget_lock_acquire_recursive>
 8003eca:	4628      	mov	r0, r5
 8003ecc:	4621      	mov	r1, r4
 8003ece:	f7ff ff5f 	bl	8003d90 <__sflush_r>
 8003ed2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ed4:	07da      	lsls	r2, r3, #31
 8003ed6:	4605      	mov	r5, r0
 8003ed8:	d4e4      	bmi.n	8003ea4 <_fflush_r+0xc>
 8003eda:	89a3      	ldrh	r3, [r4, #12]
 8003edc:	059b      	lsls	r3, r3, #22
 8003ede:	d4e1      	bmi.n	8003ea4 <_fflush_r+0xc>
 8003ee0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ee2:	f000 f9db 	bl	800429c <__retarget_lock_release_recursive>
 8003ee6:	e7dd      	b.n	8003ea4 <_fflush_r+0xc>

08003ee8 <fflush>:
 8003ee8:	4601      	mov	r1, r0
 8003eea:	b920      	cbnz	r0, 8003ef6 <fflush+0xe>
 8003eec:	4a04      	ldr	r2, [pc, #16]	@ (8003f00 <fflush+0x18>)
 8003eee:	4905      	ldr	r1, [pc, #20]	@ (8003f04 <fflush+0x1c>)
 8003ef0:	4805      	ldr	r0, [pc, #20]	@ (8003f08 <fflush+0x20>)
 8003ef2:	f000 b8b1 	b.w	8004058 <_fwalk_sglue>
 8003ef6:	4b05      	ldr	r3, [pc, #20]	@ (8003f0c <fflush+0x24>)
 8003ef8:	6818      	ldr	r0, [r3, #0]
 8003efa:	f7ff bfcd 	b.w	8003e98 <_fflush_r>
 8003efe:	bf00      	nop
 8003f00:	20000028 	.word	0x20000028
 8003f04:	08003e99 	.word	0x08003e99
 8003f08:	20000038 	.word	0x20000038
 8003f0c:	20000034 	.word	0x20000034

08003f10 <std>:
 8003f10:	2300      	movs	r3, #0
 8003f12:	b510      	push	{r4, lr}
 8003f14:	4604      	mov	r4, r0
 8003f16:	e9c0 3300 	strd	r3, r3, [r0]
 8003f1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f1e:	6083      	str	r3, [r0, #8]
 8003f20:	8181      	strh	r1, [r0, #12]
 8003f22:	6643      	str	r3, [r0, #100]	@ 0x64
 8003f24:	81c2      	strh	r2, [r0, #14]
 8003f26:	6183      	str	r3, [r0, #24]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	2208      	movs	r2, #8
 8003f2c:	305c      	adds	r0, #92	@ 0x5c
 8003f2e:	f000 f93a 	bl	80041a6 <memset>
 8003f32:	4b0d      	ldr	r3, [pc, #52]	@ (8003f68 <std+0x58>)
 8003f34:	6263      	str	r3, [r4, #36]	@ 0x24
 8003f36:	4b0d      	ldr	r3, [pc, #52]	@ (8003f6c <std+0x5c>)
 8003f38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003f70 <std+0x60>)
 8003f3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f74 <std+0x64>)
 8003f40:	6323      	str	r3, [r4, #48]	@ 0x30
 8003f42:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <std+0x68>)
 8003f44:	6224      	str	r4, [r4, #32]
 8003f46:	429c      	cmp	r4, r3
 8003f48:	d006      	beq.n	8003f58 <std+0x48>
 8003f4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003f4e:	4294      	cmp	r4, r2
 8003f50:	d002      	beq.n	8003f58 <std+0x48>
 8003f52:	33d0      	adds	r3, #208	@ 0xd0
 8003f54:	429c      	cmp	r4, r3
 8003f56:	d105      	bne.n	8003f64 <std+0x54>
 8003f58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003f5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f60:	f000 b99a 	b.w	8004298 <__retarget_lock_init_recursive>
 8003f64:	bd10      	pop	{r4, pc}
 8003f66:	bf00      	nop
 8003f68:	08004121 	.word	0x08004121
 8003f6c:	08004143 	.word	0x08004143
 8003f70:	0800417b 	.word	0x0800417b
 8003f74:	0800419f 	.word	0x0800419f
 8003f78:	20000920 	.word	0x20000920

08003f7c <stdio_exit_handler>:
 8003f7c:	4a02      	ldr	r2, [pc, #8]	@ (8003f88 <stdio_exit_handler+0xc>)
 8003f7e:	4903      	ldr	r1, [pc, #12]	@ (8003f8c <stdio_exit_handler+0x10>)
 8003f80:	4803      	ldr	r0, [pc, #12]	@ (8003f90 <stdio_exit_handler+0x14>)
 8003f82:	f000 b869 	b.w	8004058 <_fwalk_sglue>
 8003f86:	bf00      	nop
 8003f88:	20000028 	.word	0x20000028
 8003f8c:	08003e99 	.word	0x08003e99
 8003f90:	20000038 	.word	0x20000038

08003f94 <cleanup_stdio>:
 8003f94:	6841      	ldr	r1, [r0, #4]
 8003f96:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc8 <cleanup_stdio+0x34>)
 8003f98:	4299      	cmp	r1, r3
 8003f9a:	b510      	push	{r4, lr}
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	d001      	beq.n	8003fa4 <cleanup_stdio+0x10>
 8003fa0:	f7ff ff7a 	bl	8003e98 <_fflush_r>
 8003fa4:	68a1      	ldr	r1, [r4, #8]
 8003fa6:	4b09      	ldr	r3, [pc, #36]	@ (8003fcc <cleanup_stdio+0x38>)
 8003fa8:	4299      	cmp	r1, r3
 8003faa:	d002      	beq.n	8003fb2 <cleanup_stdio+0x1e>
 8003fac:	4620      	mov	r0, r4
 8003fae:	f7ff ff73 	bl	8003e98 <_fflush_r>
 8003fb2:	68e1      	ldr	r1, [r4, #12]
 8003fb4:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <cleanup_stdio+0x3c>)
 8003fb6:	4299      	cmp	r1, r3
 8003fb8:	d004      	beq.n	8003fc4 <cleanup_stdio+0x30>
 8003fba:	4620      	mov	r0, r4
 8003fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fc0:	f7ff bf6a 	b.w	8003e98 <_fflush_r>
 8003fc4:	bd10      	pop	{r4, pc}
 8003fc6:	bf00      	nop
 8003fc8:	20000920 	.word	0x20000920
 8003fcc:	20000988 	.word	0x20000988
 8003fd0:	200009f0 	.word	0x200009f0

08003fd4 <global_stdio_init.part.0>:
 8003fd4:	b510      	push	{r4, lr}
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004004 <global_stdio_init.part.0+0x30>)
 8003fd8:	4c0b      	ldr	r4, [pc, #44]	@ (8004008 <global_stdio_init.part.0+0x34>)
 8003fda:	4a0c      	ldr	r2, [pc, #48]	@ (800400c <global_stdio_init.part.0+0x38>)
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	4620      	mov	r0, r4
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2104      	movs	r1, #4
 8003fe4:	f7ff ff94 	bl	8003f10 <std>
 8003fe8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003fec:	2201      	movs	r2, #1
 8003fee:	2109      	movs	r1, #9
 8003ff0:	f7ff ff8e 	bl	8003f10 <std>
 8003ff4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003ff8:	2202      	movs	r2, #2
 8003ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ffe:	2112      	movs	r1, #18
 8004000:	f7ff bf86 	b.w	8003f10 <std>
 8004004:	20000a58 	.word	0x20000a58
 8004008:	20000920 	.word	0x20000920
 800400c:	08003f7d 	.word	0x08003f7d

08004010 <__sfp_lock_acquire>:
 8004010:	4801      	ldr	r0, [pc, #4]	@ (8004018 <__sfp_lock_acquire+0x8>)
 8004012:	f000 b942 	b.w	800429a <__retarget_lock_acquire_recursive>
 8004016:	bf00      	nop
 8004018:	20000a61 	.word	0x20000a61

0800401c <__sfp_lock_release>:
 800401c:	4801      	ldr	r0, [pc, #4]	@ (8004024 <__sfp_lock_release+0x8>)
 800401e:	f000 b93d 	b.w	800429c <__retarget_lock_release_recursive>
 8004022:	bf00      	nop
 8004024:	20000a61 	.word	0x20000a61

08004028 <__sinit>:
 8004028:	b510      	push	{r4, lr}
 800402a:	4604      	mov	r4, r0
 800402c:	f7ff fff0 	bl	8004010 <__sfp_lock_acquire>
 8004030:	6a23      	ldr	r3, [r4, #32]
 8004032:	b11b      	cbz	r3, 800403c <__sinit+0x14>
 8004034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004038:	f7ff bff0 	b.w	800401c <__sfp_lock_release>
 800403c:	4b04      	ldr	r3, [pc, #16]	@ (8004050 <__sinit+0x28>)
 800403e:	6223      	str	r3, [r4, #32]
 8004040:	4b04      	ldr	r3, [pc, #16]	@ (8004054 <__sinit+0x2c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1f5      	bne.n	8004034 <__sinit+0xc>
 8004048:	f7ff ffc4 	bl	8003fd4 <global_stdio_init.part.0>
 800404c:	e7f2      	b.n	8004034 <__sinit+0xc>
 800404e:	bf00      	nop
 8004050:	08003f95 	.word	0x08003f95
 8004054:	20000a58 	.word	0x20000a58

08004058 <_fwalk_sglue>:
 8004058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800405c:	4607      	mov	r7, r0
 800405e:	4688      	mov	r8, r1
 8004060:	4614      	mov	r4, r2
 8004062:	2600      	movs	r6, #0
 8004064:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004068:	f1b9 0901 	subs.w	r9, r9, #1
 800406c:	d505      	bpl.n	800407a <_fwalk_sglue+0x22>
 800406e:	6824      	ldr	r4, [r4, #0]
 8004070:	2c00      	cmp	r4, #0
 8004072:	d1f7      	bne.n	8004064 <_fwalk_sglue+0xc>
 8004074:	4630      	mov	r0, r6
 8004076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800407a:	89ab      	ldrh	r3, [r5, #12]
 800407c:	2b01      	cmp	r3, #1
 800407e:	d907      	bls.n	8004090 <_fwalk_sglue+0x38>
 8004080:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004084:	3301      	adds	r3, #1
 8004086:	d003      	beq.n	8004090 <_fwalk_sglue+0x38>
 8004088:	4629      	mov	r1, r5
 800408a:	4638      	mov	r0, r7
 800408c:	47c0      	blx	r8
 800408e:	4306      	orrs	r6, r0
 8004090:	3568      	adds	r5, #104	@ 0x68
 8004092:	e7e9      	b.n	8004068 <_fwalk_sglue+0x10>

08004094 <iprintf>:
 8004094:	b40f      	push	{r0, r1, r2, r3}
 8004096:	b507      	push	{r0, r1, r2, lr}
 8004098:	4906      	ldr	r1, [pc, #24]	@ (80040b4 <iprintf+0x20>)
 800409a:	ab04      	add	r3, sp, #16
 800409c:	6808      	ldr	r0, [r1, #0]
 800409e:	f853 2b04 	ldr.w	r2, [r3], #4
 80040a2:	6881      	ldr	r1, [r0, #8]
 80040a4:	9301      	str	r3, [sp, #4]
 80040a6:	f000 fb75 	bl	8004794 <_vfiprintf_r>
 80040aa:	b003      	add	sp, #12
 80040ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80040b0:	b004      	add	sp, #16
 80040b2:	4770      	bx	lr
 80040b4:	20000034 	.word	0x20000034

080040b8 <sniprintf>:
 80040b8:	b40c      	push	{r2, r3}
 80040ba:	b530      	push	{r4, r5, lr}
 80040bc:	4b17      	ldr	r3, [pc, #92]	@ (800411c <sniprintf+0x64>)
 80040be:	1e0c      	subs	r4, r1, #0
 80040c0:	681d      	ldr	r5, [r3, #0]
 80040c2:	b09d      	sub	sp, #116	@ 0x74
 80040c4:	da08      	bge.n	80040d8 <sniprintf+0x20>
 80040c6:	238b      	movs	r3, #139	@ 0x8b
 80040c8:	602b      	str	r3, [r5, #0]
 80040ca:	f04f 30ff 	mov.w	r0, #4294967295
 80040ce:	b01d      	add	sp, #116	@ 0x74
 80040d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040d4:	b002      	add	sp, #8
 80040d6:	4770      	bx	lr
 80040d8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80040dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80040e0:	bf14      	ite	ne
 80040e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80040e6:	4623      	moveq	r3, r4
 80040e8:	9304      	str	r3, [sp, #16]
 80040ea:	9307      	str	r3, [sp, #28]
 80040ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80040f0:	9002      	str	r0, [sp, #8]
 80040f2:	9006      	str	r0, [sp, #24]
 80040f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80040f8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80040fa:	ab21      	add	r3, sp, #132	@ 0x84
 80040fc:	a902      	add	r1, sp, #8
 80040fe:	4628      	mov	r0, r5
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	f000 fa21 	bl	8004548 <_svfiprintf_r>
 8004106:	1c43      	adds	r3, r0, #1
 8004108:	bfbc      	itt	lt
 800410a:	238b      	movlt	r3, #139	@ 0x8b
 800410c:	602b      	strlt	r3, [r5, #0]
 800410e:	2c00      	cmp	r4, #0
 8004110:	d0dd      	beq.n	80040ce <sniprintf+0x16>
 8004112:	9b02      	ldr	r3, [sp, #8]
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
 8004118:	e7d9      	b.n	80040ce <sniprintf+0x16>
 800411a:	bf00      	nop
 800411c:	20000034 	.word	0x20000034

08004120 <__sread>:
 8004120:	b510      	push	{r4, lr}
 8004122:	460c      	mov	r4, r1
 8004124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004128:	f000 f868 	bl	80041fc <_read_r>
 800412c:	2800      	cmp	r0, #0
 800412e:	bfab      	itete	ge
 8004130:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004132:	89a3      	ldrhlt	r3, [r4, #12]
 8004134:	181b      	addge	r3, r3, r0
 8004136:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800413a:	bfac      	ite	ge
 800413c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800413e:	81a3      	strhlt	r3, [r4, #12]
 8004140:	bd10      	pop	{r4, pc}

08004142 <__swrite>:
 8004142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004146:	461f      	mov	r7, r3
 8004148:	898b      	ldrh	r3, [r1, #12]
 800414a:	05db      	lsls	r3, r3, #23
 800414c:	4605      	mov	r5, r0
 800414e:	460c      	mov	r4, r1
 8004150:	4616      	mov	r6, r2
 8004152:	d505      	bpl.n	8004160 <__swrite+0x1e>
 8004154:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004158:	2302      	movs	r3, #2
 800415a:	2200      	movs	r2, #0
 800415c:	f000 f83c 	bl	80041d8 <_lseek_r>
 8004160:	89a3      	ldrh	r3, [r4, #12]
 8004162:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004166:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	4632      	mov	r2, r6
 800416e:	463b      	mov	r3, r7
 8004170:	4628      	mov	r0, r5
 8004172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004176:	f000 b853 	b.w	8004220 <_write_r>

0800417a <__sseek>:
 800417a:	b510      	push	{r4, lr}
 800417c:	460c      	mov	r4, r1
 800417e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004182:	f000 f829 	bl	80041d8 <_lseek_r>
 8004186:	1c43      	adds	r3, r0, #1
 8004188:	89a3      	ldrh	r3, [r4, #12]
 800418a:	bf15      	itete	ne
 800418c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800418e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004192:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004196:	81a3      	strheq	r3, [r4, #12]
 8004198:	bf18      	it	ne
 800419a:	81a3      	strhne	r3, [r4, #12]
 800419c:	bd10      	pop	{r4, pc}

0800419e <__sclose>:
 800419e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a2:	f000 b809 	b.w	80041b8 <_close_r>

080041a6 <memset>:
 80041a6:	4402      	add	r2, r0
 80041a8:	4603      	mov	r3, r0
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d100      	bne.n	80041b0 <memset+0xa>
 80041ae:	4770      	bx	lr
 80041b0:	f803 1b01 	strb.w	r1, [r3], #1
 80041b4:	e7f9      	b.n	80041aa <memset+0x4>
	...

080041b8 <_close_r>:
 80041b8:	b538      	push	{r3, r4, r5, lr}
 80041ba:	4d06      	ldr	r5, [pc, #24]	@ (80041d4 <_close_r+0x1c>)
 80041bc:	2300      	movs	r3, #0
 80041be:	4604      	mov	r4, r0
 80041c0:	4608      	mov	r0, r1
 80041c2:	602b      	str	r3, [r5, #0]
 80041c4:	f7ff fc20 	bl	8003a08 <_close>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	d102      	bne.n	80041d2 <_close_r+0x1a>
 80041cc:	682b      	ldr	r3, [r5, #0]
 80041ce:	b103      	cbz	r3, 80041d2 <_close_r+0x1a>
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	bd38      	pop	{r3, r4, r5, pc}
 80041d4:	20000a5c 	.word	0x20000a5c

080041d8 <_lseek_r>:
 80041d8:	b538      	push	{r3, r4, r5, lr}
 80041da:	4d07      	ldr	r5, [pc, #28]	@ (80041f8 <_lseek_r+0x20>)
 80041dc:	4604      	mov	r4, r0
 80041de:	4608      	mov	r0, r1
 80041e0:	4611      	mov	r1, r2
 80041e2:	2200      	movs	r2, #0
 80041e4:	602a      	str	r2, [r5, #0]
 80041e6:	461a      	mov	r2, r3
 80041e8:	f7ff fbcf 	bl	800398a <_lseek>
 80041ec:	1c43      	adds	r3, r0, #1
 80041ee:	d102      	bne.n	80041f6 <_lseek_r+0x1e>
 80041f0:	682b      	ldr	r3, [r5, #0]
 80041f2:	b103      	cbz	r3, 80041f6 <_lseek_r+0x1e>
 80041f4:	6023      	str	r3, [r4, #0]
 80041f6:	bd38      	pop	{r3, r4, r5, pc}
 80041f8:	20000a5c 	.word	0x20000a5c

080041fc <_read_r>:
 80041fc:	b538      	push	{r3, r4, r5, lr}
 80041fe:	4d07      	ldr	r5, [pc, #28]	@ (800421c <_read_r+0x20>)
 8004200:	4604      	mov	r4, r0
 8004202:	4608      	mov	r0, r1
 8004204:	4611      	mov	r1, r2
 8004206:	2200      	movs	r2, #0
 8004208:	602a      	str	r2, [r5, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	f7ff fb67 	bl	80038de <_read>
 8004210:	1c43      	adds	r3, r0, #1
 8004212:	d102      	bne.n	800421a <_read_r+0x1e>
 8004214:	682b      	ldr	r3, [r5, #0]
 8004216:	b103      	cbz	r3, 800421a <_read_r+0x1e>
 8004218:	6023      	str	r3, [r4, #0]
 800421a:	bd38      	pop	{r3, r4, r5, pc}
 800421c:	20000a5c 	.word	0x20000a5c

08004220 <_write_r>:
 8004220:	b538      	push	{r3, r4, r5, lr}
 8004222:	4d07      	ldr	r5, [pc, #28]	@ (8004240 <_write_r+0x20>)
 8004224:	4604      	mov	r4, r0
 8004226:	4608      	mov	r0, r1
 8004228:	4611      	mov	r1, r2
 800422a:	2200      	movs	r2, #0
 800422c:	602a      	str	r2, [r5, #0]
 800422e:	461a      	mov	r2, r3
 8004230:	f7ff fbbd 	bl	80039ae <_write>
 8004234:	1c43      	adds	r3, r0, #1
 8004236:	d102      	bne.n	800423e <_write_r+0x1e>
 8004238:	682b      	ldr	r3, [r5, #0]
 800423a:	b103      	cbz	r3, 800423e <_write_r+0x1e>
 800423c:	6023      	str	r3, [r4, #0]
 800423e:	bd38      	pop	{r3, r4, r5, pc}
 8004240:	20000a5c 	.word	0x20000a5c

08004244 <__errno>:
 8004244:	4b01      	ldr	r3, [pc, #4]	@ (800424c <__errno+0x8>)
 8004246:	6818      	ldr	r0, [r3, #0]
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20000034 	.word	0x20000034

08004250 <__libc_init_array>:
 8004250:	b570      	push	{r4, r5, r6, lr}
 8004252:	4d0d      	ldr	r5, [pc, #52]	@ (8004288 <__libc_init_array+0x38>)
 8004254:	4c0d      	ldr	r4, [pc, #52]	@ (800428c <__libc_init_array+0x3c>)
 8004256:	1b64      	subs	r4, r4, r5
 8004258:	10a4      	asrs	r4, r4, #2
 800425a:	2600      	movs	r6, #0
 800425c:	42a6      	cmp	r6, r4
 800425e:	d109      	bne.n	8004274 <__libc_init_array+0x24>
 8004260:	4d0b      	ldr	r5, [pc, #44]	@ (8004290 <__libc_init_array+0x40>)
 8004262:	4c0c      	ldr	r4, [pc, #48]	@ (8004294 <__libc_init_array+0x44>)
 8004264:	f000 fec2 	bl	8004fec <_init>
 8004268:	1b64      	subs	r4, r4, r5
 800426a:	10a4      	asrs	r4, r4, #2
 800426c:	2600      	movs	r6, #0
 800426e:	42a6      	cmp	r6, r4
 8004270:	d105      	bne.n	800427e <__libc_init_array+0x2e>
 8004272:	bd70      	pop	{r4, r5, r6, pc}
 8004274:	f855 3b04 	ldr.w	r3, [r5], #4
 8004278:	4798      	blx	r3
 800427a:	3601      	adds	r6, #1
 800427c:	e7ee      	b.n	800425c <__libc_init_array+0xc>
 800427e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004282:	4798      	blx	r3
 8004284:	3601      	adds	r6, #1
 8004286:	e7f2      	b.n	800426e <__libc_init_array+0x1e>
 8004288:	080052ac 	.word	0x080052ac
 800428c:	080052ac 	.word	0x080052ac
 8004290:	080052ac 	.word	0x080052ac
 8004294:	080052b0 	.word	0x080052b0

08004298 <__retarget_lock_init_recursive>:
 8004298:	4770      	bx	lr

0800429a <__retarget_lock_acquire_recursive>:
 800429a:	4770      	bx	lr

0800429c <__retarget_lock_release_recursive>:
 800429c:	4770      	bx	lr
	...

080042a0 <_free_r>:
 80042a0:	b538      	push	{r3, r4, r5, lr}
 80042a2:	4605      	mov	r5, r0
 80042a4:	2900      	cmp	r1, #0
 80042a6:	d041      	beq.n	800432c <_free_r+0x8c>
 80042a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042ac:	1f0c      	subs	r4, r1, #4
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bfb8      	it	lt
 80042b2:	18e4      	addlt	r4, r4, r3
 80042b4:	f000 f8e0 	bl	8004478 <__malloc_lock>
 80042b8:	4a1d      	ldr	r2, [pc, #116]	@ (8004330 <_free_r+0x90>)
 80042ba:	6813      	ldr	r3, [r2, #0]
 80042bc:	b933      	cbnz	r3, 80042cc <_free_r+0x2c>
 80042be:	6063      	str	r3, [r4, #4]
 80042c0:	6014      	str	r4, [r2, #0]
 80042c2:	4628      	mov	r0, r5
 80042c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042c8:	f000 b8dc 	b.w	8004484 <__malloc_unlock>
 80042cc:	42a3      	cmp	r3, r4
 80042ce:	d908      	bls.n	80042e2 <_free_r+0x42>
 80042d0:	6820      	ldr	r0, [r4, #0]
 80042d2:	1821      	adds	r1, r4, r0
 80042d4:	428b      	cmp	r3, r1
 80042d6:	bf01      	itttt	eq
 80042d8:	6819      	ldreq	r1, [r3, #0]
 80042da:	685b      	ldreq	r3, [r3, #4]
 80042dc:	1809      	addeq	r1, r1, r0
 80042de:	6021      	streq	r1, [r4, #0]
 80042e0:	e7ed      	b.n	80042be <_free_r+0x1e>
 80042e2:	461a      	mov	r2, r3
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	b10b      	cbz	r3, 80042ec <_free_r+0x4c>
 80042e8:	42a3      	cmp	r3, r4
 80042ea:	d9fa      	bls.n	80042e2 <_free_r+0x42>
 80042ec:	6811      	ldr	r1, [r2, #0]
 80042ee:	1850      	adds	r0, r2, r1
 80042f0:	42a0      	cmp	r0, r4
 80042f2:	d10b      	bne.n	800430c <_free_r+0x6c>
 80042f4:	6820      	ldr	r0, [r4, #0]
 80042f6:	4401      	add	r1, r0
 80042f8:	1850      	adds	r0, r2, r1
 80042fa:	4283      	cmp	r3, r0
 80042fc:	6011      	str	r1, [r2, #0]
 80042fe:	d1e0      	bne.n	80042c2 <_free_r+0x22>
 8004300:	6818      	ldr	r0, [r3, #0]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	6053      	str	r3, [r2, #4]
 8004306:	4408      	add	r0, r1
 8004308:	6010      	str	r0, [r2, #0]
 800430a:	e7da      	b.n	80042c2 <_free_r+0x22>
 800430c:	d902      	bls.n	8004314 <_free_r+0x74>
 800430e:	230c      	movs	r3, #12
 8004310:	602b      	str	r3, [r5, #0]
 8004312:	e7d6      	b.n	80042c2 <_free_r+0x22>
 8004314:	6820      	ldr	r0, [r4, #0]
 8004316:	1821      	adds	r1, r4, r0
 8004318:	428b      	cmp	r3, r1
 800431a:	bf04      	itt	eq
 800431c:	6819      	ldreq	r1, [r3, #0]
 800431e:	685b      	ldreq	r3, [r3, #4]
 8004320:	6063      	str	r3, [r4, #4]
 8004322:	bf04      	itt	eq
 8004324:	1809      	addeq	r1, r1, r0
 8004326:	6021      	streq	r1, [r4, #0]
 8004328:	6054      	str	r4, [r2, #4]
 800432a:	e7ca      	b.n	80042c2 <_free_r+0x22>
 800432c:	bd38      	pop	{r3, r4, r5, pc}
 800432e:	bf00      	nop
 8004330:	20000a68 	.word	0x20000a68

08004334 <sbrk_aligned>:
 8004334:	b570      	push	{r4, r5, r6, lr}
 8004336:	4e0f      	ldr	r6, [pc, #60]	@ (8004374 <sbrk_aligned+0x40>)
 8004338:	460c      	mov	r4, r1
 800433a:	6831      	ldr	r1, [r6, #0]
 800433c:	4605      	mov	r5, r0
 800433e:	b911      	cbnz	r1, 8004346 <sbrk_aligned+0x12>
 8004340:	f000 fd7c 	bl	8004e3c <_sbrk_r>
 8004344:	6030      	str	r0, [r6, #0]
 8004346:	4621      	mov	r1, r4
 8004348:	4628      	mov	r0, r5
 800434a:	f000 fd77 	bl	8004e3c <_sbrk_r>
 800434e:	1c43      	adds	r3, r0, #1
 8004350:	d103      	bne.n	800435a <sbrk_aligned+0x26>
 8004352:	f04f 34ff 	mov.w	r4, #4294967295
 8004356:	4620      	mov	r0, r4
 8004358:	bd70      	pop	{r4, r5, r6, pc}
 800435a:	1cc4      	adds	r4, r0, #3
 800435c:	f024 0403 	bic.w	r4, r4, #3
 8004360:	42a0      	cmp	r0, r4
 8004362:	d0f8      	beq.n	8004356 <sbrk_aligned+0x22>
 8004364:	1a21      	subs	r1, r4, r0
 8004366:	4628      	mov	r0, r5
 8004368:	f000 fd68 	bl	8004e3c <_sbrk_r>
 800436c:	3001      	adds	r0, #1
 800436e:	d1f2      	bne.n	8004356 <sbrk_aligned+0x22>
 8004370:	e7ef      	b.n	8004352 <sbrk_aligned+0x1e>
 8004372:	bf00      	nop
 8004374:	20000a64 	.word	0x20000a64

08004378 <_malloc_r>:
 8004378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800437c:	1ccd      	adds	r5, r1, #3
 800437e:	f025 0503 	bic.w	r5, r5, #3
 8004382:	3508      	adds	r5, #8
 8004384:	2d0c      	cmp	r5, #12
 8004386:	bf38      	it	cc
 8004388:	250c      	movcc	r5, #12
 800438a:	2d00      	cmp	r5, #0
 800438c:	4606      	mov	r6, r0
 800438e:	db01      	blt.n	8004394 <_malloc_r+0x1c>
 8004390:	42a9      	cmp	r1, r5
 8004392:	d904      	bls.n	800439e <_malloc_r+0x26>
 8004394:	230c      	movs	r3, #12
 8004396:	6033      	str	r3, [r6, #0]
 8004398:	2000      	movs	r0, #0
 800439a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800439e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004474 <_malloc_r+0xfc>
 80043a2:	f000 f869 	bl	8004478 <__malloc_lock>
 80043a6:	f8d8 3000 	ldr.w	r3, [r8]
 80043aa:	461c      	mov	r4, r3
 80043ac:	bb44      	cbnz	r4, 8004400 <_malloc_r+0x88>
 80043ae:	4629      	mov	r1, r5
 80043b0:	4630      	mov	r0, r6
 80043b2:	f7ff ffbf 	bl	8004334 <sbrk_aligned>
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	4604      	mov	r4, r0
 80043ba:	d158      	bne.n	800446e <_malloc_r+0xf6>
 80043bc:	f8d8 4000 	ldr.w	r4, [r8]
 80043c0:	4627      	mov	r7, r4
 80043c2:	2f00      	cmp	r7, #0
 80043c4:	d143      	bne.n	800444e <_malloc_r+0xd6>
 80043c6:	2c00      	cmp	r4, #0
 80043c8:	d04b      	beq.n	8004462 <_malloc_r+0xea>
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	4639      	mov	r1, r7
 80043ce:	4630      	mov	r0, r6
 80043d0:	eb04 0903 	add.w	r9, r4, r3
 80043d4:	f000 fd32 	bl	8004e3c <_sbrk_r>
 80043d8:	4581      	cmp	r9, r0
 80043da:	d142      	bne.n	8004462 <_malloc_r+0xea>
 80043dc:	6821      	ldr	r1, [r4, #0]
 80043de:	1a6d      	subs	r5, r5, r1
 80043e0:	4629      	mov	r1, r5
 80043e2:	4630      	mov	r0, r6
 80043e4:	f7ff ffa6 	bl	8004334 <sbrk_aligned>
 80043e8:	3001      	adds	r0, #1
 80043ea:	d03a      	beq.n	8004462 <_malloc_r+0xea>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	442b      	add	r3, r5
 80043f0:	6023      	str	r3, [r4, #0]
 80043f2:	f8d8 3000 	ldr.w	r3, [r8]
 80043f6:	685a      	ldr	r2, [r3, #4]
 80043f8:	bb62      	cbnz	r2, 8004454 <_malloc_r+0xdc>
 80043fa:	f8c8 7000 	str.w	r7, [r8]
 80043fe:	e00f      	b.n	8004420 <_malloc_r+0xa8>
 8004400:	6822      	ldr	r2, [r4, #0]
 8004402:	1b52      	subs	r2, r2, r5
 8004404:	d420      	bmi.n	8004448 <_malloc_r+0xd0>
 8004406:	2a0b      	cmp	r2, #11
 8004408:	d917      	bls.n	800443a <_malloc_r+0xc2>
 800440a:	1961      	adds	r1, r4, r5
 800440c:	42a3      	cmp	r3, r4
 800440e:	6025      	str	r5, [r4, #0]
 8004410:	bf18      	it	ne
 8004412:	6059      	strne	r1, [r3, #4]
 8004414:	6863      	ldr	r3, [r4, #4]
 8004416:	bf08      	it	eq
 8004418:	f8c8 1000 	streq.w	r1, [r8]
 800441c:	5162      	str	r2, [r4, r5]
 800441e:	604b      	str	r3, [r1, #4]
 8004420:	4630      	mov	r0, r6
 8004422:	f000 f82f 	bl	8004484 <__malloc_unlock>
 8004426:	f104 000b 	add.w	r0, r4, #11
 800442a:	1d23      	adds	r3, r4, #4
 800442c:	f020 0007 	bic.w	r0, r0, #7
 8004430:	1ac2      	subs	r2, r0, r3
 8004432:	bf1c      	itt	ne
 8004434:	1a1b      	subne	r3, r3, r0
 8004436:	50a3      	strne	r3, [r4, r2]
 8004438:	e7af      	b.n	800439a <_malloc_r+0x22>
 800443a:	6862      	ldr	r2, [r4, #4]
 800443c:	42a3      	cmp	r3, r4
 800443e:	bf0c      	ite	eq
 8004440:	f8c8 2000 	streq.w	r2, [r8]
 8004444:	605a      	strne	r2, [r3, #4]
 8004446:	e7eb      	b.n	8004420 <_malloc_r+0xa8>
 8004448:	4623      	mov	r3, r4
 800444a:	6864      	ldr	r4, [r4, #4]
 800444c:	e7ae      	b.n	80043ac <_malloc_r+0x34>
 800444e:	463c      	mov	r4, r7
 8004450:	687f      	ldr	r7, [r7, #4]
 8004452:	e7b6      	b.n	80043c2 <_malloc_r+0x4a>
 8004454:	461a      	mov	r2, r3
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	42a3      	cmp	r3, r4
 800445a:	d1fb      	bne.n	8004454 <_malloc_r+0xdc>
 800445c:	2300      	movs	r3, #0
 800445e:	6053      	str	r3, [r2, #4]
 8004460:	e7de      	b.n	8004420 <_malloc_r+0xa8>
 8004462:	230c      	movs	r3, #12
 8004464:	6033      	str	r3, [r6, #0]
 8004466:	4630      	mov	r0, r6
 8004468:	f000 f80c 	bl	8004484 <__malloc_unlock>
 800446c:	e794      	b.n	8004398 <_malloc_r+0x20>
 800446e:	6005      	str	r5, [r0, #0]
 8004470:	e7d6      	b.n	8004420 <_malloc_r+0xa8>
 8004472:	bf00      	nop
 8004474:	20000a68 	.word	0x20000a68

08004478 <__malloc_lock>:
 8004478:	4801      	ldr	r0, [pc, #4]	@ (8004480 <__malloc_lock+0x8>)
 800447a:	f7ff bf0e 	b.w	800429a <__retarget_lock_acquire_recursive>
 800447e:	bf00      	nop
 8004480:	20000a60 	.word	0x20000a60

08004484 <__malloc_unlock>:
 8004484:	4801      	ldr	r0, [pc, #4]	@ (800448c <__malloc_unlock+0x8>)
 8004486:	f7ff bf09 	b.w	800429c <__retarget_lock_release_recursive>
 800448a:	bf00      	nop
 800448c:	20000a60 	.word	0x20000a60

08004490 <__ssputs_r>:
 8004490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004494:	688e      	ldr	r6, [r1, #8]
 8004496:	461f      	mov	r7, r3
 8004498:	42be      	cmp	r6, r7
 800449a:	680b      	ldr	r3, [r1, #0]
 800449c:	4682      	mov	sl, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	4690      	mov	r8, r2
 80044a2:	d82d      	bhi.n	8004500 <__ssputs_r+0x70>
 80044a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044ac:	d026      	beq.n	80044fc <__ssputs_r+0x6c>
 80044ae:	6965      	ldr	r5, [r4, #20]
 80044b0:	6909      	ldr	r1, [r1, #16]
 80044b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80044b6:	eba3 0901 	sub.w	r9, r3, r1
 80044ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80044be:	1c7b      	adds	r3, r7, #1
 80044c0:	444b      	add	r3, r9
 80044c2:	106d      	asrs	r5, r5, #1
 80044c4:	429d      	cmp	r5, r3
 80044c6:	bf38      	it	cc
 80044c8:	461d      	movcc	r5, r3
 80044ca:	0553      	lsls	r3, r2, #21
 80044cc:	d527      	bpl.n	800451e <__ssputs_r+0x8e>
 80044ce:	4629      	mov	r1, r5
 80044d0:	f7ff ff52 	bl	8004378 <_malloc_r>
 80044d4:	4606      	mov	r6, r0
 80044d6:	b360      	cbz	r0, 8004532 <__ssputs_r+0xa2>
 80044d8:	6921      	ldr	r1, [r4, #16]
 80044da:	464a      	mov	r2, r9
 80044dc:	f000 fcbe 	bl	8004e5c <memcpy>
 80044e0:	89a3      	ldrh	r3, [r4, #12]
 80044e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80044e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ea:	81a3      	strh	r3, [r4, #12]
 80044ec:	6126      	str	r6, [r4, #16]
 80044ee:	6165      	str	r5, [r4, #20]
 80044f0:	444e      	add	r6, r9
 80044f2:	eba5 0509 	sub.w	r5, r5, r9
 80044f6:	6026      	str	r6, [r4, #0]
 80044f8:	60a5      	str	r5, [r4, #8]
 80044fa:	463e      	mov	r6, r7
 80044fc:	42be      	cmp	r6, r7
 80044fe:	d900      	bls.n	8004502 <__ssputs_r+0x72>
 8004500:	463e      	mov	r6, r7
 8004502:	6820      	ldr	r0, [r4, #0]
 8004504:	4632      	mov	r2, r6
 8004506:	4641      	mov	r1, r8
 8004508:	f000 fc7e 	bl	8004e08 <memmove>
 800450c:	68a3      	ldr	r3, [r4, #8]
 800450e:	1b9b      	subs	r3, r3, r6
 8004510:	60a3      	str	r3, [r4, #8]
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	4433      	add	r3, r6
 8004516:	6023      	str	r3, [r4, #0]
 8004518:	2000      	movs	r0, #0
 800451a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800451e:	462a      	mov	r2, r5
 8004520:	f000 fcaa 	bl	8004e78 <_realloc_r>
 8004524:	4606      	mov	r6, r0
 8004526:	2800      	cmp	r0, #0
 8004528:	d1e0      	bne.n	80044ec <__ssputs_r+0x5c>
 800452a:	6921      	ldr	r1, [r4, #16]
 800452c:	4650      	mov	r0, sl
 800452e:	f7ff feb7 	bl	80042a0 <_free_r>
 8004532:	230c      	movs	r3, #12
 8004534:	f8ca 3000 	str.w	r3, [sl]
 8004538:	89a3      	ldrh	r3, [r4, #12]
 800453a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800453e:	81a3      	strh	r3, [r4, #12]
 8004540:	f04f 30ff 	mov.w	r0, #4294967295
 8004544:	e7e9      	b.n	800451a <__ssputs_r+0x8a>
	...

08004548 <_svfiprintf_r>:
 8004548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800454c:	4698      	mov	r8, r3
 800454e:	898b      	ldrh	r3, [r1, #12]
 8004550:	061b      	lsls	r3, r3, #24
 8004552:	b09d      	sub	sp, #116	@ 0x74
 8004554:	4607      	mov	r7, r0
 8004556:	460d      	mov	r5, r1
 8004558:	4614      	mov	r4, r2
 800455a:	d510      	bpl.n	800457e <_svfiprintf_r+0x36>
 800455c:	690b      	ldr	r3, [r1, #16]
 800455e:	b973      	cbnz	r3, 800457e <_svfiprintf_r+0x36>
 8004560:	2140      	movs	r1, #64	@ 0x40
 8004562:	f7ff ff09 	bl	8004378 <_malloc_r>
 8004566:	6028      	str	r0, [r5, #0]
 8004568:	6128      	str	r0, [r5, #16]
 800456a:	b930      	cbnz	r0, 800457a <_svfiprintf_r+0x32>
 800456c:	230c      	movs	r3, #12
 800456e:	603b      	str	r3, [r7, #0]
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	b01d      	add	sp, #116	@ 0x74
 8004576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800457a:	2340      	movs	r3, #64	@ 0x40
 800457c:	616b      	str	r3, [r5, #20]
 800457e:	2300      	movs	r3, #0
 8004580:	9309      	str	r3, [sp, #36]	@ 0x24
 8004582:	2320      	movs	r3, #32
 8004584:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004588:	f8cd 800c 	str.w	r8, [sp, #12]
 800458c:	2330      	movs	r3, #48	@ 0x30
 800458e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800472c <_svfiprintf_r+0x1e4>
 8004592:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004596:	f04f 0901 	mov.w	r9, #1
 800459a:	4623      	mov	r3, r4
 800459c:	469a      	mov	sl, r3
 800459e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045a2:	b10a      	cbz	r2, 80045a8 <_svfiprintf_r+0x60>
 80045a4:	2a25      	cmp	r2, #37	@ 0x25
 80045a6:	d1f9      	bne.n	800459c <_svfiprintf_r+0x54>
 80045a8:	ebba 0b04 	subs.w	fp, sl, r4
 80045ac:	d00b      	beq.n	80045c6 <_svfiprintf_r+0x7e>
 80045ae:	465b      	mov	r3, fp
 80045b0:	4622      	mov	r2, r4
 80045b2:	4629      	mov	r1, r5
 80045b4:	4638      	mov	r0, r7
 80045b6:	f7ff ff6b 	bl	8004490 <__ssputs_r>
 80045ba:	3001      	adds	r0, #1
 80045bc:	f000 80a7 	beq.w	800470e <_svfiprintf_r+0x1c6>
 80045c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80045c2:	445a      	add	r2, fp
 80045c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80045c6:	f89a 3000 	ldrb.w	r3, [sl]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	f000 809f 	beq.w	800470e <_svfiprintf_r+0x1c6>
 80045d0:	2300      	movs	r3, #0
 80045d2:	f04f 32ff 	mov.w	r2, #4294967295
 80045d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045da:	f10a 0a01 	add.w	sl, sl, #1
 80045de:	9304      	str	r3, [sp, #16]
 80045e0:	9307      	str	r3, [sp, #28]
 80045e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80045e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80045e8:	4654      	mov	r4, sl
 80045ea:	2205      	movs	r2, #5
 80045ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045f0:	484e      	ldr	r0, [pc, #312]	@ (800472c <_svfiprintf_r+0x1e4>)
 80045f2:	f7fb fe05 	bl	8000200 <memchr>
 80045f6:	9a04      	ldr	r2, [sp, #16]
 80045f8:	b9d8      	cbnz	r0, 8004632 <_svfiprintf_r+0xea>
 80045fa:	06d0      	lsls	r0, r2, #27
 80045fc:	bf44      	itt	mi
 80045fe:	2320      	movmi	r3, #32
 8004600:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004604:	0711      	lsls	r1, r2, #28
 8004606:	bf44      	itt	mi
 8004608:	232b      	movmi	r3, #43	@ 0x2b
 800460a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800460e:	f89a 3000 	ldrb.w	r3, [sl]
 8004612:	2b2a      	cmp	r3, #42	@ 0x2a
 8004614:	d015      	beq.n	8004642 <_svfiprintf_r+0xfa>
 8004616:	9a07      	ldr	r2, [sp, #28]
 8004618:	4654      	mov	r4, sl
 800461a:	2000      	movs	r0, #0
 800461c:	f04f 0c0a 	mov.w	ip, #10
 8004620:	4621      	mov	r1, r4
 8004622:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004626:	3b30      	subs	r3, #48	@ 0x30
 8004628:	2b09      	cmp	r3, #9
 800462a:	d94b      	bls.n	80046c4 <_svfiprintf_r+0x17c>
 800462c:	b1b0      	cbz	r0, 800465c <_svfiprintf_r+0x114>
 800462e:	9207      	str	r2, [sp, #28]
 8004630:	e014      	b.n	800465c <_svfiprintf_r+0x114>
 8004632:	eba0 0308 	sub.w	r3, r0, r8
 8004636:	fa09 f303 	lsl.w	r3, r9, r3
 800463a:	4313      	orrs	r3, r2
 800463c:	9304      	str	r3, [sp, #16]
 800463e:	46a2      	mov	sl, r4
 8004640:	e7d2      	b.n	80045e8 <_svfiprintf_r+0xa0>
 8004642:	9b03      	ldr	r3, [sp, #12]
 8004644:	1d19      	adds	r1, r3, #4
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	9103      	str	r1, [sp, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	bfbb      	ittet	lt
 800464e:	425b      	neglt	r3, r3
 8004650:	f042 0202 	orrlt.w	r2, r2, #2
 8004654:	9307      	strge	r3, [sp, #28]
 8004656:	9307      	strlt	r3, [sp, #28]
 8004658:	bfb8      	it	lt
 800465a:	9204      	strlt	r2, [sp, #16]
 800465c:	7823      	ldrb	r3, [r4, #0]
 800465e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004660:	d10a      	bne.n	8004678 <_svfiprintf_r+0x130>
 8004662:	7863      	ldrb	r3, [r4, #1]
 8004664:	2b2a      	cmp	r3, #42	@ 0x2a
 8004666:	d132      	bne.n	80046ce <_svfiprintf_r+0x186>
 8004668:	9b03      	ldr	r3, [sp, #12]
 800466a:	1d1a      	adds	r2, r3, #4
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	9203      	str	r2, [sp, #12]
 8004670:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004674:	3402      	adds	r4, #2
 8004676:	9305      	str	r3, [sp, #20]
 8004678:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800473c <_svfiprintf_r+0x1f4>
 800467c:	7821      	ldrb	r1, [r4, #0]
 800467e:	2203      	movs	r2, #3
 8004680:	4650      	mov	r0, sl
 8004682:	f7fb fdbd 	bl	8000200 <memchr>
 8004686:	b138      	cbz	r0, 8004698 <_svfiprintf_r+0x150>
 8004688:	9b04      	ldr	r3, [sp, #16]
 800468a:	eba0 000a 	sub.w	r0, r0, sl
 800468e:	2240      	movs	r2, #64	@ 0x40
 8004690:	4082      	lsls	r2, r0
 8004692:	4313      	orrs	r3, r2
 8004694:	3401      	adds	r4, #1
 8004696:	9304      	str	r3, [sp, #16]
 8004698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800469c:	4824      	ldr	r0, [pc, #144]	@ (8004730 <_svfiprintf_r+0x1e8>)
 800469e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046a2:	2206      	movs	r2, #6
 80046a4:	f7fb fdac 	bl	8000200 <memchr>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d036      	beq.n	800471a <_svfiprintf_r+0x1d2>
 80046ac:	4b21      	ldr	r3, [pc, #132]	@ (8004734 <_svfiprintf_r+0x1ec>)
 80046ae:	bb1b      	cbnz	r3, 80046f8 <_svfiprintf_r+0x1b0>
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	3307      	adds	r3, #7
 80046b4:	f023 0307 	bic.w	r3, r3, #7
 80046b8:	3308      	adds	r3, #8
 80046ba:	9303      	str	r3, [sp, #12]
 80046bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80046be:	4433      	add	r3, r6
 80046c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80046c2:	e76a      	b.n	800459a <_svfiprintf_r+0x52>
 80046c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80046c8:	460c      	mov	r4, r1
 80046ca:	2001      	movs	r0, #1
 80046cc:	e7a8      	b.n	8004620 <_svfiprintf_r+0xd8>
 80046ce:	2300      	movs	r3, #0
 80046d0:	3401      	adds	r4, #1
 80046d2:	9305      	str	r3, [sp, #20]
 80046d4:	4619      	mov	r1, r3
 80046d6:	f04f 0c0a 	mov.w	ip, #10
 80046da:	4620      	mov	r0, r4
 80046dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046e0:	3a30      	subs	r2, #48	@ 0x30
 80046e2:	2a09      	cmp	r2, #9
 80046e4:	d903      	bls.n	80046ee <_svfiprintf_r+0x1a6>
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d0c6      	beq.n	8004678 <_svfiprintf_r+0x130>
 80046ea:	9105      	str	r1, [sp, #20]
 80046ec:	e7c4      	b.n	8004678 <_svfiprintf_r+0x130>
 80046ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80046f2:	4604      	mov	r4, r0
 80046f4:	2301      	movs	r3, #1
 80046f6:	e7f0      	b.n	80046da <_svfiprintf_r+0x192>
 80046f8:	ab03      	add	r3, sp, #12
 80046fa:	9300      	str	r3, [sp, #0]
 80046fc:	462a      	mov	r2, r5
 80046fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004738 <_svfiprintf_r+0x1f0>)
 8004700:	a904      	add	r1, sp, #16
 8004702:	4638      	mov	r0, r7
 8004704:	f3af 8000 	nop.w
 8004708:	1c42      	adds	r2, r0, #1
 800470a:	4606      	mov	r6, r0
 800470c:	d1d6      	bne.n	80046bc <_svfiprintf_r+0x174>
 800470e:	89ab      	ldrh	r3, [r5, #12]
 8004710:	065b      	lsls	r3, r3, #25
 8004712:	f53f af2d 	bmi.w	8004570 <_svfiprintf_r+0x28>
 8004716:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004718:	e72c      	b.n	8004574 <_svfiprintf_r+0x2c>
 800471a:	ab03      	add	r3, sp, #12
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	462a      	mov	r2, r5
 8004720:	4b05      	ldr	r3, [pc, #20]	@ (8004738 <_svfiprintf_r+0x1f0>)
 8004722:	a904      	add	r1, sp, #16
 8004724:	4638      	mov	r0, r7
 8004726:	f000 f9bb 	bl	8004aa0 <_printf_i>
 800472a:	e7ed      	b.n	8004708 <_svfiprintf_r+0x1c0>
 800472c:	0800526e 	.word	0x0800526e
 8004730:	08005278 	.word	0x08005278
 8004734:	00000000 	.word	0x00000000
 8004738:	08004491 	.word	0x08004491
 800473c:	08005274 	.word	0x08005274

08004740 <__sfputc_r>:
 8004740:	6893      	ldr	r3, [r2, #8]
 8004742:	3b01      	subs	r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	b410      	push	{r4}
 8004748:	6093      	str	r3, [r2, #8]
 800474a:	da08      	bge.n	800475e <__sfputc_r+0x1e>
 800474c:	6994      	ldr	r4, [r2, #24]
 800474e:	42a3      	cmp	r3, r4
 8004750:	db01      	blt.n	8004756 <__sfputc_r+0x16>
 8004752:	290a      	cmp	r1, #10
 8004754:	d103      	bne.n	800475e <__sfputc_r+0x1e>
 8004756:	f85d 4b04 	ldr.w	r4, [sp], #4
 800475a:	f000 bac1 	b.w	8004ce0 <__swbuf_r>
 800475e:	6813      	ldr	r3, [r2, #0]
 8004760:	1c58      	adds	r0, r3, #1
 8004762:	6010      	str	r0, [r2, #0]
 8004764:	7019      	strb	r1, [r3, #0]
 8004766:	4608      	mov	r0, r1
 8004768:	f85d 4b04 	ldr.w	r4, [sp], #4
 800476c:	4770      	bx	lr

0800476e <__sfputs_r>:
 800476e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004770:	4606      	mov	r6, r0
 8004772:	460f      	mov	r7, r1
 8004774:	4614      	mov	r4, r2
 8004776:	18d5      	adds	r5, r2, r3
 8004778:	42ac      	cmp	r4, r5
 800477a:	d101      	bne.n	8004780 <__sfputs_r+0x12>
 800477c:	2000      	movs	r0, #0
 800477e:	e007      	b.n	8004790 <__sfputs_r+0x22>
 8004780:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004784:	463a      	mov	r2, r7
 8004786:	4630      	mov	r0, r6
 8004788:	f7ff ffda 	bl	8004740 <__sfputc_r>
 800478c:	1c43      	adds	r3, r0, #1
 800478e:	d1f3      	bne.n	8004778 <__sfputs_r+0xa>
 8004790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004794 <_vfiprintf_r>:
 8004794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004798:	460d      	mov	r5, r1
 800479a:	b09d      	sub	sp, #116	@ 0x74
 800479c:	4614      	mov	r4, r2
 800479e:	4698      	mov	r8, r3
 80047a0:	4606      	mov	r6, r0
 80047a2:	b118      	cbz	r0, 80047ac <_vfiprintf_r+0x18>
 80047a4:	6a03      	ldr	r3, [r0, #32]
 80047a6:	b90b      	cbnz	r3, 80047ac <_vfiprintf_r+0x18>
 80047a8:	f7ff fc3e 	bl	8004028 <__sinit>
 80047ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047ae:	07d9      	lsls	r1, r3, #31
 80047b0:	d405      	bmi.n	80047be <_vfiprintf_r+0x2a>
 80047b2:	89ab      	ldrh	r3, [r5, #12]
 80047b4:	059a      	lsls	r2, r3, #22
 80047b6:	d402      	bmi.n	80047be <_vfiprintf_r+0x2a>
 80047b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047ba:	f7ff fd6e 	bl	800429a <__retarget_lock_acquire_recursive>
 80047be:	89ab      	ldrh	r3, [r5, #12]
 80047c0:	071b      	lsls	r3, r3, #28
 80047c2:	d501      	bpl.n	80047c8 <_vfiprintf_r+0x34>
 80047c4:	692b      	ldr	r3, [r5, #16]
 80047c6:	b99b      	cbnz	r3, 80047f0 <_vfiprintf_r+0x5c>
 80047c8:	4629      	mov	r1, r5
 80047ca:	4630      	mov	r0, r6
 80047cc:	f000 fac6 	bl	8004d5c <__swsetup_r>
 80047d0:	b170      	cbz	r0, 80047f0 <_vfiprintf_r+0x5c>
 80047d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80047d4:	07dc      	lsls	r4, r3, #31
 80047d6:	d504      	bpl.n	80047e2 <_vfiprintf_r+0x4e>
 80047d8:	f04f 30ff 	mov.w	r0, #4294967295
 80047dc:	b01d      	add	sp, #116	@ 0x74
 80047de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047e2:	89ab      	ldrh	r3, [r5, #12]
 80047e4:	0598      	lsls	r0, r3, #22
 80047e6:	d4f7      	bmi.n	80047d8 <_vfiprintf_r+0x44>
 80047e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047ea:	f7ff fd57 	bl	800429c <__retarget_lock_release_recursive>
 80047ee:	e7f3      	b.n	80047d8 <_vfiprintf_r+0x44>
 80047f0:	2300      	movs	r3, #0
 80047f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80047f4:	2320      	movs	r3, #32
 80047f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80047fe:	2330      	movs	r3, #48	@ 0x30
 8004800:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80049b0 <_vfiprintf_r+0x21c>
 8004804:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004808:	f04f 0901 	mov.w	r9, #1
 800480c:	4623      	mov	r3, r4
 800480e:	469a      	mov	sl, r3
 8004810:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004814:	b10a      	cbz	r2, 800481a <_vfiprintf_r+0x86>
 8004816:	2a25      	cmp	r2, #37	@ 0x25
 8004818:	d1f9      	bne.n	800480e <_vfiprintf_r+0x7a>
 800481a:	ebba 0b04 	subs.w	fp, sl, r4
 800481e:	d00b      	beq.n	8004838 <_vfiprintf_r+0xa4>
 8004820:	465b      	mov	r3, fp
 8004822:	4622      	mov	r2, r4
 8004824:	4629      	mov	r1, r5
 8004826:	4630      	mov	r0, r6
 8004828:	f7ff ffa1 	bl	800476e <__sfputs_r>
 800482c:	3001      	adds	r0, #1
 800482e:	f000 80a7 	beq.w	8004980 <_vfiprintf_r+0x1ec>
 8004832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004834:	445a      	add	r2, fp
 8004836:	9209      	str	r2, [sp, #36]	@ 0x24
 8004838:	f89a 3000 	ldrb.w	r3, [sl]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 809f 	beq.w	8004980 <_vfiprintf_r+0x1ec>
 8004842:	2300      	movs	r3, #0
 8004844:	f04f 32ff 	mov.w	r2, #4294967295
 8004848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800484c:	f10a 0a01 	add.w	sl, sl, #1
 8004850:	9304      	str	r3, [sp, #16]
 8004852:	9307      	str	r3, [sp, #28]
 8004854:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004858:	931a      	str	r3, [sp, #104]	@ 0x68
 800485a:	4654      	mov	r4, sl
 800485c:	2205      	movs	r2, #5
 800485e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004862:	4853      	ldr	r0, [pc, #332]	@ (80049b0 <_vfiprintf_r+0x21c>)
 8004864:	f7fb fccc 	bl	8000200 <memchr>
 8004868:	9a04      	ldr	r2, [sp, #16]
 800486a:	b9d8      	cbnz	r0, 80048a4 <_vfiprintf_r+0x110>
 800486c:	06d1      	lsls	r1, r2, #27
 800486e:	bf44      	itt	mi
 8004870:	2320      	movmi	r3, #32
 8004872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004876:	0713      	lsls	r3, r2, #28
 8004878:	bf44      	itt	mi
 800487a:	232b      	movmi	r3, #43	@ 0x2b
 800487c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004880:	f89a 3000 	ldrb.w	r3, [sl]
 8004884:	2b2a      	cmp	r3, #42	@ 0x2a
 8004886:	d015      	beq.n	80048b4 <_vfiprintf_r+0x120>
 8004888:	9a07      	ldr	r2, [sp, #28]
 800488a:	4654      	mov	r4, sl
 800488c:	2000      	movs	r0, #0
 800488e:	f04f 0c0a 	mov.w	ip, #10
 8004892:	4621      	mov	r1, r4
 8004894:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004898:	3b30      	subs	r3, #48	@ 0x30
 800489a:	2b09      	cmp	r3, #9
 800489c:	d94b      	bls.n	8004936 <_vfiprintf_r+0x1a2>
 800489e:	b1b0      	cbz	r0, 80048ce <_vfiprintf_r+0x13a>
 80048a0:	9207      	str	r2, [sp, #28]
 80048a2:	e014      	b.n	80048ce <_vfiprintf_r+0x13a>
 80048a4:	eba0 0308 	sub.w	r3, r0, r8
 80048a8:	fa09 f303 	lsl.w	r3, r9, r3
 80048ac:	4313      	orrs	r3, r2
 80048ae:	9304      	str	r3, [sp, #16]
 80048b0:	46a2      	mov	sl, r4
 80048b2:	e7d2      	b.n	800485a <_vfiprintf_r+0xc6>
 80048b4:	9b03      	ldr	r3, [sp, #12]
 80048b6:	1d19      	adds	r1, r3, #4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	9103      	str	r1, [sp, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	bfbb      	ittet	lt
 80048c0:	425b      	neglt	r3, r3
 80048c2:	f042 0202 	orrlt.w	r2, r2, #2
 80048c6:	9307      	strge	r3, [sp, #28]
 80048c8:	9307      	strlt	r3, [sp, #28]
 80048ca:	bfb8      	it	lt
 80048cc:	9204      	strlt	r2, [sp, #16]
 80048ce:	7823      	ldrb	r3, [r4, #0]
 80048d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80048d2:	d10a      	bne.n	80048ea <_vfiprintf_r+0x156>
 80048d4:	7863      	ldrb	r3, [r4, #1]
 80048d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80048d8:	d132      	bne.n	8004940 <_vfiprintf_r+0x1ac>
 80048da:	9b03      	ldr	r3, [sp, #12]
 80048dc:	1d1a      	adds	r2, r3, #4
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	9203      	str	r2, [sp, #12]
 80048e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048e6:	3402      	adds	r4, #2
 80048e8:	9305      	str	r3, [sp, #20]
 80048ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80049c0 <_vfiprintf_r+0x22c>
 80048ee:	7821      	ldrb	r1, [r4, #0]
 80048f0:	2203      	movs	r2, #3
 80048f2:	4650      	mov	r0, sl
 80048f4:	f7fb fc84 	bl	8000200 <memchr>
 80048f8:	b138      	cbz	r0, 800490a <_vfiprintf_r+0x176>
 80048fa:	9b04      	ldr	r3, [sp, #16]
 80048fc:	eba0 000a 	sub.w	r0, r0, sl
 8004900:	2240      	movs	r2, #64	@ 0x40
 8004902:	4082      	lsls	r2, r0
 8004904:	4313      	orrs	r3, r2
 8004906:	3401      	adds	r4, #1
 8004908:	9304      	str	r3, [sp, #16]
 800490a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800490e:	4829      	ldr	r0, [pc, #164]	@ (80049b4 <_vfiprintf_r+0x220>)
 8004910:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004914:	2206      	movs	r2, #6
 8004916:	f7fb fc73 	bl	8000200 <memchr>
 800491a:	2800      	cmp	r0, #0
 800491c:	d03f      	beq.n	800499e <_vfiprintf_r+0x20a>
 800491e:	4b26      	ldr	r3, [pc, #152]	@ (80049b8 <_vfiprintf_r+0x224>)
 8004920:	bb1b      	cbnz	r3, 800496a <_vfiprintf_r+0x1d6>
 8004922:	9b03      	ldr	r3, [sp, #12]
 8004924:	3307      	adds	r3, #7
 8004926:	f023 0307 	bic.w	r3, r3, #7
 800492a:	3308      	adds	r3, #8
 800492c:	9303      	str	r3, [sp, #12]
 800492e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004930:	443b      	add	r3, r7
 8004932:	9309      	str	r3, [sp, #36]	@ 0x24
 8004934:	e76a      	b.n	800480c <_vfiprintf_r+0x78>
 8004936:	fb0c 3202 	mla	r2, ip, r2, r3
 800493a:	460c      	mov	r4, r1
 800493c:	2001      	movs	r0, #1
 800493e:	e7a8      	b.n	8004892 <_vfiprintf_r+0xfe>
 8004940:	2300      	movs	r3, #0
 8004942:	3401      	adds	r4, #1
 8004944:	9305      	str	r3, [sp, #20]
 8004946:	4619      	mov	r1, r3
 8004948:	f04f 0c0a 	mov.w	ip, #10
 800494c:	4620      	mov	r0, r4
 800494e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004952:	3a30      	subs	r2, #48	@ 0x30
 8004954:	2a09      	cmp	r2, #9
 8004956:	d903      	bls.n	8004960 <_vfiprintf_r+0x1cc>
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0c6      	beq.n	80048ea <_vfiprintf_r+0x156>
 800495c:	9105      	str	r1, [sp, #20]
 800495e:	e7c4      	b.n	80048ea <_vfiprintf_r+0x156>
 8004960:	fb0c 2101 	mla	r1, ip, r1, r2
 8004964:	4604      	mov	r4, r0
 8004966:	2301      	movs	r3, #1
 8004968:	e7f0      	b.n	800494c <_vfiprintf_r+0x1b8>
 800496a:	ab03      	add	r3, sp, #12
 800496c:	9300      	str	r3, [sp, #0]
 800496e:	462a      	mov	r2, r5
 8004970:	4b12      	ldr	r3, [pc, #72]	@ (80049bc <_vfiprintf_r+0x228>)
 8004972:	a904      	add	r1, sp, #16
 8004974:	4630      	mov	r0, r6
 8004976:	f3af 8000 	nop.w
 800497a:	4607      	mov	r7, r0
 800497c:	1c78      	adds	r0, r7, #1
 800497e:	d1d6      	bne.n	800492e <_vfiprintf_r+0x19a>
 8004980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004982:	07d9      	lsls	r1, r3, #31
 8004984:	d405      	bmi.n	8004992 <_vfiprintf_r+0x1fe>
 8004986:	89ab      	ldrh	r3, [r5, #12]
 8004988:	059a      	lsls	r2, r3, #22
 800498a:	d402      	bmi.n	8004992 <_vfiprintf_r+0x1fe>
 800498c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800498e:	f7ff fc85 	bl	800429c <__retarget_lock_release_recursive>
 8004992:	89ab      	ldrh	r3, [r5, #12]
 8004994:	065b      	lsls	r3, r3, #25
 8004996:	f53f af1f 	bmi.w	80047d8 <_vfiprintf_r+0x44>
 800499a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800499c:	e71e      	b.n	80047dc <_vfiprintf_r+0x48>
 800499e:	ab03      	add	r3, sp, #12
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	462a      	mov	r2, r5
 80049a4:	4b05      	ldr	r3, [pc, #20]	@ (80049bc <_vfiprintf_r+0x228>)
 80049a6:	a904      	add	r1, sp, #16
 80049a8:	4630      	mov	r0, r6
 80049aa:	f000 f879 	bl	8004aa0 <_printf_i>
 80049ae:	e7e4      	b.n	800497a <_vfiprintf_r+0x1e6>
 80049b0:	0800526e 	.word	0x0800526e
 80049b4:	08005278 	.word	0x08005278
 80049b8:	00000000 	.word	0x00000000
 80049bc:	0800476f 	.word	0x0800476f
 80049c0:	08005274 	.word	0x08005274

080049c4 <_printf_common>:
 80049c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c8:	4616      	mov	r6, r2
 80049ca:	4698      	mov	r8, r3
 80049cc:	688a      	ldr	r2, [r1, #8]
 80049ce:	690b      	ldr	r3, [r1, #16]
 80049d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049d4:	4293      	cmp	r3, r2
 80049d6:	bfb8      	it	lt
 80049d8:	4613      	movlt	r3, r2
 80049da:	6033      	str	r3, [r6, #0]
 80049dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80049e0:	4607      	mov	r7, r0
 80049e2:	460c      	mov	r4, r1
 80049e4:	b10a      	cbz	r2, 80049ea <_printf_common+0x26>
 80049e6:	3301      	adds	r3, #1
 80049e8:	6033      	str	r3, [r6, #0]
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	0699      	lsls	r1, r3, #26
 80049ee:	bf42      	ittt	mi
 80049f0:	6833      	ldrmi	r3, [r6, #0]
 80049f2:	3302      	addmi	r3, #2
 80049f4:	6033      	strmi	r3, [r6, #0]
 80049f6:	6825      	ldr	r5, [r4, #0]
 80049f8:	f015 0506 	ands.w	r5, r5, #6
 80049fc:	d106      	bne.n	8004a0c <_printf_common+0x48>
 80049fe:	f104 0a19 	add.w	sl, r4, #25
 8004a02:	68e3      	ldr	r3, [r4, #12]
 8004a04:	6832      	ldr	r2, [r6, #0]
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	42ab      	cmp	r3, r5
 8004a0a:	dc26      	bgt.n	8004a5a <_printf_common+0x96>
 8004a0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004a10:	6822      	ldr	r2, [r4, #0]
 8004a12:	3b00      	subs	r3, #0
 8004a14:	bf18      	it	ne
 8004a16:	2301      	movne	r3, #1
 8004a18:	0692      	lsls	r2, r2, #26
 8004a1a:	d42b      	bmi.n	8004a74 <_printf_common+0xb0>
 8004a1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004a20:	4641      	mov	r1, r8
 8004a22:	4638      	mov	r0, r7
 8004a24:	47c8      	blx	r9
 8004a26:	3001      	adds	r0, #1
 8004a28:	d01e      	beq.n	8004a68 <_printf_common+0xa4>
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	6922      	ldr	r2, [r4, #16]
 8004a2e:	f003 0306 	and.w	r3, r3, #6
 8004a32:	2b04      	cmp	r3, #4
 8004a34:	bf02      	ittt	eq
 8004a36:	68e5      	ldreq	r5, [r4, #12]
 8004a38:	6833      	ldreq	r3, [r6, #0]
 8004a3a:	1aed      	subeq	r5, r5, r3
 8004a3c:	68a3      	ldr	r3, [r4, #8]
 8004a3e:	bf0c      	ite	eq
 8004a40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a44:	2500      	movne	r5, #0
 8004a46:	4293      	cmp	r3, r2
 8004a48:	bfc4      	itt	gt
 8004a4a:	1a9b      	subgt	r3, r3, r2
 8004a4c:	18ed      	addgt	r5, r5, r3
 8004a4e:	2600      	movs	r6, #0
 8004a50:	341a      	adds	r4, #26
 8004a52:	42b5      	cmp	r5, r6
 8004a54:	d11a      	bne.n	8004a8c <_printf_common+0xc8>
 8004a56:	2000      	movs	r0, #0
 8004a58:	e008      	b.n	8004a6c <_printf_common+0xa8>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	4652      	mov	r2, sl
 8004a5e:	4641      	mov	r1, r8
 8004a60:	4638      	mov	r0, r7
 8004a62:	47c8      	blx	r9
 8004a64:	3001      	adds	r0, #1
 8004a66:	d103      	bne.n	8004a70 <_printf_common+0xac>
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a70:	3501      	adds	r5, #1
 8004a72:	e7c6      	b.n	8004a02 <_printf_common+0x3e>
 8004a74:	18e1      	adds	r1, r4, r3
 8004a76:	1c5a      	adds	r2, r3, #1
 8004a78:	2030      	movs	r0, #48	@ 0x30
 8004a7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a7e:	4422      	add	r2, r4
 8004a80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a88:	3302      	adds	r3, #2
 8004a8a:	e7c7      	b.n	8004a1c <_printf_common+0x58>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	4622      	mov	r2, r4
 8004a90:	4641      	mov	r1, r8
 8004a92:	4638      	mov	r0, r7
 8004a94:	47c8      	blx	r9
 8004a96:	3001      	adds	r0, #1
 8004a98:	d0e6      	beq.n	8004a68 <_printf_common+0xa4>
 8004a9a:	3601      	adds	r6, #1
 8004a9c:	e7d9      	b.n	8004a52 <_printf_common+0x8e>
	...

08004aa0 <_printf_i>:
 8004aa0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa4:	7e0f      	ldrb	r7, [r1, #24]
 8004aa6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004aa8:	2f78      	cmp	r7, #120	@ 0x78
 8004aaa:	4691      	mov	r9, r2
 8004aac:	4680      	mov	r8, r0
 8004aae:	460c      	mov	r4, r1
 8004ab0:	469a      	mov	sl, r3
 8004ab2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004ab6:	d807      	bhi.n	8004ac8 <_printf_i+0x28>
 8004ab8:	2f62      	cmp	r7, #98	@ 0x62
 8004aba:	d80a      	bhi.n	8004ad2 <_printf_i+0x32>
 8004abc:	2f00      	cmp	r7, #0
 8004abe:	f000 80d2 	beq.w	8004c66 <_printf_i+0x1c6>
 8004ac2:	2f58      	cmp	r7, #88	@ 0x58
 8004ac4:	f000 80b9 	beq.w	8004c3a <_printf_i+0x19a>
 8004ac8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004acc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ad0:	e03a      	b.n	8004b48 <_printf_i+0xa8>
 8004ad2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004ad6:	2b15      	cmp	r3, #21
 8004ad8:	d8f6      	bhi.n	8004ac8 <_printf_i+0x28>
 8004ada:	a101      	add	r1, pc, #4	@ (adr r1, 8004ae0 <_printf_i+0x40>)
 8004adc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ae0:	08004b39 	.word	0x08004b39
 8004ae4:	08004b4d 	.word	0x08004b4d
 8004ae8:	08004ac9 	.word	0x08004ac9
 8004aec:	08004ac9 	.word	0x08004ac9
 8004af0:	08004ac9 	.word	0x08004ac9
 8004af4:	08004ac9 	.word	0x08004ac9
 8004af8:	08004b4d 	.word	0x08004b4d
 8004afc:	08004ac9 	.word	0x08004ac9
 8004b00:	08004ac9 	.word	0x08004ac9
 8004b04:	08004ac9 	.word	0x08004ac9
 8004b08:	08004ac9 	.word	0x08004ac9
 8004b0c:	08004c4d 	.word	0x08004c4d
 8004b10:	08004b77 	.word	0x08004b77
 8004b14:	08004c07 	.word	0x08004c07
 8004b18:	08004ac9 	.word	0x08004ac9
 8004b1c:	08004ac9 	.word	0x08004ac9
 8004b20:	08004c6f 	.word	0x08004c6f
 8004b24:	08004ac9 	.word	0x08004ac9
 8004b28:	08004b77 	.word	0x08004b77
 8004b2c:	08004ac9 	.word	0x08004ac9
 8004b30:	08004ac9 	.word	0x08004ac9
 8004b34:	08004c0f 	.word	0x08004c0f
 8004b38:	6833      	ldr	r3, [r6, #0]
 8004b3a:	1d1a      	adds	r2, r3, #4
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6032      	str	r2, [r6, #0]
 8004b40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e09d      	b.n	8004c88 <_printf_i+0x1e8>
 8004b4c:	6833      	ldr	r3, [r6, #0]
 8004b4e:	6820      	ldr	r0, [r4, #0]
 8004b50:	1d19      	adds	r1, r3, #4
 8004b52:	6031      	str	r1, [r6, #0]
 8004b54:	0606      	lsls	r6, r0, #24
 8004b56:	d501      	bpl.n	8004b5c <_printf_i+0xbc>
 8004b58:	681d      	ldr	r5, [r3, #0]
 8004b5a:	e003      	b.n	8004b64 <_printf_i+0xc4>
 8004b5c:	0645      	lsls	r5, r0, #25
 8004b5e:	d5fb      	bpl.n	8004b58 <_printf_i+0xb8>
 8004b60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b64:	2d00      	cmp	r5, #0
 8004b66:	da03      	bge.n	8004b70 <_printf_i+0xd0>
 8004b68:	232d      	movs	r3, #45	@ 0x2d
 8004b6a:	426d      	negs	r5, r5
 8004b6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b70:	4859      	ldr	r0, [pc, #356]	@ (8004cd8 <_printf_i+0x238>)
 8004b72:	230a      	movs	r3, #10
 8004b74:	e011      	b.n	8004b9a <_printf_i+0xfa>
 8004b76:	6821      	ldr	r1, [r4, #0]
 8004b78:	6833      	ldr	r3, [r6, #0]
 8004b7a:	0608      	lsls	r0, r1, #24
 8004b7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b80:	d402      	bmi.n	8004b88 <_printf_i+0xe8>
 8004b82:	0649      	lsls	r1, r1, #25
 8004b84:	bf48      	it	mi
 8004b86:	b2ad      	uxthmi	r5, r5
 8004b88:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b8a:	4853      	ldr	r0, [pc, #332]	@ (8004cd8 <_printf_i+0x238>)
 8004b8c:	6033      	str	r3, [r6, #0]
 8004b8e:	bf14      	ite	ne
 8004b90:	230a      	movne	r3, #10
 8004b92:	2308      	moveq	r3, #8
 8004b94:	2100      	movs	r1, #0
 8004b96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b9a:	6866      	ldr	r6, [r4, #4]
 8004b9c:	60a6      	str	r6, [r4, #8]
 8004b9e:	2e00      	cmp	r6, #0
 8004ba0:	bfa2      	ittt	ge
 8004ba2:	6821      	ldrge	r1, [r4, #0]
 8004ba4:	f021 0104 	bicge.w	r1, r1, #4
 8004ba8:	6021      	strge	r1, [r4, #0]
 8004baa:	b90d      	cbnz	r5, 8004bb0 <_printf_i+0x110>
 8004bac:	2e00      	cmp	r6, #0
 8004bae:	d04b      	beq.n	8004c48 <_printf_i+0x1a8>
 8004bb0:	4616      	mov	r6, r2
 8004bb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8004bb6:	fb03 5711 	mls	r7, r3, r1, r5
 8004bba:	5dc7      	ldrb	r7, [r0, r7]
 8004bbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004bc0:	462f      	mov	r7, r5
 8004bc2:	42bb      	cmp	r3, r7
 8004bc4:	460d      	mov	r5, r1
 8004bc6:	d9f4      	bls.n	8004bb2 <_printf_i+0x112>
 8004bc8:	2b08      	cmp	r3, #8
 8004bca:	d10b      	bne.n	8004be4 <_printf_i+0x144>
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	07df      	lsls	r7, r3, #31
 8004bd0:	d508      	bpl.n	8004be4 <_printf_i+0x144>
 8004bd2:	6923      	ldr	r3, [r4, #16]
 8004bd4:	6861      	ldr	r1, [r4, #4]
 8004bd6:	4299      	cmp	r1, r3
 8004bd8:	bfde      	ittt	le
 8004bda:	2330      	movle	r3, #48	@ 0x30
 8004bdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004be0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004be4:	1b92      	subs	r2, r2, r6
 8004be6:	6122      	str	r2, [r4, #16]
 8004be8:	f8cd a000 	str.w	sl, [sp]
 8004bec:	464b      	mov	r3, r9
 8004bee:	aa03      	add	r2, sp, #12
 8004bf0:	4621      	mov	r1, r4
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	f7ff fee6 	bl	80049c4 <_printf_common>
 8004bf8:	3001      	adds	r0, #1
 8004bfa:	d14a      	bne.n	8004c92 <_printf_i+0x1f2>
 8004bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8004c00:	b004      	add	sp, #16
 8004c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c06:	6823      	ldr	r3, [r4, #0]
 8004c08:	f043 0320 	orr.w	r3, r3, #32
 8004c0c:	6023      	str	r3, [r4, #0]
 8004c0e:	4833      	ldr	r0, [pc, #204]	@ (8004cdc <_printf_i+0x23c>)
 8004c10:	2778      	movs	r7, #120	@ 0x78
 8004c12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004c16:	6823      	ldr	r3, [r4, #0]
 8004c18:	6831      	ldr	r1, [r6, #0]
 8004c1a:	061f      	lsls	r7, r3, #24
 8004c1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004c20:	d402      	bmi.n	8004c28 <_printf_i+0x188>
 8004c22:	065f      	lsls	r7, r3, #25
 8004c24:	bf48      	it	mi
 8004c26:	b2ad      	uxthmi	r5, r5
 8004c28:	6031      	str	r1, [r6, #0]
 8004c2a:	07d9      	lsls	r1, r3, #31
 8004c2c:	bf44      	itt	mi
 8004c2e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c32:	6023      	strmi	r3, [r4, #0]
 8004c34:	b11d      	cbz	r5, 8004c3e <_printf_i+0x19e>
 8004c36:	2310      	movs	r3, #16
 8004c38:	e7ac      	b.n	8004b94 <_printf_i+0xf4>
 8004c3a:	4827      	ldr	r0, [pc, #156]	@ (8004cd8 <_printf_i+0x238>)
 8004c3c:	e7e9      	b.n	8004c12 <_printf_i+0x172>
 8004c3e:	6823      	ldr	r3, [r4, #0]
 8004c40:	f023 0320 	bic.w	r3, r3, #32
 8004c44:	6023      	str	r3, [r4, #0]
 8004c46:	e7f6      	b.n	8004c36 <_printf_i+0x196>
 8004c48:	4616      	mov	r6, r2
 8004c4a:	e7bd      	b.n	8004bc8 <_printf_i+0x128>
 8004c4c:	6833      	ldr	r3, [r6, #0]
 8004c4e:	6825      	ldr	r5, [r4, #0]
 8004c50:	6961      	ldr	r1, [r4, #20]
 8004c52:	1d18      	adds	r0, r3, #4
 8004c54:	6030      	str	r0, [r6, #0]
 8004c56:	062e      	lsls	r6, r5, #24
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	d501      	bpl.n	8004c60 <_printf_i+0x1c0>
 8004c5c:	6019      	str	r1, [r3, #0]
 8004c5e:	e002      	b.n	8004c66 <_printf_i+0x1c6>
 8004c60:	0668      	lsls	r0, r5, #25
 8004c62:	d5fb      	bpl.n	8004c5c <_printf_i+0x1bc>
 8004c64:	8019      	strh	r1, [r3, #0]
 8004c66:	2300      	movs	r3, #0
 8004c68:	6123      	str	r3, [r4, #16]
 8004c6a:	4616      	mov	r6, r2
 8004c6c:	e7bc      	b.n	8004be8 <_printf_i+0x148>
 8004c6e:	6833      	ldr	r3, [r6, #0]
 8004c70:	1d1a      	adds	r2, r3, #4
 8004c72:	6032      	str	r2, [r6, #0]
 8004c74:	681e      	ldr	r6, [r3, #0]
 8004c76:	6862      	ldr	r2, [r4, #4]
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4630      	mov	r0, r6
 8004c7c:	f7fb fac0 	bl	8000200 <memchr>
 8004c80:	b108      	cbz	r0, 8004c86 <_printf_i+0x1e6>
 8004c82:	1b80      	subs	r0, r0, r6
 8004c84:	6060      	str	r0, [r4, #4]
 8004c86:	6863      	ldr	r3, [r4, #4]
 8004c88:	6123      	str	r3, [r4, #16]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c90:	e7aa      	b.n	8004be8 <_printf_i+0x148>
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	4632      	mov	r2, r6
 8004c96:	4649      	mov	r1, r9
 8004c98:	4640      	mov	r0, r8
 8004c9a:	47d0      	blx	sl
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d0ad      	beq.n	8004bfc <_printf_i+0x15c>
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	079b      	lsls	r3, r3, #30
 8004ca4:	d413      	bmi.n	8004cce <_printf_i+0x22e>
 8004ca6:	68e0      	ldr	r0, [r4, #12]
 8004ca8:	9b03      	ldr	r3, [sp, #12]
 8004caa:	4298      	cmp	r0, r3
 8004cac:	bfb8      	it	lt
 8004cae:	4618      	movlt	r0, r3
 8004cb0:	e7a6      	b.n	8004c00 <_printf_i+0x160>
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	4632      	mov	r2, r6
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	4640      	mov	r0, r8
 8004cba:	47d0      	blx	sl
 8004cbc:	3001      	adds	r0, #1
 8004cbe:	d09d      	beq.n	8004bfc <_printf_i+0x15c>
 8004cc0:	3501      	adds	r5, #1
 8004cc2:	68e3      	ldr	r3, [r4, #12]
 8004cc4:	9903      	ldr	r1, [sp, #12]
 8004cc6:	1a5b      	subs	r3, r3, r1
 8004cc8:	42ab      	cmp	r3, r5
 8004cca:	dcf2      	bgt.n	8004cb2 <_printf_i+0x212>
 8004ccc:	e7eb      	b.n	8004ca6 <_printf_i+0x206>
 8004cce:	2500      	movs	r5, #0
 8004cd0:	f104 0619 	add.w	r6, r4, #25
 8004cd4:	e7f5      	b.n	8004cc2 <_printf_i+0x222>
 8004cd6:	bf00      	nop
 8004cd8:	0800527f 	.word	0x0800527f
 8004cdc:	08005290 	.word	0x08005290

08004ce0 <__swbuf_r>:
 8004ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ce2:	460e      	mov	r6, r1
 8004ce4:	4614      	mov	r4, r2
 8004ce6:	4605      	mov	r5, r0
 8004ce8:	b118      	cbz	r0, 8004cf2 <__swbuf_r+0x12>
 8004cea:	6a03      	ldr	r3, [r0, #32]
 8004cec:	b90b      	cbnz	r3, 8004cf2 <__swbuf_r+0x12>
 8004cee:	f7ff f99b 	bl	8004028 <__sinit>
 8004cf2:	69a3      	ldr	r3, [r4, #24]
 8004cf4:	60a3      	str	r3, [r4, #8]
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	071a      	lsls	r2, r3, #28
 8004cfa:	d501      	bpl.n	8004d00 <__swbuf_r+0x20>
 8004cfc:	6923      	ldr	r3, [r4, #16]
 8004cfe:	b943      	cbnz	r3, 8004d12 <__swbuf_r+0x32>
 8004d00:	4621      	mov	r1, r4
 8004d02:	4628      	mov	r0, r5
 8004d04:	f000 f82a 	bl	8004d5c <__swsetup_r>
 8004d08:	b118      	cbz	r0, 8004d12 <__swbuf_r+0x32>
 8004d0a:	f04f 37ff 	mov.w	r7, #4294967295
 8004d0e:	4638      	mov	r0, r7
 8004d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d12:	6823      	ldr	r3, [r4, #0]
 8004d14:	6922      	ldr	r2, [r4, #16]
 8004d16:	1a98      	subs	r0, r3, r2
 8004d18:	6963      	ldr	r3, [r4, #20]
 8004d1a:	b2f6      	uxtb	r6, r6
 8004d1c:	4283      	cmp	r3, r0
 8004d1e:	4637      	mov	r7, r6
 8004d20:	dc05      	bgt.n	8004d2e <__swbuf_r+0x4e>
 8004d22:	4621      	mov	r1, r4
 8004d24:	4628      	mov	r0, r5
 8004d26:	f7ff f8b7 	bl	8003e98 <_fflush_r>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d1ed      	bne.n	8004d0a <__swbuf_r+0x2a>
 8004d2e:	68a3      	ldr	r3, [r4, #8]
 8004d30:	3b01      	subs	r3, #1
 8004d32:	60a3      	str	r3, [r4, #8]
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	6022      	str	r2, [r4, #0]
 8004d3a:	701e      	strb	r6, [r3, #0]
 8004d3c:	6962      	ldr	r2, [r4, #20]
 8004d3e:	1c43      	adds	r3, r0, #1
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d004      	beq.n	8004d4e <__swbuf_r+0x6e>
 8004d44:	89a3      	ldrh	r3, [r4, #12]
 8004d46:	07db      	lsls	r3, r3, #31
 8004d48:	d5e1      	bpl.n	8004d0e <__swbuf_r+0x2e>
 8004d4a:	2e0a      	cmp	r6, #10
 8004d4c:	d1df      	bne.n	8004d0e <__swbuf_r+0x2e>
 8004d4e:	4621      	mov	r1, r4
 8004d50:	4628      	mov	r0, r5
 8004d52:	f7ff f8a1 	bl	8003e98 <_fflush_r>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d0d9      	beq.n	8004d0e <__swbuf_r+0x2e>
 8004d5a:	e7d6      	b.n	8004d0a <__swbuf_r+0x2a>

08004d5c <__swsetup_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4b29      	ldr	r3, [pc, #164]	@ (8004e04 <__swsetup_r+0xa8>)
 8004d60:	4605      	mov	r5, r0
 8004d62:	6818      	ldr	r0, [r3, #0]
 8004d64:	460c      	mov	r4, r1
 8004d66:	b118      	cbz	r0, 8004d70 <__swsetup_r+0x14>
 8004d68:	6a03      	ldr	r3, [r0, #32]
 8004d6a:	b90b      	cbnz	r3, 8004d70 <__swsetup_r+0x14>
 8004d6c:	f7ff f95c 	bl	8004028 <__sinit>
 8004d70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d74:	0719      	lsls	r1, r3, #28
 8004d76:	d422      	bmi.n	8004dbe <__swsetup_r+0x62>
 8004d78:	06da      	lsls	r2, r3, #27
 8004d7a:	d407      	bmi.n	8004d8c <__swsetup_r+0x30>
 8004d7c:	2209      	movs	r2, #9
 8004d7e:	602a      	str	r2, [r5, #0]
 8004d80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d84:	81a3      	strh	r3, [r4, #12]
 8004d86:	f04f 30ff 	mov.w	r0, #4294967295
 8004d8a:	e033      	b.n	8004df4 <__swsetup_r+0x98>
 8004d8c:	0758      	lsls	r0, r3, #29
 8004d8e:	d512      	bpl.n	8004db6 <__swsetup_r+0x5a>
 8004d90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d92:	b141      	cbz	r1, 8004da6 <__swsetup_r+0x4a>
 8004d94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d98:	4299      	cmp	r1, r3
 8004d9a:	d002      	beq.n	8004da2 <__swsetup_r+0x46>
 8004d9c:	4628      	mov	r0, r5
 8004d9e:	f7ff fa7f 	bl	80042a0 <_free_r>
 8004da2:	2300      	movs	r3, #0
 8004da4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004da6:	89a3      	ldrh	r3, [r4, #12]
 8004da8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004dac:	81a3      	strh	r3, [r4, #12]
 8004dae:	2300      	movs	r3, #0
 8004db0:	6063      	str	r3, [r4, #4]
 8004db2:	6923      	ldr	r3, [r4, #16]
 8004db4:	6023      	str	r3, [r4, #0]
 8004db6:	89a3      	ldrh	r3, [r4, #12]
 8004db8:	f043 0308 	orr.w	r3, r3, #8
 8004dbc:	81a3      	strh	r3, [r4, #12]
 8004dbe:	6923      	ldr	r3, [r4, #16]
 8004dc0:	b94b      	cbnz	r3, 8004dd6 <__swsetup_r+0x7a>
 8004dc2:	89a3      	ldrh	r3, [r4, #12]
 8004dc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004dc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004dcc:	d003      	beq.n	8004dd6 <__swsetup_r+0x7a>
 8004dce:	4621      	mov	r1, r4
 8004dd0:	4628      	mov	r0, r5
 8004dd2:	f000 f8a5 	bl	8004f20 <__smakebuf_r>
 8004dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dda:	f013 0201 	ands.w	r2, r3, #1
 8004dde:	d00a      	beq.n	8004df6 <__swsetup_r+0x9a>
 8004de0:	2200      	movs	r2, #0
 8004de2:	60a2      	str	r2, [r4, #8]
 8004de4:	6962      	ldr	r2, [r4, #20]
 8004de6:	4252      	negs	r2, r2
 8004de8:	61a2      	str	r2, [r4, #24]
 8004dea:	6922      	ldr	r2, [r4, #16]
 8004dec:	b942      	cbnz	r2, 8004e00 <__swsetup_r+0xa4>
 8004dee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004df2:	d1c5      	bne.n	8004d80 <__swsetup_r+0x24>
 8004df4:	bd38      	pop	{r3, r4, r5, pc}
 8004df6:	0799      	lsls	r1, r3, #30
 8004df8:	bf58      	it	pl
 8004dfa:	6962      	ldrpl	r2, [r4, #20]
 8004dfc:	60a2      	str	r2, [r4, #8]
 8004dfe:	e7f4      	b.n	8004dea <__swsetup_r+0x8e>
 8004e00:	2000      	movs	r0, #0
 8004e02:	e7f7      	b.n	8004df4 <__swsetup_r+0x98>
 8004e04:	20000034 	.word	0x20000034

08004e08 <memmove>:
 8004e08:	4288      	cmp	r0, r1
 8004e0a:	b510      	push	{r4, lr}
 8004e0c:	eb01 0402 	add.w	r4, r1, r2
 8004e10:	d902      	bls.n	8004e18 <memmove+0x10>
 8004e12:	4284      	cmp	r4, r0
 8004e14:	4623      	mov	r3, r4
 8004e16:	d807      	bhi.n	8004e28 <memmove+0x20>
 8004e18:	1e43      	subs	r3, r0, #1
 8004e1a:	42a1      	cmp	r1, r4
 8004e1c:	d008      	beq.n	8004e30 <memmove+0x28>
 8004e1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e26:	e7f8      	b.n	8004e1a <memmove+0x12>
 8004e28:	4402      	add	r2, r0
 8004e2a:	4601      	mov	r1, r0
 8004e2c:	428a      	cmp	r2, r1
 8004e2e:	d100      	bne.n	8004e32 <memmove+0x2a>
 8004e30:	bd10      	pop	{r4, pc}
 8004e32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e3a:	e7f7      	b.n	8004e2c <memmove+0x24>

08004e3c <_sbrk_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4d06      	ldr	r5, [pc, #24]	@ (8004e58 <_sbrk_r+0x1c>)
 8004e40:	2300      	movs	r3, #0
 8004e42:	4604      	mov	r4, r0
 8004e44:	4608      	mov	r0, r1
 8004e46:	602b      	str	r3, [r5, #0]
 8004e48:	f7fb ff3e 	bl	8000cc8 <_sbrk>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d102      	bne.n	8004e56 <_sbrk_r+0x1a>
 8004e50:	682b      	ldr	r3, [r5, #0]
 8004e52:	b103      	cbz	r3, 8004e56 <_sbrk_r+0x1a>
 8004e54:	6023      	str	r3, [r4, #0]
 8004e56:	bd38      	pop	{r3, r4, r5, pc}
 8004e58:	20000a5c 	.word	0x20000a5c

08004e5c <memcpy>:
 8004e5c:	440a      	add	r2, r1
 8004e5e:	4291      	cmp	r1, r2
 8004e60:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e64:	d100      	bne.n	8004e68 <memcpy+0xc>
 8004e66:	4770      	bx	lr
 8004e68:	b510      	push	{r4, lr}
 8004e6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e72:	4291      	cmp	r1, r2
 8004e74:	d1f9      	bne.n	8004e6a <memcpy+0xe>
 8004e76:	bd10      	pop	{r4, pc}

08004e78 <_realloc_r>:
 8004e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e7c:	4680      	mov	r8, r0
 8004e7e:	4615      	mov	r5, r2
 8004e80:	460c      	mov	r4, r1
 8004e82:	b921      	cbnz	r1, 8004e8e <_realloc_r+0x16>
 8004e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e88:	4611      	mov	r1, r2
 8004e8a:	f7ff ba75 	b.w	8004378 <_malloc_r>
 8004e8e:	b92a      	cbnz	r2, 8004e9c <_realloc_r+0x24>
 8004e90:	f7ff fa06 	bl	80042a0 <_free_r>
 8004e94:	2400      	movs	r4, #0
 8004e96:	4620      	mov	r0, r4
 8004e98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e9c:	f000 f89e 	bl	8004fdc <_malloc_usable_size_r>
 8004ea0:	4285      	cmp	r5, r0
 8004ea2:	4606      	mov	r6, r0
 8004ea4:	d802      	bhi.n	8004eac <_realloc_r+0x34>
 8004ea6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004eaa:	d8f4      	bhi.n	8004e96 <_realloc_r+0x1e>
 8004eac:	4629      	mov	r1, r5
 8004eae:	4640      	mov	r0, r8
 8004eb0:	f7ff fa62 	bl	8004378 <_malloc_r>
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d0ec      	beq.n	8004e94 <_realloc_r+0x1c>
 8004eba:	42b5      	cmp	r5, r6
 8004ebc:	462a      	mov	r2, r5
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	bf28      	it	cs
 8004ec2:	4632      	movcs	r2, r6
 8004ec4:	f7ff ffca 	bl	8004e5c <memcpy>
 8004ec8:	4621      	mov	r1, r4
 8004eca:	4640      	mov	r0, r8
 8004ecc:	f7ff f9e8 	bl	80042a0 <_free_r>
 8004ed0:	463c      	mov	r4, r7
 8004ed2:	e7e0      	b.n	8004e96 <_realloc_r+0x1e>

08004ed4 <__swhatbuf_r>:
 8004ed4:	b570      	push	{r4, r5, r6, lr}
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004edc:	2900      	cmp	r1, #0
 8004ede:	b096      	sub	sp, #88	@ 0x58
 8004ee0:	4615      	mov	r5, r2
 8004ee2:	461e      	mov	r6, r3
 8004ee4:	da0d      	bge.n	8004f02 <__swhatbuf_r+0x2e>
 8004ee6:	89a3      	ldrh	r3, [r4, #12]
 8004ee8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	bf14      	ite	ne
 8004ef2:	2340      	movne	r3, #64	@ 0x40
 8004ef4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004ef8:	2000      	movs	r0, #0
 8004efa:	6031      	str	r1, [r6, #0]
 8004efc:	602b      	str	r3, [r5, #0]
 8004efe:	b016      	add	sp, #88	@ 0x58
 8004f00:	bd70      	pop	{r4, r5, r6, pc}
 8004f02:	466a      	mov	r2, sp
 8004f04:	f000 f848 	bl	8004f98 <_fstat_r>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	dbec      	blt.n	8004ee6 <__swhatbuf_r+0x12>
 8004f0c:	9901      	ldr	r1, [sp, #4]
 8004f0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f16:	4259      	negs	r1, r3
 8004f18:	4159      	adcs	r1, r3
 8004f1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f1e:	e7eb      	b.n	8004ef8 <__swhatbuf_r+0x24>

08004f20 <__smakebuf_r>:
 8004f20:	898b      	ldrh	r3, [r1, #12]
 8004f22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f24:	079d      	lsls	r5, r3, #30
 8004f26:	4606      	mov	r6, r0
 8004f28:	460c      	mov	r4, r1
 8004f2a:	d507      	bpl.n	8004f3c <__smakebuf_r+0x1c>
 8004f2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f30:	6023      	str	r3, [r4, #0]
 8004f32:	6123      	str	r3, [r4, #16]
 8004f34:	2301      	movs	r3, #1
 8004f36:	6163      	str	r3, [r4, #20]
 8004f38:	b003      	add	sp, #12
 8004f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f3c:	ab01      	add	r3, sp, #4
 8004f3e:	466a      	mov	r2, sp
 8004f40:	f7ff ffc8 	bl	8004ed4 <__swhatbuf_r>
 8004f44:	9f00      	ldr	r7, [sp, #0]
 8004f46:	4605      	mov	r5, r0
 8004f48:	4639      	mov	r1, r7
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	f7ff fa14 	bl	8004378 <_malloc_r>
 8004f50:	b948      	cbnz	r0, 8004f66 <__smakebuf_r+0x46>
 8004f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f56:	059a      	lsls	r2, r3, #22
 8004f58:	d4ee      	bmi.n	8004f38 <__smakebuf_r+0x18>
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
 8004f5e:	f043 0302 	orr.w	r3, r3, #2
 8004f62:	81a3      	strh	r3, [r4, #12]
 8004f64:	e7e2      	b.n	8004f2c <__smakebuf_r+0xc>
 8004f66:	89a3      	ldrh	r3, [r4, #12]
 8004f68:	6020      	str	r0, [r4, #0]
 8004f6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f6e:	81a3      	strh	r3, [r4, #12]
 8004f70:	9b01      	ldr	r3, [sp, #4]
 8004f72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004f76:	b15b      	cbz	r3, 8004f90 <__smakebuf_r+0x70>
 8004f78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f7c:	4630      	mov	r0, r6
 8004f7e:	f000 f81d 	bl	8004fbc <_isatty_r>
 8004f82:	b128      	cbz	r0, 8004f90 <__smakebuf_r+0x70>
 8004f84:	89a3      	ldrh	r3, [r4, #12]
 8004f86:	f023 0303 	bic.w	r3, r3, #3
 8004f8a:	f043 0301 	orr.w	r3, r3, #1
 8004f8e:	81a3      	strh	r3, [r4, #12]
 8004f90:	89a3      	ldrh	r3, [r4, #12]
 8004f92:	431d      	orrs	r5, r3
 8004f94:	81a5      	strh	r5, [r4, #12]
 8004f96:	e7cf      	b.n	8004f38 <__smakebuf_r+0x18>

08004f98 <_fstat_r>:
 8004f98:	b538      	push	{r3, r4, r5, lr}
 8004f9a:	4d07      	ldr	r5, [pc, #28]	@ (8004fb8 <_fstat_r+0x20>)
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	4604      	mov	r4, r0
 8004fa0:	4608      	mov	r0, r1
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	602b      	str	r3, [r5, #0]
 8004fa6:	f7fe fd72 	bl	8003a8e <_fstat>
 8004faa:	1c43      	adds	r3, r0, #1
 8004fac:	d102      	bne.n	8004fb4 <_fstat_r+0x1c>
 8004fae:	682b      	ldr	r3, [r5, #0]
 8004fb0:	b103      	cbz	r3, 8004fb4 <_fstat_r+0x1c>
 8004fb2:	6023      	str	r3, [r4, #0]
 8004fb4:	bd38      	pop	{r3, r4, r5, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000a5c 	.word	0x20000a5c

08004fbc <_isatty_r>:
 8004fbc:	b538      	push	{r3, r4, r5, lr}
 8004fbe:	4d06      	ldr	r5, [pc, #24]	@ (8004fd8 <_isatty_r+0x1c>)
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	4604      	mov	r4, r0
 8004fc4:	4608      	mov	r0, r1
 8004fc6:	602b      	str	r3, [r5, #0]
 8004fc8:	f7fe fec4 	bl	8003d54 <_isatty>
 8004fcc:	1c43      	adds	r3, r0, #1
 8004fce:	d102      	bne.n	8004fd6 <_isatty_r+0x1a>
 8004fd0:	682b      	ldr	r3, [r5, #0]
 8004fd2:	b103      	cbz	r3, 8004fd6 <_isatty_r+0x1a>
 8004fd4:	6023      	str	r3, [r4, #0]
 8004fd6:	bd38      	pop	{r3, r4, r5, pc}
 8004fd8:	20000a5c 	.word	0x20000a5c

08004fdc <_malloc_usable_size_r>:
 8004fdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fe0:	1f18      	subs	r0, r3, #4
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	bfbc      	itt	lt
 8004fe6:	580b      	ldrlt	r3, [r1, r0]
 8004fe8:	18c0      	addlt	r0, r0, r3
 8004fea:	4770      	bx	lr

08004fec <_init>:
 8004fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fee:	bf00      	nop
 8004ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ff2:	bc08      	pop	{r3}
 8004ff4:	469e      	mov	lr, r3
 8004ff6:	4770      	bx	lr

08004ff8 <_fini>:
 8004ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ffa:	bf00      	nop
 8004ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ffe:	bc08      	pop	{r3}
 8005000:	469e      	mov	lr, r3
 8005002:	4770      	bx	lr
